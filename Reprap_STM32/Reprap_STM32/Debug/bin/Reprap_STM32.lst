
D:\CooCox\workspace\Reprap_STM32\reprap_stm32/Debug/bin\Reprap_STM32.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	08 2c 00 20 95 0e 00 08 91 0e 00 08 91 0e 00 08     .,. ............
 8000010:	91 0e 00 08 91 0e 00 08 91 0e 00 08 00 00 00 00     ................
	...
 800002c:	85 47 00 08 91 0e 00 08 00 00 00 00 4d 48 00 08     .G..........MH..
 800003c:	e1 03 00 08 91 0e 00 08 91 0e 00 08 91 0e 00 08     ................
 800004c:	91 0e 00 08 91 0e 00 08 91 0e 00 08 91 0e 00 08     ................
 800005c:	91 0e 00 08 91 0e 00 08 91 0e 00 08 91 0e 00 08     ................
 800006c:	f1 03 00 08 91 0e 00 08 91 0e 00 08 91 0e 00 08     ................
 800007c:	91 0e 00 08 91 0e 00 08 91 0e 00 08 91 0e 00 08     ................
 800008c:	91 0e 00 08 fd 03 00 08 91 0e 00 08 91 0e 00 08     ................
 800009c:	91 0e 00 08 91 0e 00 08 91 0e 00 08 91 0e 00 08     ................
 80000ac:	91 0e 00 08 09 04 00 08 91 0e 00 08 91 0e 00 08     ................
 80000bc:	91 0e 00 08 91 0e 00 08 91 0e 00 08 91 0e 00 08     ................
 80000cc:	91 0e 00 08 91 0e 00 08 91 0e 00 08 91 0e 00 08     ................
 80000dc:	91 0e 00 08 91 0e 00 08 91 0e 00 08 91 0e 00 08     ................
	...
 8000108:	5f f8 08 f1                                         _...

0800010c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800010c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000110:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000112:	6800      	ldr	r0, [r0, #0]
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000114:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000116:	07c4      	lsls	r4, r0, #31
 8000118:	d417      	bmi.n	800014a <HAL_RCCEx_PeriphCLKConfig+0x3e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800011a:	0783      	lsls	r3, r0, #30
 800011c:	d40d      	bmi.n	800013a <HAL_RCCEx_PeriphCLKConfig+0x2e>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800011e:	f010 0010 	ands.w	r0, r0, #16
 8000122:	d007      	beq.n	8000134 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000124:	493c      	ldr	r1, [pc, #240]	; (8000218 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8000126:	68f2      	ldr	r2, [r6, #12]
 8000128:	684b      	ldr	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800012a:	2000      	movs	r0, #0
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800012c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000130:	4313      	orrs	r3, r2
 8000132:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
}
 8000134:	b002      	add	sp, #8
 8000136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800013a:	4937      	ldr	r1, [pc, #220]	; (8000218 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800013c:	68b3      	ldr	r3, [r6, #8]
 800013e:	684a      	ldr	r2, [r1, #4]
 8000140:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000144:	4313      	orrs	r3, r2
 8000146:	604b      	str	r3, [r1, #4]
 8000148:	e7e9      	b.n	800011e <HAL_RCCEx_PeriphCLKConfig+0x12>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800014a:	4a33      	ldr	r2, [pc, #204]	; (8000218 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800014c:	4b33      	ldr	r3, [pc, #204]	; (800021c <HAL_RCCEx_PeriphCLKConfig+0x110>)
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800014e:	69d1      	ldr	r1, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000150:	461c      	mov	r4, r3
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000152:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000156:	61d1      	str	r1, [r2, #28]
 8000158:	69d2      	ldr	r2, [r2, #28]
 800015a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800015e:	9201      	str	r2, [sp, #4]
 8000160:	9a01      	ldr	r2, [sp, #4]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8000162:	681a      	ldr	r2, [r3, #0]
 8000164:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000168:	601a      	str	r2, [r3, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800016a:	f000 f925 	bl	80003b8 <HAL_GetTick>
 800016e:	4605      	mov	r5, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000170:	e004      	b.n	800017c <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000172:	f000 f921 	bl	80003b8 <HAL_GetTick>
 8000176:	1b40      	subs	r0, r0, r5
 8000178:	2864      	cmp	r0, #100	; 0x64
 800017a:	d829      	bhi.n	80001d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    SET_BIT(PWR->CR, PWR_CR_DBP);
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800017c:	6823      	ldr	r3, [r4, #0]
 800017e:	05d8      	lsls	r0, r3, #23
 8000180:	d5f7      	bpl.n	8000172 <HAL_RCCEx_PeriphCLKConfig+0x66>
        return HAL_TIMEOUT;
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8000182:	4c25      	ldr	r4, [pc, #148]	; (8000218 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8000184:	6873      	ldr	r3, [r6, #4]
 8000186:	6a22      	ldr	r2, [r4, #32]
 8000188:	4053      	eors	r3, r2
 800018a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800018e:	d01d      	beq.n	80001cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000190:	6a21      	ldr	r1, [r4, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000192:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000196:	f421 7540 	bic.w	r5, r1, #768	; 0x300
 800019a:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800019e:	fab2 f282 	clz	r2, r2
 80001a2:	481f      	ldr	r0, [pc, #124]	; (8000220 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80001a4:	2701      	movs	r7, #1
 80001a6:	f840 7022 	str.w	r7, [r0, r2, lsl #2]
 80001aa:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80001ae:	fab3 f383 	clz	r3, r3
 80001b2:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 80001b4:	0789      	lsls	r1, r1, #30
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 80001b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80001ba:	6225      	str	r5, [r4, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 80001bc:	d40c      	bmi.n	80001d8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
          {
            return HAL_TIMEOUT;
          }      
        }  
      }
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80001be:	4916      	ldr	r1, [pc, #88]	; (8000218 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80001c0:	6873      	ldr	r3, [r6, #4]
 80001c2:	6a0a      	ldr	r2, [r1, #32]
 80001c4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80001c8:	4313      	orrs	r3, r2
 80001ca:	620b      	str	r3, [r1, #32]
 80001cc:	6830      	ldr	r0, [r6, #0]
 80001ce:	e7a4      	b.n	800011a <HAL_RCCEx_PeriphCLKConfig+0xe>
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
      {
        return HAL_TIMEOUT;
 80001d0:	2003      	movs	r0, #3
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
}
 80001d2:	b002      	add	sp, #8
 80001d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 80001d8:	f000 f8ee 	bl	80003b8 <HAL_GetTick>
 80001dc:	f04f 0802 	mov.w	r8, #2
 80001e0:	4607      	mov	r7, r0
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80001e2:	f241 3588 	movw	r5, #5000	; 0x1388
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80001e6:	e00f      	b.n	8000208 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80001e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80001ea:	fa98 f3a8 	rbit	r3, r8
 80001ee:	fab3 f383 	clz	r3, r3
 80001f2:	f003 031f 	and.w	r3, r3, #31
 80001f6:	fa22 f303 	lsr.w	r3, r2, r3
 80001fa:	07da      	lsls	r2, r3, #31
 80001fc:	d4df      	bmi.n	80001be <HAL_RCCEx_PeriphCLKConfig+0xb2>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80001fe:	f000 f8db 	bl	80003b8 <HAL_GetTick>
 8000202:	1bc0      	subs	r0, r0, r7
 8000204:	42a8      	cmp	r0, r5
 8000206:	d8e3      	bhi.n	80001d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8000208:	fa98 f3a8 	rbit	r3, r8
 800020c:	fa98 f3a8 	rbit	r3, r8
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0e9      	beq.n	80001e8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8000214:	6a22      	ldr	r2, [r4, #32]
 8000216:	e7e8      	b.n	80001ea <HAL_RCCEx_PeriphCLKConfig+0xde>
 8000218:	40021000 	.word	0x40021000
 800021c:	40007000 	.word	0x40007000
 8000220:	42420400 	.word	0x42420400

08000224 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8000224:	b570      	push	{r4, r5, r6, lr}
 8000226:	4606      	mov	r6, r0
 || defined(STM32F105xC) || defined(STM32F107xC)
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000228:	4d40      	ldr	r5, [pc, #256]	; (800032c <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800022a:	b086      	sub	sp, #24
 || defined(STM32F105xC) || defined(STM32F107xC)
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 800022c:	6828      	ldr	r0, [r5, #0]
 800022e:	6869      	ldr	r1, [r5, #4]
 8000230:	68aa      	ldr	r2, [r5, #8]
 8000232:	68eb      	ldr	r3, [r5, #12]
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8000234:	8a2d      	ldrh	r5, [r5, #16]
 || defined(STM32F105xC) || defined(STM32F107xC)
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000236:	ac02      	add	r4, sp, #8
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8000238:	2e02      	cmp	r6, #2
 || defined(STM32F105xC) || defined(STM32F107xC)
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 800023a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 800023c:	f8ad 5004 	strh.w	r5, [sp, #4]
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8000240:	d050      	beq.n	80002e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8000242:	2e10      	cmp	r6, #16
 8000244:	d01c      	beq.n	8000280 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8000246:	2e01      	cmp	r6, #1
 8000248:	d002      	beq.n	8000250 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
        frequency = HSE_VALUE / 128;
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0;
 800024a:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 800024c:	b006      	add	sp, #24
 800024e:	bd70      	pop	{r4, r5, r6, pc}
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8000250:	f240 3202 	movw	r2, #770	; 0x302
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8000254:	4936      	ldr	r1, [pc, #216]	; (8000330 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 8000256:	6a0b      	ldr	r3, [r1, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8000258:	401a      	ands	r2, r3
 800025a:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800025e:	d054      	beq.n	800030a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8000260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000268:	d057      	beq.n	800031a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800026a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800026e:	d1ec      	bne.n	800024a <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8000270:	680b      	ldr	r3, [r1, #0]
      {
        frequency = HSE_VALUE / 128;
 8000272:	f24f 4024 	movw	r0, #62500	; 0xf424
 8000276:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800027a:	bf08      	it	eq
 800027c:	2000      	moveq	r0, #0
 800027e:	e7e5      	b.n	800024c <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8000280:	492b      	ldr	r1, [pc, #172]	; (8000330 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 8000282:	684c      	ldr	r4, [r1, #4]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8000284:	6808      	ldr	r0, [r1, #0]
 8000286:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800028a:	d0df      	beq.n	800024c <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800028c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000290:	fa93 f3a3 	rbit	r3, r3
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8000294:	fab3 f283 	clz	r2, r3
 8000298:	f404 1370 	and.w	r3, r4, #3932160	; 0x3c0000
 800029c:	40d3      	lsrs	r3, r2
 800029e:	aa06      	add	r2, sp, #24
 80002a0:	4413      	add	r3, r2
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80002a2:	03e2      	lsls	r2, r4, #15
      temp_reg = RCC->CFGR;
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 80002a4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80002a8:	d533      	bpl.n	8000312 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 80002aa:	6849      	ldr	r1, [r1, #4]
 80002ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80002b0:	fa92 f2a2 	rbit	r2, r2
 80002b4:	fab2 f082 	clz	r0, r2
 80002b8:	f401 3200 	and.w	r2, r1, #131072	; 0x20000
 80002bc:	40c2      	lsrs	r2, r0
 80002be:	a906      	add	r1, sp, #24
 80002c0:	440a      	add	r2, r1
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80002c2:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 80002c6:	4a1b      	ldr	r2, [pc, #108]	; (8000334 <HAL_RCCEx_GetPeriphCLKFreq+0x110>)
 80002c8:	fbb2 f0f0 	udiv	r0, r2, r0
 80002cc:	fb03 f000 	mul.w	r0, r3, r0
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80002d0:	4b17      	ldr	r3, [pc, #92]	; (8000330 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	025b      	lsls	r3, r3, #9
 80002d6:	d4b9      	bmi.n	800024c <HAL_RCCEx_GetPeriphCLKFreq+0x28>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
 80002d8:	4b17      	ldr	r3, [pc, #92]	; (8000338 <HAL_RCCEx_GetPeriphCLKFreq+0x114>)
 80002da:	0040      	lsls	r0, r0, #1
 80002dc:	fba3 3000 	umull	r3, r0, r3, r0
 80002e0:	0840      	lsrs	r0, r0, #1
 80002e2:	e7b3      	b.n	800024c <HAL_RCCEx_GetPeriphCLKFreq+0x28>
      }
      break;
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> POSITION_VAL(RCC_CFGR_ADCPRE_DIV4)) + 1) * 2);
 80002e4:	f000 fdbc 	bl	8000e60 <HAL_RCC_GetPCLK2Freq>
 80002e8:	4a11      	ldr	r2, [pc, #68]	; (8000330 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 80002ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80002ee:	6852      	ldr	r2, [r2, #4]
 80002f0:	fa93 f3a3 	rbit	r3, r3
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	f402 4340 	and.w	r3, r2, #49152	; 0xc000
 80002fc:	40cb      	lsrs	r3, r1
 80002fe:	3301      	adds	r3, #1
 8000300:	005b      	lsls	r3, r3, #1
 8000302:	fbb0 f0f3 	udiv	r0, r0, r3
    {
      break;
    }
  }
  return(frequency);
}
 8000306:	b006      	add	sp, #24
 8000308:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
      {
        frequency = LSE_VALUE;
 800030a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    {
      break;
    }
  }
  return(frequency);
}
 800030e:	b006      	add	sp, #24
 8000310:	bd70      	pop	{r4, r5, r6, pc}
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000312:	480a      	ldr	r0, [pc, #40]	; (800033c <HAL_RCCEx_GetPeriphCLKFreq+0x118>)
 8000314:	fb00 f003 	mul.w	r0, r0, r3
 8000318:	e7da      	b.n	80002d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800031a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
      {
        frequency = LSI_VALUE;
 800031c:	f649 4040 	movw	r0, #40000	; 0x9c40
 8000320:	f013 0f02 	tst.w	r3, #2
 8000324:	bf08      	it	eq
 8000326:	2000      	moveq	r0, #0
 8000328:	e790      	b.n	800024c <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800032a:	bf00      	nop
 800032c:	080060ec 	.word	0x080060ec
 8000330:	40021000 	.word	0x40021000
 8000334:	007a1200 	.word	0x007a1200
 8000338:	aaaaaaab 	.word	0xaaaaaaab
 800033c:	003d0900 	.word	0x003d0900

08000340 <HAL_PWR_EnableBkUpAccess>:
 8000340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000344:	fa93 f3a3 	rbit	r3, r3
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000348:	fab3 f383 	clz	r3, r3
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000352:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 8000356:	2201      	movs	r2, #1
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	4770      	bx	lr

0800035c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800035c:	b510      	push	{r4, lr}
 800035e:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000360:	f000 fd62 	bl	8000e28 <HAL_RCC_GetHCLKFreq>
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <HAL_InitTick+0x24>)
 8000366:	fba3 3000 	umull	r3, r0, r3, r0
 800036a:	0980      	lsrs	r0, r0, #6
 800036c:	f000 f8a8 	bl	80004c0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000370:	4621      	mov	r1, r4
 8000372:	2200      	movs	r2, #0
 8000374:	f04f 30ff 	mov.w	r0, #4294967295
 8000378:	f000 f85e 	bl	8000438 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800037c:	2000      	movs	r0, #0
 800037e:	bd10      	pop	{r4, pc}
 8000380:	10624dd3 	.word	0x10624dd3

08000384 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000384:	4a07      	ldr	r2, [pc, #28]	; (80003a4 <HAL_Init+0x20>)
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000386:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000388:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800038a:	2003      	movs	r0, #3
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800038c:	f043 0310 	orr.w	r3, r3, #16
 8000390:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000392:	f000 f83f 	bl	8000414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000396:	200f      	movs	r0, #15
 8000398:	f7ff ffe0 	bl	800035c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800039c:	f003 fdc8 	bl	8003f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80003a0:	2000      	movs	r0, #0
 80003a2:	bd08      	pop	{r3, pc}
 80003a4:	40022000 	.word	0x40022000

080003a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80003a8:	4a02      	ldr	r2, [pc, #8]	; (80003b4 <HAL_IncTick+0xc>)
 80003aa:	6813      	ldr	r3, [r2, #0]
 80003ac:	3301      	adds	r3, #1
 80003ae:	6013      	str	r3, [r2, #0]
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	200009a4 	.word	0x200009a4

080003b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80003b8:	4b01      	ldr	r3, [pc, #4]	; (80003c0 <HAL_GetTick+0x8>)
 80003ba:	6818      	ldr	r0, [r3, #0]
}
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	200009a4 	.word	0x200009a4

080003c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80003c4:	b510      	push	{r4, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80003ca:	f7ff fff5 	bl	80003b8 <HAL_GetTick>
 80003ce:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80003d0:	f7ff fff2 	bl	80003b8 <HAL_GetTick>
 80003d4:	9b01      	ldr	r3, [sp, #4]
 80003d6:	1b00      	subs	r0, r0, r4
 80003d8:	4298      	cmp	r0, r3
 80003da:	d3f9      	bcc.n	80003d0 <HAL_Delay+0xc>
  {
  }
}
 80003dc:	b002      	add	sp, #8
 80003de:	bd10      	pop	{r4, pc}

080003e0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80003e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003e2:	f7ff ffe1 	bl	80003a8 <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  osSystickHandler();
 80003ea:	f003 bedf 	b.w	80041ac <osSystickHandler>
 80003ee:	bf00      	nop

080003f0 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80003f0:	4801      	ldr	r0, [pc, #4]	; (80003f8 <DMA1_Channel1_IRQHandler+0x8>)
 80003f2:	f003 b9ff 	b.w	80037f4 <HAL_DMA_IRQHandler>
 80003f6:	bf00      	nop
 80003f8:	20001df4 	.word	0x20001df4

080003fc <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003fc:	4801      	ldr	r0, [pc, #4]	; (8000404 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80003fe:	f001 b853 	b.w	80014a8 <HAL_PCD_IRQHandler>
 8000402:	bf00      	nop
 8000404:	2000207c 	.word	0x2000207c

08000408 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000408:	4801      	ldr	r0, [pc, #4]	; (8000410 <TIM2_IRQHandler+0x8>)
 800040a:	f004 bf6b 	b.w	80052e4 <HAL_TIM_IRQHandler>
 800040e:	bf00      	nop
 8000410:	20001e40 	.word	0x20001e40

08000414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000414:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000418:	4906      	ldr	r1, [pc, #24]	; (8000434 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800041a:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800041c:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800041e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000422:	401a      	ands	r2, r3
 8000424:	f042 63bf 	orr.w	r3, r2, #100139008	; 0x5f80000
 8000428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800042c:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800042e:	60cb      	str	r3, [r1, #12]
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	e000ed00 	.word	0xe000ed00

08000438 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000438:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800043a:	b430      	push	{r4, r5}
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000442:	f1c3 0507 	rsb	r5, r3, #7
 8000446:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000448:	f103 0404 	add.w	r4, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800044c:	bf28      	it	cs
 800044e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000450:	2c06      	cmp	r4, #6
 8000452:	d918      	bls.n	8000486 <HAL_NVIC_SetPriority+0x4e>
 8000454:	3b03      	subs	r3, #3
 8000456:	2401      	movs	r4, #1
 8000458:	409c      	lsls	r4, r3
 800045a:	3c01      	subs	r4, #1
 800045c:	4022      	ands	r2, r4

  return (
 800045e:	2401      	movs	r4, #1
 8000460:	40ac      	lsls	r4, r5
 8000462:	3c01      	subs	r4, #1
 8000464:	4021      	ands	r1, r4
 8000466:	fa01 f303 	lsl.w	r3, r1, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800046a:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800046c:	ea42 0203 	orr.w	r2, r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000470:	db0c      	blt.n	800048c <HAL_NVIC_SetPriority+0x54>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000472:	0112      	lsls	r2, r2, #4
 8000474:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000478:	b2d2      	uxtb	r2, r2
 800047a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800047e:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000482:	bc30      	pop	{r4, r5}
 8000484:	4770      	bx	lr
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000486:	2200      	movs	r2, #0
 8000488:	4613      	mov	r3, r2
 800048a:	e7e8      	b.n	800045e <HAL_NVIC_SetPriority+0x26>
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <HAL_NVIC_SetPriority+0x6c>)
 800048e:	f000 000f 	and.w	r0, r0, #15
 8000492:	0112      	lsls	r2, r2, #4
 8000494:	b2d2      	uxtb	r2, r2
 8000496:	4403      	add	r3, r0
 8000498:	761a      	strb	r2, [r3, #24]
 800049a:	bc30      	pop	{r4, r5}
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	e000ed00 	.word	0xe000ed00
 80004a4:	e000ecfc 	.word	0xe000ecfc

080004a8 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004a8:	f000 011f 	and.w	r1, r0, #31
 80004ac:	2301      	movs	r3, #1
 80004ae:	4a03      	ldr	r2, [pc, #12]	; (80004bc <HAL_NVIC_EnableIRQ+0x14>)
 80004b0:	0940      	lsrs	r0, r0, #5
 80004b2:	408b      	lsls	r3, r1
 80004b4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	e000e100 	.word	0xe000e100

080004c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004c0:	3801      	subs	r0, #1
 80004c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80004c6:	d20d      	bcs.n	80004e4 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004c8:	b430      	push	{r4, r5}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004ca:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <HAL_SYSTICK_Config+0x28>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004cc:	4c07      	ldr	r4, [pc, #28]	; (80004ec <HAL_SYSTICK_Config+0x2c>)
 80004ce:	25f0      	movs	r5, #240	; 0xf0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004d0:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004d2:	2200      	movs	r2, #0
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d4:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004d8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004da:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 80004dc:	bc30      	pop	{r4, r5}
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004de:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004e0:	6019      	str	r1, [r3, #0]
 80004e2:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80004e4:	2001      	movs	r0, #1
 80004e6:	4770      	bx	lr
 80004e8:	e000e010 	.word	0xe000e010
 80004ec:	e000ed00 	.word	0xe000ed00

080004f0 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80004f2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80004f4:	6813      	ldr	r3, [r2, #0]
 80004f6:	bf0c      	ite	eq
 80004f8:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80004fc:	f023 0304 	bicne.w	r3, r3, #4
 8000500:	6013      	str	r3, [r2, #0]
 8000502:	4770      	bx	lr
 8000504:	e000e010 	.word	0xe000e010

08000508 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8000508:	b180      	cbz	r0, 800052c <HAL_CRC_Init+0x24>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 800050a:	7943      	ldrb	r3, [r0, #5]
  * @param  hcrc: pointer to a CRC_HandleTypeDef structure that contains
  *         the configuration information for CRC
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800050c:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 800050e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000512:	4604      	mov	r4, r0
 8000514:	b11b      	cbz	r3, 800051e <HAL_CRC_Init+0x16>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000516:	2301      	movs	r3, #1
 8000518:	7163      	strb	r3, [r4, #5]
  
  /* Return function status */
  return HAL_OK;
 800051a:	2000      	movs	r0, #0
 800051c:	bd10      	pop	{r4, pc}
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800051e:	7102      	strb	r2, [r0, #4]
    
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000520:	f003 fd66 	bl	8003ff0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000524:	2301      	movs	r3, #1
 8000526:	7163      	strb	r3, [r4, #5]
  
  /* Return function status */
  return HAL_OK;
 8000528:	2000      	movs	r0, #0
 800052a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
  {
    return HAL_ERROR;
 800052c:	2001      	movs	r0, #1
 800052e:	4770      	bx	lr

08000530 <HAL_IWDG_Init>:
  * @param  hiwdg: pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8000530:	b510      	push	{r4, lr}
  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8000532:	b310      	cbz	r0, 800057a <HAL_IWDG_Init+0x4a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload)); 
  
  /* Check pending flag, if previous update not done, return error */
  if((__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_PVU) != RESET)
 8000534:	6803      	ldr	r3, [r0, #0]
 8000536:	68da      	ldr	r2, [r3, #12]
 8000538:	07d1      	lsls	r1, r2, #31
 800053a:	d41b      	bmi.n	8000574 <HAL_IWDG_Init+0x44>
     &&(__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_RVU) != RESET))
  {
    return HAL_ERROR;
  }
    
  if(hiwdg->State == HAL_IWDG_STATE_RESET)
 800053c:	7b42      	ldrb	r2, [r0, #13]
 800053e:	4604      	mov	r4, r0
 8000540:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8000544:	b1da      	cbz	r2, 800057e <HAL_IWDG_Init+0x4e>
  
  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_BUSY;  
  
  /* Enable write access to IWDG_PR and IWDG_RLR registers */  
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8000546:	f245 5255 	movw	r2, #21845	; 0x5555
    /* Init the low level hardware */
    HAL_IWDG_MspInit(hiwdg);
  }
  
  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_BUSY;  
 800054a:	2102      	movs	r1, #2
 800054c:	7361      	strb	r1, [r4, #13]
  
  /* Enable write access to IWDG_PR and IWDG_RLR registers */  
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800054e:	601a      	str	r2, [r3, #0]
  
  /* Write to IWDG registers the IWDG_Prescaler & IWDG_Reload values to work with */
  MODIFY_REG(hiwdg->Instance->PR, IWDG_PR_PR, hiwdg->Init.Prescaler);
 8000550:	6859      	ldr	r1, [r3, #4]
 8000552:	6862      	ldr	r2, [r4, #4]
 8000554:	f021 0107 	bic.w	r1, r1, #7
 8000558:	430a      	orrs	r2, r1
 800055a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hiwdg->Instance->RLR, IWDG_RLR_RL, hiwdg->Init.Reload);
 800055c:	689a      	ldr	r2, [r3, #8]
 800055e:	68a1      	ldr	r1, [r4, #8]
 8000560:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8000564:	f022 020f 	bic.w	r2, r2, #15
 8000568:	430a      	orrs	r2, r1
 
  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_READY;
 800056a:	2101      	movs	r1, #1
  /* Enable write access to IWDG_PR and IWDG_RLR registers */  
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
  
  /* Write to IWDG registers the IWDG_Prescaler & IWDG_Reload values to work with */
  MODIFY_REG(hiwdg->Instance->PR, IWDG_PR_PR, hiwdg->Init.Prescaler);
  MODIFY_REG(hiwdg->Instance->RLR, IWDG_RLR_RL, hiwdg->Init.Reload);
 800056c:	609a      	str	r2, [r3, #8]
 
  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
 800056e:	2000      	movs	r0, #0
  /* Write to IWDG registers the IWDG_Prescaler & IWDG_Reload values to work with */
  MODIFY_REG(hiwdg->Instance->PR, IWDG_PR_PR, hiwdg->Init.Prescaler);
  MODIFY_REG(hiwdg->Instance->RLR, IWDG_RLR_RL, hiwdg->Init.Reload);
 
  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_READY;
 8000570:	7361      	strb	r1, [r4, #13]
  
  /* Return function status */
  return HAL_OK;
 8000572:	bd10      	pop	{r4, pc}
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload)); 
  
  /* Check pending flag, if previous update not done, return error */
  if((__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_PVU) != RESET)
     &&(__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_RVU) != RESET))
 8000574:	68da      	ldr	r2, [r3, #12]
 8000576:	0792      	lsls	r2, r2, #30
 8000578:	d5e0      	bpl.n	800053c <HAL_IWDG_Init+0xc>
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
  {
    return HAL_ERROR;
 800057a:	2001      	movs	r0, #1
  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 800057c:	bd10      	pop	{r4, pc}
  }
    
  if(hiwdg->State == HAL_IWDG_STATE_RESET)
  {  
    /* Allocate lock resource and initialize it */
    hiwdg->Lock = HAL_UNLOCKED;
 800057e:	7301      	strb	r1, [r0, #12]
    
    /* Init the low level hardware */
    HAL_IWDG_MspInit(hiwdg);
 8000580:	f003 fd4c 	bl	800401c <HAL_IWDG_MspInit>
 8000584:	6823      	ldr	r3, [r4, #0]
 8000586:	e7de      	b.n	8000546 <HAL_IWDG_Init+0x16>

08000588 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000588:	4b10      	ldr	r3, [pc, #64]	; (80005cc <SystemInit+0x44>)
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800058a:	b410      	push	{r4}
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800058c:	6819      	ldr	r1, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800058e:	4a10      	ldr	r2, [pc, #64]	; (80005d0 <SystemInit+0x48>)
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000590:	f041 0101 	orr.w	r1, r1, #1
 8000594:	6019      	str	r1, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000596:	6859      	ldr	r1, [r3, #4]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000598:	480e      	ldr	r0, [pc, #56]	; (80005d4 <SystemInit+0x4c>)
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800059a:	400a      	ands	r2, r1
 800059c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800059e:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80005a0:	f44f 041f 	mov.w	r4, #10420224	; 0x9f0000
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005a4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80005a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005ac:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005ae:	681a      	ldr	r2, [r3, #0]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005b8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80005ba:	685a      	ldr	r2, [r3, #4]
 80005bc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80005c0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80005c2:	609c      	str	r4, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005c4:	6081      	str	r1, [r0, #8]
#endif 
}
 80005c6:	bc10      	pop	{r4}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40021000 	.word	0x40021000
 80005d0:	f8ff0000 	.word	0xf8ff0000
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL is not disabled when USB OTG FS clock is enabled (specific to devices with USB FS)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80005d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005dc:	6803      	ldr	r3, [r0, #0]
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL is not disabled when USB OTG FS clock is enabled (specific to devices with USB FS)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80005de:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005e0:	07df      	lsls	r7, r3, #31
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL is not disabled when USB OTG FS clock is enabled (specific to devices with USB FS)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80005e2:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005e4:	d565      	bpl.n	80006b2 <HAL_RCC_OscConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005e6:	49be      	ldr	r1, [pc, #760]	; (80008e0 <HAL_RCC_OscConfig+0x308>)
 80005e8:	684a      	ldr	r2, [r1, #4]
 80005ea:	f002 020c 	and.w	r2, r2, #12
 80005ee:	2a04      	cmp	r2, #4
 80005f0:	f000 8125 	beq.w	800083e <HAL_RCC_OscConfig+0x266>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005f4:	684a      	ldr	r2, [r1, #4]
 80005f6:	f002 020c 	and.w	r2, r2, #12
 80005fa:	2a08      	cmp	r2, #8
 80005fc:	f000 811b 	beq.w	8000836 <HAL_RCC_OscConfig+0x25e>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8000600:	4bb7      	ldr	r3, [pc, #732]	; (80008e0 <HAL_RCC_OscConfig+0x308>)
 8000602:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8000606:	681a      	ldr	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000608:	461d      	mov	r5, r3
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800060a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000616:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000618:	f7ff fece 	bl	80003b8 <HAL_GetTick>
 800061c:	4606      	mov	r6, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800061e:	e005      	b.n	800062c <HAL_RCC_OscConfig+0x54>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000620:	f7ff feca 	bl	80003b8 <HAL_GetTick>
 8000624:	1b80      	subs	r0, r0, r6
 8000626:	2864      	cmp	r0, #100	; 0x64
 8000628:	f200 811f 	bhi.w	800086a <HAL_RCC_OscConfig+0x292>
 800062c:	fa97 f3a7 	rbit	r3, r7
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000630:	49ab      	ldr	r1, [pc, #684]	; (80008e0 <HAL_RCC_OscConfig+0x308>)
 8000632:	682a      	ldr	r2, [r5, #0]
 8000634:	fa97 f3a7 	rbit	r3, r7
 8000638:	fab3 f383 	clz	r3, r3
 800063c:	f003 031f 	and.w	r3, r3, #31
 8000640:	fa22 f303 	lsr.w	r3, r2, r3
 8000644:	07d8      	lsls	r0, r3, #31
 8000646:	d4eb      	bmi.n	8000620 <HAL_RCC_OscConfig+0x48>
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000648:	6863      	ldr	r3, [r4, #4]
 800064a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800064e:	d011      	beq.n	8000674 <HAL_RCC_OscConfig+0x9c>
 8000650:	2b00      	cmp	r3, #0
 8000652:	f000 81b6 	beq.w	80009c2 <HAL_RCC_OscConfig+0x3ea>
 8000656:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800065a:	680b      	ldr	r3, [r1, #0]
 800065c:	d007      	beq.n	800066e <HAL_RCC_OscConfig+0x96>
 800065e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000662:	600b      	str	r3, [r1, #0]
 8000664:	680b      	ldr	r3, [r1, #0]
 8000666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800066a:	600b      	str	r3, [r1, #0]
 800066c:	e006      	b.n	800067c <HAL_RCC_OscConfig+0xa4>
 800066e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000672:	600b      	str	r3, [r1, #0]
 8000674:	680b      	ldr	r3, [r1, #0]
 8000676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800067a:	600b      	str	r3, [r1, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800067c:	f7ff fe9c 	bl	80003b8 <HAL_GetTick>
 8000680:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8000684:	4606      	mov	r6, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000686:	4d96      	ldr	r5, [pc, #600]	; (80008e0 <HAL_RCC_OscConfig+0x308>)
 8000688:	e005      	b.n	8000696 <HAL_RCC_OscConfig+0xbe>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800068a:	f7ff fe95 	bl	80003b8 <HAL_GetTick>
 800068e:	1b80      	subs	r0, r0, r6
 8000690:	2864      	cmp	r0, #100	; 0x64
 8000692:	f200 80ea 	bhi.w	800086a <HAL_RCC_OscConfig+0x292>
 8000696:	fa97 f3a7 	rbit	r3, r7
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800069a:	682a      	ldr	r2, [r5, #0]
 800069c:	fa97 f3a7 	rbit	r3, r7
 80006a0:	fab3 f383 	clz	r3, r3
 80006a4:	f003 031f 	and.w	r3, r3, #31
 80006a8:	fa22 f303 	lsr.w	r3, r2, r3
 80006ac:	07da      	lsls	r2, r3, #31
 80006ae:	d5ec      	bpl.n	800068a <HAL_RCC_OscConfig+0xb2>
 80006b0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80006b2:	0798      	lsls	r0, r3, #30
 80006b4:	d542      	bpl.n	800073c <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80006b6:	4a8a      	ldr	r2, [pc, #552]	; (80008e0 <HAL_RCC_OscConfig+0x308>)
 80006b8:	6851      	ldr	r1, [r2, #4]
 80006ba:	f011 0f0c 	tst.w	r1, #12
 80006be:	f000 80a4 	beq.w	800080a <HAL_RCC_OscConfig+0x232>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80006c2:	6851      	ldr	r1, [r2, #4]
 80006c4:	f001 010c 	and.w	r1, r1, #12
 80006c8:	2908      	cmp	r1, #8
 80006ca:	f000 809a 	beq.w	8000802 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006ce:	6922      	ldr	r2, [r4, #16]
 80006d0:	2a00      	cmp	r2, #0
 80006d2:	f000 8150 	beq.w	8000976 <HAL_RCC_OscConfig+0x39e>
 80006d6:	2201      	movs	r2, #1
 80006d8:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80006dc:	fab3 f383 	clz	r3, r3
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80006e6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80006ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80006ec:	f7ff fe64 	bl	80003b8 <HAL_GetTick>
 80006f0:	2702      	movs	r7, #2
 80006f2:	4606      	mov	r6, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006f4:	4d7a      	ldr	r5, [pc, #488]	; (80008e0 <HAL_RCC_OscConfig+0x308>)
 80006f6:	e005      	b.n	8000704 <HAL_RCC_OscConfig+0x12c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006f8:	f7ff fe5e 	bl	80003b8 <HAL_GetTick>
 80006fc:	1b80      	subs	r0, r0, r6
 80006fe:	2802      	cmp	r0, #2
 8000700:	f200 80b3 	bhi.w	800086a <HAL_RCC_OscConfig+0x292>
 8000704:	fa97 f3a7 	rbit	r3, r7
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000708:	4975      	ldr	r1, [pc, #468]	; (80008e0 <HAL_RCC_OscConfig+0x308>)
 800070a:	682a      	ldr	r2, [r5, #0]
 800070c:	fa97 f3a7 	rbit	r3, r7
 8000710:	fab3 f383 	clz	r3, r3
 8000714:	f003 031f 	and.w	r3, r3, #31
 8000718:	fa22 f303 	lsr.w	r3, r2, r3
 800071c:	07db      	lsls	r3, r3, #31
 800071e:	d5eb      	bpl.n	80006f8 <HAL_RCC_OscConfig+0x120>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000720:	680b      	ldr	r3, [r1, #0]
 8000722:	22f8      	movs	r2, #248	; 0xf8
 8000724:	fa92 f2a2 	rbit	r2, r2
 8000728:	fab2 f282 	clz	r2, r2
 800072c:	6960      	ldr	r0, [r4, #20]
 800072e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000732:	fa00 f202 	lsl.w	r2, r0, r2
 8000736:	4313      	orrs	r3, r2
 8000738:	600b      	str	r3, [r1, #0]
 800073a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800073c:	0719      	lsls	r1, r3, #28
 800073e:	d436      	bmi.n	80007ae <HAL_RCC_OscConfig+0x1d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000740:	075d      	lsls	r5, r3, #29
 8000742:	f100 80d1 	bmi.w	80008e8 <HAL_RCC_OscConfig+0x310>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000746:	69e3      	ldr	r3, [r4, #28]
 8000748:	b36b      	cbz	r3, 80007a6 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800074a:	4d65      	ldr	r5, [pc, #404]	; (80008e0 <HAL_RCC_OscConfig+0x308>)
 800074c:	686a      	ldr	r2, [r5, #4]
 800074e:	f002 020c 	and.w	r2, r2, #12
 8000752:	2a08      	cmp	r2, #8
 8000754:	d06b      	beq.n	800082e <HAL_RCC_OscConfig+0x256>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000756:	2b02      	cmp	r3, #2
 8000758:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800075c:	f000 8154 	beq.w	8000a08 <HAL_RCC_OscConfig+0x430>
 8000760:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000764:	fab3 f383 	clz	r3, r3
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800076e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000776:	f7ff fe1f 	bl	80003b8 <HAL_GetTick>
 800077a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800077e:	4606      	mov	r6, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000780:	e004      	b.n	800078c <HAL_RCC_OscConfig+0x1b4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000782:	f7ff fe19 	bl	80003b8 <HAL_GetTick>
 8000786:	1b80      	subs	r0, r0, r6
 8000788:	2802      	cmp	r0, #2
 800078a:	d86e      	bhi.n	800086a <HAL_RCC_OscConfig+0x292>
 800078c:	fa94 f3a4 	rbit	r3, r4
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000790:	682a      	ldr	r2, [r5, #0]
 8000792:	fa94 f3a4 	rbit	r3, r4
 8000796:	fab3 f383 	clz	r3, r3
 800079a:	f003 031f 	and.w	r3, r3, #31
 800079e:	fa22 f303 	lsr.w	r3, r2, r3
 80007a2:	07db      	lsls	r3, r3, #31
 80007a4:	d4ed      	bmi.n	8000782 <HAL_RCC_OscConfig+0x1aa>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80007a6:	2000      	movs	r0, #0
}
 80007a8:	b002      	add	sp, #8
 80007aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80007ae:	69a2      	ldr	r2, [r4, #24]
 80007b0:	2a00      	cmp	r2, #0
 80007b2:	d05e      	beq.n	8000872 <HAL_RCC_OscConfig+0x29a>
 80007b4:	2201      	movs	r2, #1
 80007b6:	fa92 f3a2 	rbit	r3, r2
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80007ba:	fab3 f383 	clz	r3, r3
 80007be:	4949      	ldr	r1, [pc, #292]	; (80008e4 <HAL_RCC_OscConfig+0x30c>)
 80007c0:	2702      	movs	r7, #2
 80007c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007c6:	f7ff fdf7 	bl	80003b8 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007ca:	4d45      	ldr	r5, [pc, #276]	; (80008e0 <HAL_RCC_OscConfig+0x308>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007cc:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007ce:	e004      	b.n	80007da <HAL_RCC_OscConfig+0x202>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007d0:	f7ff fdf2 	bl	80003b8 <HAL_GetTick>
 80007d4:	1b80      	subs	r0, r0, r6
 80007d6:	2802      	cmp	r0, #2
 80007d8:	d847      	bhi.n	800086a <HAL_RCC_OscConfig+0x292>
 80007da:	fa97 f3a7 	rbit	r3, r7
 80007de:	fa97 f3a7 	rbit	r3, r7
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007e2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80007e4:	fa97 f3a7 	rbit	r3, r7
 80007e8:	fab3 f383 	clz	r3, r3
 80007ec:	f003 031f 	and.w	r3, r3, #31
 80007f0:	fa22 f303 	lsr.w	r3, r2, r3
 80007f4:	07da      	lsls	r2, r3, #31
 80007f6:	d5eb      	bpl.n	80007d0 <HAL_RCC_OscConfig+0x1f8>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software temporization of 1ms 
          should be added.*/
      HAL_Delay(1);
 80007f8:	2001      	movs	r0, #1
 80007fa:	f7ff fde3 	bl	80003c4 <HAL_Delay>
 80007fe:	6823      	ldr	r3, [r4, #0]
 8000800:	e79e      	b.n	8000740 <HAL_RCC_OscConfig+0x168>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000802:	6852      	ldr	r2, [r2, #4]
 8000804:	03d1      	lsls	r1, r2, #15
 8000806:	f53f af62 	bmi.w	80006ce <HAL_RCC_OscConfig+0xf6>
 800080a:	2202      	movs	r2, #2
 800080c:	fa92 f1a2 	rbit	r1, r2
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000810:	4933      	ldr	r1, [pc, #204]	; (80008e0 <HAL_RCC_OscConfig+0x308>)
 8000812:	6809      	ldr	r1, [r1, #0]
 8000814:	fa92 f2a2 	rbit	r2, r2
 8000818:	fab2 f282 	clz	r2, r2
 800081c:	f002 021f 	and.w	r2, r2, #31
 8000820:	fa21 f202 	lsr.w	r2, r1, r2
 8000824:	07d2      	lsls	r2, r2, #31
 8000826:	d548      	bpl.n	80008ba <HAL_RCC_OscConfig+0x2e2>
 8000828:	6922      	ldr	r2, [r4, #16]
 800082a:	2a01      	cmp	r2, #1
 800082c:	d045      	beq.n	80008ba <HAL_RCC_OscConfig+0x2e2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
      {
        return HAL_ERROR;
 800082e:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000830:	b002      	add	sp, #8
 8000832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000836:	684a      	ldr	r2, [r1, #4]
 8000838:	03d6      	lsls	r6, r2, #15
 800083a:	f57f aee1 	bpl.w	8000600 <HAL_RCC_OscConfig+0x28>
 800083e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000842:	fa92 f1a2 	rbit	r1, r2
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000846:	4926      	ldr	r1, [pc, #152]	; (80008e0 <HAL_RCC_OscConfig+0x308>)
 8000848:	6809      	ldr	r1, [r1, #0]
 800084a:	fa92 f2a2 	rbit	r2, r2
 800084e:	fab2 f282 	clz	r2, r2
 8000852:	f002 021f 	and.w	r2, r2, #31
 8000856:	fa21 f202 	lsr.w	r2, r1, r2
 800085a:	07d5      	lsls	r5, r2, #31
 800085c:	f57f af29 	bpl.w	80006b2 <HAL_RCC_OscConfig+0xda>
 8000860:	6862      	ldr	r2, [r4, #4]
 8000862:	2a00      	cmp	r2, #0
 8000864:	f47f af25 	bne.w	80006b2 <HAL_RCC_OscConfig+0xda>
 8000868:	e7e1      	b.n	800082e <HAL_RCC_OscConfig+0x256>
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 800086a:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 800086c:	b002      	add	sp, #8
 800086e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000872:	2301      	movs	r3, #1
 8000874:	fa93 f3a3 	rbit	r3, r3
      HAL_Delay(1);
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000878:	fab3 f383 	clz	r3, r3
 800087c:	4919      	ldr	r1, [pc, #100]	; (80008e4 <HAL_RCC_OscConfig+0x30c>)
 800087e:	2702      	movs	r7, #2
 8000880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000884:	f7ff fd98 	bl	80003b8 <HAL_GetTick>
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000888:	4d15      	ldr	r5, [pc, #84]	; (80008e0 <HAL_RCC_OscConfig+0x308>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800088a:	4606      	mov	r6, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800088c:	e004      	b.n	8000898 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800088e:	f7ff fd93 	bl	80003b8 <HAL_GetTick>
 8000892:	1b80      	subs	r0, r0, r6
 8000894:	2802      	cmp	r0, #2
 8000896:	d8e8      	bhi.n	800086a <HAL_RCC_OscConfig+0x292>
 8000898:	fa97 f3a7 	rbit	r3, r7
 800089c:	fa97 f3a7 	rbit	r3, r7
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008a0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80008a2:	fa97 f3a7 	rbit	r3, r7
 80008a6:	fab3 f383 	clz	r3, r3
 80008aa:	f003 031f 	and.w	r3, r3, #31
 80008ae:	fa22 f303 	lsr.w	r3, r2, r3
 80008b2:	07db      	lsls	r3, r3, #31
 80008b4:	d4eb      	bmi.n	800088e <HAL_RCC_OscConfig+0x2b6>
 80008b6:	6823      	ldr	r3, [r4, #0]
 80008b8:	e742      	b.n	8000740 <HAL_RCC_OscConfig+0x168>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ba:	4d09      	ldr	r5, [pc, #36]	; (80008e0 <HAL_RCC_OscConfig+0x308>)
 80008bc:	22f8      	movs	r2, #248	; 0xf8
 80008be:	6829      	ldr	r1, [r5, #0]
 80008c0:	fa92 f2a2 	rbit	r2, r2
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	6960      	ldr	r0, [r4, #20]
 80008ca:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 80008ce:	fa00 f202 	lsl.w	r2, r0, r2
 80008d2:	430a      	orrs	r2, r1
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008d4:	0719      	lsls	r1, r3, #28
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008d6:	602a      	str	r2, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008d8:	f57f af32 	bpl.w	8000740 <HAL_RCC_OscConfig+0x168>
 80008dc:	e767      	b.n	80007ae <HAL_RCC_OscConfig+0x1d6>
 80008de:	bf00      	nop
 80008e0:	40021000 	.word	0x40021000
 80008e4:	42420480 	.word	0x42420480
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80008e8:	4aaf      	ldr	r2, [pc, #700]	; (8000ba8 <HAL_RCC_OscConfig+0x5d0>)
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80008ea:	4bb0      	ldr	r3, [pc, #704]	; (8000bac <HAL_RCC_OscConfig+0x5d4>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80008ec:	69d1      	ldr	r1, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80008ee:	461d      	mov	r5, r3
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80008f0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80008f4:	61d1      	str	r1, [r2, #28]
 80008f6:	69d2      	ldr	r2, [r2, #28]
 80008f8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80008fc:	9201      	str	r2, [sp, #4]
 80008fe:	9a01      	ldr	r2, [sp, #4]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000906:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000908:	f7ff fd56 	bl	80003b8 <HAL_GetTick>
 800090c:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800090e:	e004      	b.n	800091a <HAL_RCC_OscConfig+0x342>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000910:	f7ff fd52 	bl	80003b8 <HAL_GetTick>
 8000914:	1b80      	subs	r0, r0, r6
 8000916:	2864      	cmp	r0, #100	; 0x64
 8000918:	d8a7      	bhi.n	800086a <HAL_RCC_OscConfig+0x292>
    SET_BIT(PWR->CR, PWR_CR_DBP);

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800091a:	682b      	ldr	r3, [r5, #0]
 800091c:	05d8      	lsls	r0, r3, #23
 800091e:	d5f7      	bpl.n	8000910 <HAL_RCC_OscConfig+0x338>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8000920:	4ba1      	ldr	r3, [pc, #644]	; (8000ba8 <HAL_RCC_OscConfig+0x5d0>)
 8000922:	f04f 0802 	mov.w	r8, #2
 8000926:	6a1a      	ldr	r2, [r3, #32]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000928:	461d      	mov	r5, r3
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 800092a:	f022 0201 	bic.w	r2, r2, #1
 800092e:	621a      	str	r2, [r3, #32]
 8000930:	6a1a      	ldr	r2, [r3, #32]
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000932:	f241 3788 	movw	r7, #5000	; 0x1388
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8000936:	f022 0204 	bic.w	r2, r2, #4
 800093a:	621a      	str	r2, [r3, #32]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800093c:	f7ff fd3c 	bl	80003b8 <HAL_GetTick>
 8000940:	4606      	mov	r6, r0
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000942:	e010      	b.n	8000966 <HAL_RCC_OscConfig+0x38e>
 8000944:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000946:	fa98 f3a8 	rbit	r3, r8
 800094a:	fab3 f383 	clz	r3, r3
 800094e:	f003 031f 	and.w	r3, r3, #31
 8000952:	fa22 f303 	lsr.w	r3, r2, r3
 8000956:	07d9      	lsls	r1, r3, #31
 8000958:	f140 80af 	bpl.w	8000aba <HAL_RCC_OscConfig+0x4e2>
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800095c:	f7ff fd2c 	bl	80003b8 <HAL_GetTick>
 8000960:	1b80      	subs	r0, r0, r6
 8000962:	42b8      	cmp	r0, r7
 8000964:	d881      	bhi.n	800086a <HAL_RCC_OscConfig+0x292>
 8000966:	fa98 f3a8 	rbit	r3, r8
 800096a:	fa98 f3a8 	rbit	r3, r8
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800096e:	2b00      	cmp	r3, #0
 8000970:	d0e8      	beq.n	8000944 <HAL_RCC_OscConfig+0x36c>
 8000972:	6a2a      	ldr	r2, [r5, #32]
 8000974:	e7e7      	b.n	8000946 <HAL_RCC_OscConfig+0x36e>
 8000976:	2301      	movs	r3, #1
 8000978:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800097c:	fab3 f383 	clz	r3, r3
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000986:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800098a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800098c:	f7ff fd14 	bl	80003b8 <HAL_GetTick>
 8000990:	2702      	movs	r7, #2
 8000992:	4606      	mov	r6, r0
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000994:	4d84      	ldr	r5, [pc, #528]	; (8000ba8 <HAL_RCC_OscConfig+0x5d0>)
 8000996:	e005      	b.n	80009a4 <HAL_RCC_OscConfig+0x3cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000998:	f7ff fd0e 	bl	80003b8 <HAL_GetTick>
 800099c:	1b80      	subs	r0, r0, r6
 800099e:	2802      	cmp	r0, #2
 80009a0:	f63f af63 	bhi.w	800086a <HAL_RCC_OscConfig+0x292>
 80009a4:	fa97 f3a7 	rbit	r3, r7
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009a8:	682a      	ldr	r2, [r5, #0]
 80009aa:	fa97 f3a7 	rbit	r3, r7
 80009ae:	fab3 f383 	clz	r3, r3
 80009b2:	f003 031f 	and.w	r3, r3, #31
 80009b6:	fa22 f303 	lsr.w	r3, r2, r3
 80009ba:	07d8      	lsls	r0, r3, #31
 80009bc:	d4ec      	bmi.n	8000998 <HAL_RCC_OscConfig+0x3c0>
 80009be:	6823      	ldr	r3, [r4, #0]
 80009c0:	e6bc      	b.n	800073c <HAL_RCC_OscConfig+0x164>
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009c2:	680b      	ldr	r3, [r1, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009c4:	460d      	mov	r5, r1
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009ca:	600b      	str	r3, [r1, #0]
 80009cc:	680b      	ldr	r3, [r1, #0]
 80009ce:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 80009d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009d6:	600b      	str	r3, [r1, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009d8:	f7ff fcee 	bl	80003b8 <HAL_GetTick>
 80009dc:	4606      	mov	r6, r0
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009de:	e005      	b.n	80009ec <HAL_RCC_OscConfig+0x414>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009e0:	f7ff fcea 	bl	80003b8 <HAL_GetTick>
 80009e4:	1b80      	subs	r0, r0, r6
 80009e6:	2864      	cmp	r0, #100	; 0x64
 80009e8:	f63f af3f 	bhi.w	800086a <HAL_RCC_OscConfig+0x292>
 80009ec:	fa97 f3a7 	rbit	r3, r7
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009f0:	682a      	ldr	r2, [r5, #0]
 80009f2:	fa97 f3a7 	rbit	r3, r7
 80009f6:	fab3 f383 	clz	r3, r3
 80009fa:	f003 031f 	and.w	r3, r3, #31
 80009fe:	fa22 f303 	lsr.w	r3, r2, r3
 8000a02:	07db      	lsls	r3, r3, #31
 8000a04:	d4ec      	bmi.n	80009e0 <HAL_RCC_OscConfig+0x408>
 8000a06:	e653      	b.n	80006b0 <HAL_RCC_OscConfig+0xd8>
 8000a08:	fa93 f3a3 	rbit	r3, r3
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a0c:	fab3 f383 	clz	r3, r3
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000a16:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a1e:	f7ff fccb 	bl	80003b8 <HAL_GetTick>
 8000a22:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000a26:	4606      	mov	r6, r0
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a28:	e005      	b.n	8000a36 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a2a:	f7ff fcc5 	bl	80003b8 <HAL_GetTick>
 8000a2e:	1b80      	subs	r0, r0, r6
 8000a30:	2802      	cmp	r0, #2
 8000a32:	f63f af1a 	bhi.w	800086a <HAL_RCC_OscConfig+0x292>
 8000a36:	fa97 f3a7 	rbit	r3, r7
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a3a:	495b      	ldr	r1, [pc, #364]	; (8000ba8 <HAL_RCC_OscConfig+0x5d0>)
 8000a3c:	682a      	ldr	r2, [r5, #0]
 8000a3e:	fa97 f3a7 	rbit	r3, r7
 8000a42:	fab3 f383 	clz	r3, r3
 8000a46:	f003 031f 	and.w	r3, r3, #31
 8000a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000a4e:	07d8      	lsls	r0, r3, #31
 8000a50:	d4eb      	bmi.n	8000a2a <HAL_RCC_OscConfig+0x452>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000a52:	6a20      	ldr	r0, [r4, #32]
 8000a54:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000a58:	f000 8096 	beq.w	8000b88 <HAL_RCC_OscConfig+0x5b0>
          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a5c:	4d52      	ldr	r5, [pc, #328]	; (8000ba8 <HAL_RCC_OscConfig+0x5d0>)
 8000a5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a60:	686b      	ldr	r3, [r5, #4]
 8000a62:	4302      	orrs	r2, r0
 8000a64:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	606b      	str	r3, [r5, #4]
 8000a6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a70:	fa93 f3a3 	rbit	r3, r3
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000a74:	fab3 f383 	clz	r3, r3
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000a7e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a86:	f7ff fc97 	bl	80003b8 <HAL_GetTick>
 8000a8a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000a8e:	4606      	mov	r6, r0
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a90:	e005      	b.n	8000a9e <HAL_RCC_OscConfig+0x4c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a92:	f7ff fc91 	bl	80003b8 <HAL_GetTick>
 8000a96:	1b80      	subs	r0, r0, r6
 8000a98:	2802      	cmp	r0, #2
 8000a9a:	f63f aee6 	bhi.w	800086a <HAL_RCC_OscConfig+0x292>
 8000a9e:	fa94 f3a4 	rbit	r3, r4
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000aa2:	682a      	ldr	r2, [r5, #0]
 8000aa4:	fa94 f3a4 	rbit	r3, r4
 8000aa8:	fab3 f383 	clz	r3, r3
 8000aac:	f003 031f 	and.w	r3, r3, #31
 8000ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab4:	07da      	lsls	r2, r3, #31
 8000ab6:	d5ec      	bpl.n	8000a92 <HAL_RCC_OscConfig+0x4ba>
 8000ab8:	e675      	b.n	80007a6 <HAL_RCC_OscConfig+0x1ce>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aba:	68e3      	ldr	r3, [r4, #12]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d05d      	beq.n	8000b7c <HAL_RCC_OscConfig+0x5a4>
 8000ac0:	b36b      	cbz	r3, 8000b1e <HAL_RCC_OscConfig+0x546>
 8000ac2:	2b05      	cmp	r3, #5
 8000ac4:	4b38      	ldr	r3, [pc, #224]	; (8000ba8 <HAL_RCC_OscConfig+0x5d0>)
 8000ac6:	6a1a      	ldr	r2, [r3, #32]
 8000ac8:	d065      	beq.n	8000b96 <HAL_RCC_OscConfig+0x5be>
 8000aca:	f022 0201 	bic.w	r2, r2, #1
 8000ace:	621a      	str	r2, [r3, #32]
 8000ad0:	6a1a      	ldr	r2, [r3, #32]
 8000ad2:	f022 0204 	bic.w	r2, r2, #4
 8000ad6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ad8:	f7ff fc6e 	bl	80003b8 <HAL_GetTick>
 8000adc:	f04f 0802 	mov.w	r8, #2
 8000ae0:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ae2:	4d31      	ldr	r5, [pc, #196]	; (8000ba8 <HAL_RCC_OscConfig+0x5d0>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ae4:	f241 3688 	movw	r6, #5000	; 0x1388
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ae8:	e011      	b.n	8000b0e <HAL_RCC_OscConfig+0x536>
 8000aea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000aec:	fa98 f3a8 	rbit	r3, r8
 8000af0:	fab3 f383 	clz	r3, r3
 8000af4:	f003 031f 	and.w	r3, r3, #31
 8000af8:	fa22 f303 	lsr.w	r3, r2, r3
 8000afc:	07da      	lsls	r2, r3, #31
 8000afe:	f53f ae22 	bmi.w	8000746 <HAL_RCC_OscConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b02:	f7ff fc59 	bl	80003b8 <HAL_GetTick>
 8000b06:	1bc0      	subs	r0, r0, r7
 8000b08:	42b0      	cmp	r0, r6
 8000b0a:	f63f aeae 	bhi.w	800086a <HAL_RCC_OscConfig+0x292>
 8000b0e:	fa98 f3a8 	rbit	r3, r8
 8000b12:	fa98 f3a8 	rbit	r3, r8
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d0e7      	beq.n	8000aea <HAL_RCC_OscConfig+0x512>
 8000b1a:	6a2a      	ldr	r2, [r5, #32]
 8000b1c:	e7e6      	b.n	8000aec <HAL_RCC_OscConfig+0x514>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b22:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000b26:	6a1a      	ldr	r2, [r3, #32]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b28:	461d      	mov	r5, r3
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b2a:	f022 0201 	bic.w	r2, r2, #1
 8000b2e:	621a      	str	r2, [r3, #32]
 8000b30:	6a1a      	ldr	r2, [r3, #32]
 8000b32:	f04f 0802 	mov.w	r8, #2
 8000b36:	f022 0204 	bic.w	r2, r2, #4
 8000b3a:	621a      	str	r2, [r3, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b3c:	f7ff fc3c 	bl	80003b8 <HAL_GetTick>
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b40:	f241 3788 	movw	r7, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b44:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b46:	e011      	b.n	8000b6c <HAL_RCC_OscConfig+0x594>
 8000b48:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000b4a:	fa98 f3a8 	rbit	r3, r8
 8000b4e:	fab3 f383 	clz	r3, r3
 8000b52:	f003 031f 	and.w	r3, r3, #31
 8000b56:	fa22 f303 	lsr.w	r3, r2, r3
 8000b5a:	07db      	lsls	r3, r3, #31
 8000b5c:	f57f adf3 	bpl.w	8000746 <HAL_RCC_OscConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b60:	f7ff fc2a 	bl	80003b8 <HAL_GetTick>
 8000b64:	1b80      	subs	r0, r0, r6
 8000b66:	42b8      	cmp	r0, r7
 8000b68:	f63f ae7f 	bhi.w	800086a <HAL_RCC_OscConfig+0x292>
 8000b6c:	fa98 f3a8 	rbit	r3, r8
 8000b70:	fa98 f3a8 	rbit	r3, r8
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d0e7      	beq.n	8000b48 <HAL_RCC_OscConfig+0x570>
 8000b78:	6a2a      	ldr	r2, [r5, #32]
 8000b7a:	e7e6      	b.n	8000b4a <HAL_RCC_OscConfig+0x572>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <HAL_RCC_OscConfig+0x5d0>)
 8000b7e:	6a13      	ldr	r3, [r2, #32]
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6213      	str	r3, [r2, #32]
 8000b86:	e7a7      	b.n	8000ad8 <HAL_RCC_OscConfig+0x500>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b88:	684a      	ldr	r2, [r1, #4]
 8000b8a:	68a3      	ldr	r3, [r4, #8]
 8000b8c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000b90:	4313      	orrs	r3, r2
 8000b92:	604b      	str	r3, [r1, #4]
 8000b94:	e762      	b.n	8000a5c <HAL_RCC_OscConfig+0x484>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b96:	f042 0204 	orr.w	r2, r2, #4
 8000b9a:	621a      	str	r2, [r3, #32]
 8000b9c:	6a1a      	ldr	r2, [r3, #32]
 8000b9e:	f042 0201 	orr.w	r2, r2, #1
 8000ba2:	621a      	str	r2, [r3, #32]
 8000ba4:	e798      	b.n	8000ad8 <HAL_RCC_OscConfig+0x500>
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40007000 	.word	0x40007000

08000bb0 <HAL_RCC_ClockConfig>:
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bb0:	4a76      	ldr	r2, [pc, #472]	; (8000d8c <HAL_RCC_ClockConfig+0x1dc>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bb6:	6813      	ldr	r3, [r2, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000bb8:	460c      	mov	r4, r1
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000bc0:	4605      	mov	r5, r0
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bc2:	d20c      	bcs.n	8000bde <HAL_RCC_ClockConfig+0x2e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bc4:	6813      	ldr	r3, [r2, #0]
 8000bc6:	f023 0307 	bic.w	r3, r3, #7
 8000bca:	430b      	orrs	r3, r1
 8000bcc:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000bce:	6813      	ldr	r3, [r2, #0]
 8000bd0:	f003 0307 	and.w	r3, r3, #7
 8000bd4:	4299      	cmp	r1, r3
 8000bd6:	d065      	beq.n	8000ca4 <HAL_RCC_ClockConfig+0xf4>
    {
      return HAL_ERROR;
 8000bd8:	2001      	movs	r0, #1
 8000bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bde:	6803      	ldr	r3, [r0, #0]
 8000be0:	079e      	lsls	r6, r3, #30
 8000be2:	d506      	bpl.n	8000bf2 <HAL_RCC_ClockConfig+0x42>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000be4:	486a      	ldr	r0, [pc, #424]	; (8000d90 <HAL_RCC_ClockConfig+0x1e0>)
 8000be6:	68aa      	ldr	r2, [r5, #8]
 8000be8:	6841      	ldr	r1, [r0, #4]
 8000bea:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	6042      	str	r2, [r0, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bf2:	07d8      	lsls	r0, r3, #31
 8000bf4:	d531      	bpl.n	8000c5a <HAL_RCC_ClockConfig+0xaa>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bf6:	686a      	ldr	r2, [r5, #4]
 8000bf8:	2a01      	cmp	r2, #1
 8000bfa:	f000 80b2 	beq.w	8000d62 <HAL_RCC_ClockConfig+0x1b2>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bfe:	2a02      	cmp	r2, #2
 8000c00:	bf0c      	ite	eq
 8000c02:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000c06:	2302      	movne	r3, #2
 8000c08:	fa93 f1a3 	rbit	r1, r3
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c0c:	4960      	ldr	r1, [pc, #384]	; (8000d90 <HAL_RCC_ClockConfig+0x1e0>)
 8000c0e:	6809      	ldr	r1, [r1, #0]
 8000c10:	fa93 f3a3 	rbit	r3, r3
 8000c14:	fab3 f383 	clz	r3, r3
 8000c18:	f003 031f 	and.w	r3, r3, #31
 8000c1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000c20:	07d9      	lsls	r1, r3, #31
 8000c22:	d5d9      	bpl.n	8000bd8 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c24:	4e5a      	ldr	r6, [pc, #360]	; (8000d90 <HAL_RCC_ClockConfig+0x1e0>)
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c26:	f241 3888 	movw	r8, #5000	; 0x1388
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c2a:	6873      	ldr	r3, [r6, #4]
 8000c2c:	f023 0303 	bic.w	r3, r3, #3
 8000c30:	431a      	orrs	r2, r3
 8000c32:	6072      	str	r2, [r6, #4]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c34:	f7ff fbc0 	bl	80003b8 <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c38:	686b      	ldr	r3, [r5, #4]
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c3a:	4607      	mov	r7, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d074      	beq.n	8000d2a <HAL_RCC_ClockConfig+0x17a>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d106      	bne.n	8000c52 <HAL_RCC_ClockConfig+0xa2>
 8000c44:	e07c      	b.n	8000d40 <HAL_RCC_ClockConfig+0x190>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c46:	f7ff fbb7 	bl	80003b8 <HAL_GetTick>
 8000c4a:	1bc0      	subs	r0, r0, r7
 8000c4c:	4540      	cmp	r0, r8
 8000c4e:	f200 808b 	bhi.w	8000d68 <HAL_RCC_ClockConfig+0x1b8>
          }
        }
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c52:	6873      	ldr	r3, [r6, #4]
 8000c54:	f013 0f0c 	tst.w	r3, #12
 8000c58:	d1f5      	bne.n	8000c46 <HAL_RCC_ClockConfig+0x96>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c5a:	4a4c      	ldr	r2, [pc, #304]	; (8000d8c <HAL_RCC_ClockConfig+0x1dc>)
 8000c5c:	6813      	ldr	r3, [r2, #0]
 8000c5e:	f023 0307 	bic.w	r3, r3, #7
 8000c62:	4323      	orrs	r3, r4
 8000c64:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c66:	6813      	ldr	r3, [r2, #0]
 8000c68:	f003 0307 	and.w	r3, r3, #7
 8000c6c:	429c      	cmp	r4, r3
 8000c6e:	d1b3      	bne.n	8000bd8 <HAL_RCC_ClockConfig+0x28>
 8000c70:	682b      	ldr	r3, [r5, #0]
    }
  }
#endif /* FLASH_ACR_LATENCY */
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c72:	075a      	lsls	r2, r3, #29
 8000c74:	d506      	bpl.n	8000c84 <HAL_RCC_ClockConfig+0xd4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c76:	4846      	ldr	r0, [pc, #280]	; (8000d90 <HAL_RCC_ClockConfig+0x1e0>)
 8000c78:	68ea      	ldr	r2, [r5, #12]
 8000c7a:	6841      	ldr	r1, [r0, #4]
 8000c7c:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8000c80:	430a      	orrs	r2, r1
 8000c82:	6042      	str	r2, [r0, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c84:	071b      	lsls	r3, r3, #28
 8000c86:	d507      	bpl.n	8000c98 <HAL_RCC_ClockConfig+0xe8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000c88:	4a41      	ldr	r2, [pc, #260]	; (8000d90 <HAL_RCC_ClockConfig+0x1e0>)
 8000c8a:	6929      	ldr	r1, [r5, #16]
 8000c8c:	6853      	ldr	r3, [r2, #4]
 8000c8e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000c92:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c96:	6053      	str	r3, [r2, #4]
  }
 
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c98:	200f      	movs	r0, #15
 8000c9a:	f7ff fb5f 	bl	800035c <HAL_InitTick>
  
  return HAL_OK;
 8000c9e:	2000      	movs	r0, #0
}
 8000ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
    }
    
#endif /* FLASH_ACR_LATENCY */
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ca4:	6803      	ldr	r3, [r0, #0]
 8000ca6:	0799      	lsls	r1, r3, #30
 8000ca8:	d506      	bpl.n	8000cb8 <HAL_RCC_ClockConfig+0x108>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000caa:	4839      	ldr	r0, [pc, #228]	; (8000d90 <HAL_RCC_ClockConfig+0x1e0>)
 8000cac:	68aa      	ldr	r2, [r5, #8]
 8000cae:	6841      	ldr	r1, [r0, #4]
 8000cb0:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	6042      	str	r2, [r0, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cb8:	07da      	lsls	r2, r3, #31
 8000cba:	d5da      	bpl.n	8000c72 <HAL_RCC_ClockConfig+0xc2>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cbc:	686a      	ldr	r2, [r5, #4]
 8000cbe:	2a01      	cmp	r2, #1
 8000cc0:	d060      	beq.n	8000d84 <HAL_RCC_ClockConfig+0x1d4>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cc2:	2a02      	cmp	r2, #2
 8000cc4:	bf0c      	ite	eq
 8000cc6:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000cca:	2302      	movne	r3, #2
 8000ccc:	fa93 f1a3 	rbit	r1, r3
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd0:	492f      	ldr	r1, [pc, #188]	; (8000d90 <HAL_RCC_ClockConfig+0x1e0>)
 8000cd2:	6809      	ldr	r1, [r1, #0]
 8000cd4:	fa93 f3a3 	rbit	r3, r3
 8000cd8:	fab3 f383 	clz	r3, r3
 8000cdc:	f003 031f 	and.w	r3, r3, #31
 8000ce0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ce4:	07df      	lsls	r7, r3, #31
 8000ce6:	f57f af77 	bpl.w	8000bd8 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cea:	4c29      	ldr	r4, [pc, #164]	; (8000d90 <HAL_RCC_ClockConfig+0x1e0>)
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cec:	f241 3788 	movw	r7, #5000	; 0x1388
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cf0:	6863      	ldr	r3, [r4, #4]
 8000cf2:	f023 0303 	bic.w	r3, r3, #3
 8000cf6:	431a      	orrs	r2, r3
 8000cf8:	6062      	str	r2, [r4, #4]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cfa:	f7ff fb5d 	bl	80003b8 <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cfe:	686b      	ldr	r3, [r5, #4]
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d00:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d027      	beq.n	8000d56 <HAL_RCC_ClockConfig+0x1a6>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d105      	bne.n	8000d16 <HAL_RCC_ClockConfig+0x166>
 8000d0a:	e035      	b.n	8000d78 <HAL_RCC_ClockConfig+0x1c8>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d0c:	f7ff fb54 	bl	80003b8 <HAL_GetTick>
 8000d10:	1b80      	subs	r0, r0, r6
 8000d12:	42b8      	cmp	r0, r7
 8000d14:	d828      	bhi.n	8000d68 <HAL_RCC_ClockConfig+0x1b8>
          }
        }
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d16:	6863      	ldr	r3, [r4, #4]
 8000d18:	f013 0f0c 	tst.w	r3, #12
 8000d1c:	d1f6      	bne.n	8000d0c <HAL_RCC_ClockConfig+0x15c>
 8000d1e:	e7a7      	b.n	8000c70 <HAL_RCC_ClockConfig+0xc0>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d20:	f7ff fb4a 	bl	80003b8 <HAL_GetTick>
 8000d24:	1bc0      	subs	r0, r0, r7
 8000d26:	4540      	cmp	r0, r8
 8000d28:	d81e      	bhi.n	8000d68 <HAL_RCC_ClockConfig+0x1b8>
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d2a:	6873      	ldr	r3, [r6, #4]
 8000d2c:	f003 030c 	and.w	r3, r3, #12
 8000d30:	2b04      	cmp	r3, #4
 8000d32:	d1f5      	bne.n	8000d20 <HAL_RCC_ClockConfig+0x170>
 8000d34:	e791      	b.n	8000c5a <HAL_RCC_ClockConfig+0xaa>
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d36:	f7ff fb3f 	bl	80003b8 <HAL_GetTick>
 8000d3a:	1bc0      	subs	r0, r0, r7
 8000d3c:	4540      	cmp	r0, r8
 8000d3e:	d813      	bhi.n	8000d68 <HAL_RCC_ClockConfig+0x1b8>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d40:	6873      	ldr	r3, [r6, #4]
 8000d42:	f003 030c 	and.w	r3, r3, #12
 8000d46:	2b08      	cmp	r3, #8
 8000d48:	d1f5      	bne.n	8000d36 <HAL_RCC_ClockConfig+0x186>
 8000d4a:	e786      	b.n	8000c5a <HAL_RCC_ClockConfig+0xaa>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d4c:	f7ff fb34 	bl	80003b8 <HAL_GetTick>
 8000d50:	1b80      	subs	r0, r0, r6
 8000d52:	42b8      	cmp	r0, r7
 8000d54:	d808      	bhi.n	8000d68 <HAL_RCC_ClockConfig+0x1b8>
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d56:	6863      	ldr	r3, [r4, #4]
 8000d58:	f003 030c 	and.w	r3, r3, #12
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	d1f5      	bne.n	8000d4c <HAL_RCC_ClockConfig+0x19c>
 8000d60:	e786      	b.n	8000c70 <HAL_RCC_ClockConfig+0xc0>
 8000d62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d66:	e74f      	b.n	8000c08 <HAL_RCC_ClockConfig+0x58>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8000d68:	2003      	movs	r0, #3
 8000d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d6e:	f7ff fb23 	bl	80003b8 <HAL_GetTick>
 8000d72:	1b80      	subs	r0, r0, r6
 8000d74:	42b8      	cmp	r0, r7
 8000d76:	d8f7      	bhi.n	8000d68 <HAL_RCC_ClockConfig+0x1b8>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d78:	6863      	ldr	r3, [r4, #4]
 8000d7a:	f003 030c 	and.w	r3, r3, #12
 8000d7e:	2b08      	cmp	r3, #8
 8000d80:	d1f5      	bne.n	8000d6e <HAL_RCC_ClockConfig+0x1be>
 8000d82:	e775      	b.n	8000c70 <HAL_RCC_ClockConfig+0xc0>
 8000d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d88:	e7a0      	b.n	8000ccc <HAL_RCC_ClockConfig+0x11c>
 8000d8a:	bf00      	nop
 8000d8c:	40022000 	.word	0x40022000
 8000d90:	40021000 	.word	0x40021000

08000d94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d94:	b430      	push	{r4, r5}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d96:	4d20      	ldr	r5, [pc, #128]	; (8000e18 <HAL_RCC_GetSysClockFreq+0x84>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d98:	b086      	sub	sp, #24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d9a:	6869      	ldr	r1, [r5, #4]
 8000d9c:	68aa      	ldr	r2, [r5, #8]
 8000d9e:	68eb      	ldr	r3, [r5, #12]
 8000da0:	6828      	ldr	r0, [r5, #0]
 8000da2:	ac02      	add	r4, sp, #8
 8000da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8000da6:	8a2d      	ldrh	r5, [r5, #16]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000da8:	491c      	ldr	r1, [pc, #112]	; (8000e1c <HAL_RCC_GetSysClockFreq+0x88>)
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8000daa:	f8ad 5004 	strh.w	r5, [sp, #4]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000dae:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000db0:	f003 020c 	and.w	r2, r3, #12
 8000db4:	2a08      	cmp	r2, #8
 8000db6:	d114      	bne.n	8000de2 <HAL_RCC_GetSysClockFreq+0x4e>
 8000db8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000dbc:	fa92 f2a2 	rbit	r2, r2
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8000dc0:	fab2 f082 	clz	r0, r2
 8000dc4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000dc8:	40c2      	lsrs	r2, r0
 8000dca:	a806      	add	r0, sp, #24
 8000dcc:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000dce:	03db      	lsls	r3, r3, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8000dd0:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000dd4:	d409      	bmi.n	8000dea <HAL_RCC_GetSysClockFreq+0x56>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000dd6:	4812      	ldr	r0, [pc, #72]	; (8000e20 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000dd8:	fb00 f002 	mul.w	r0, r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ddc:	b006      	add	sp, #24
 8000dde:	bc30      	pop	{r4, r5}
 8000de0:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000de2:	4810      	ldr	r0, [pc, #64]	; (8000e24 <HAL_RCC_GetSysClockFreq+0x90>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000de4:	b006      	add	sp, #24
 8000de6:	bc30      	pop	{r4, r5}
 8000de8:	4770      	bx	lr
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8000dea:	6849      	ldr	r1, [r1, #4]
 8000dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df0:	fa93 f3a3 	rbit	r3, r3
 8000df4:	fab3 f083 	clz	r0, r3
 8000df8:	f401 3300 	and.w	r3, r1, #131072	; 0x20000
 8000dfc:	40c3      	lsrs	r3, r0
 8000dfe:	a906      	add	r1, sp, #24
 8000e00:	440b      	add	r3, r1
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000e02:	f813 0c14 	ldrb.w	r0, [r3, #-20]
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <HAL_RCC_GetSysClockFreq+0x90>)
 8000e08:	fbb3 f0f0 	udiv	r0, r3, r0
 8000e0c:	fb02 f000 	mul.w	r0, r2, r0
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e10:	b006      	add	sp, #24
 8000e12:	bc30      	pop	{r4, r5}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	08006100 	.word	0x08006100
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	003d0900 	.word	0x003d0900
 8000e24:	007a1200 	.word	0x007a1200

08000e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e28:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000e2a:	f7ff ffb3 	bl	8000d94 <HAL_RCC_GetSysClockFreq>
 8000e2e:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <HAL_RCC_GetHCLKFreq+0x2c>)
 8000e30:	23f0      	movs	r3, #240	; 0xf0
 8000e32:	6852      	ldr	r2, [r2, #4]
 8000e34:	fa93 f3a3 	rbit	r3, r3
 8000e38:	fab3 f383 	clz	r3, r3
 8000e3c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000e40:	4905      	ldr	r1, [pc, #20]	; (8000e58 <HAL_RCC_GetHCLKFreq+0x30>)
 8000e42:	fa22 f303 	lsr.w	r3, r2, r3
 8000e46:	440b      	add	r3, r1
 8000e48:	7d1a      	ldrb	r2, [r3, #20]
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <HAL_RCC_GetHCLKFreq+0x34>)
 8000e4c:	40d0      	lsrs	r0, r2
 8000e4e:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8000e50:	bd08      	pop	{r3, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000
 8000e58:	08006100 	.word	0x08006100
 8000e5c:	20000000 	.word	0x20000000

08000e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e60:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8000e62:	f7ff ffe1 	bl	8000e28 <HAL_RCC_GetHCLKFreq>
 8000e66:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000e68:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e6c:	6852      	ldr	r2, [r2, #4]
 8000e6e:	fa93 f3a3 	rbit	r3, r3
 8000e72:	fab3 f383 	clz	r3, r3
 8000e76:	f402 5260 	and.w	r2, r2, #14336	; 0x3800
 8000e7a:	4904      	ldr	r1, [pc, #16]	; (8000e8c <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e80:	440b      	add	r3, r1
 8000e82:	7d1b      	ldrb	r3, [r3, #20]
} 
 8000e84:	40d8      	lsrs	r0, r3
 8000e86:	bd08      	pop	{r3, pc}
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	08006100 	.word	0x08006100

08000e90 <ADC1_2_IRQHandler>:
  *         preserving the system state for examination by a debugger.
  * @param  None
  * @retval None  
  */
static void Default_Handler(void) 
{
 8000e90:	e7fe      	b.n	8000e90 <ADC1_2_IRQHandler>
 8000e92:	bf00      	nop

08000e94 <Default_Reset_Handler>:
  *         supplied main() routine is called. 
  * @param  None
  * @retval None
  */
void Default_Reset_Handler(void)
{
 8000e94:	b508      	push	{r3, lr}
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <zero_loop+0x16>)
 8000e98:	4b10      	ldr	r3, [pc, #64]	; (8000edc <zero_loop+0x1a>)
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d20d      	bcs.n	8000eba <Default_Reset_Handler+0x26>
 8000e9e:	43d0      	mvns	r0, r2
 8000ea0:	490f      	ldr	r1, [pc, #60]	; (8000ee0 <zero_loop+0x1e>)
 8000ea2:	4418      	add	r0, r3
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	f020 0003 	bic.w	r0, r0, #3
 8000eaa:	3004      	adds	r0, #4
 8000eac:	4408      	add	r0, r1
  {
    *(pulDest++) = *(pulSrc++);
 8000eae:	f853 1b04 	ldr.w	r1, [r3], #4
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 8000eb2:	4283      	cmp	r3, r0
  {
    *(pulDest++) = *(pulSrc++);
 8000eb4:	f842 1b04 	str.w	r1, [r2], #4
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 8000eb8:	d1f9      	bne.n	8000eae <Default_Reset_Handler+0x1a>
    *(pulDest++) = *(pulSrc++);
  }
  
  /* Zero fill the bss segment.  This is done with inline assembly since this
     will clear the value of pulDest if it is not kept in a register. */
  __asm("  ldr     r0, =_sbss\n"
 8000eba:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <zero_loop+0x22>)
 8000ebc:	490a      	ldr	r1, [pc, #40]	; (8000ee8 <zero_loop+0x26>)
 8000ebe:	f04f 0200 	mov.w	r2, #0

08000ec2 <zero_loop>:
 8000ec2:	4288      	cmp	r0, r1
 8000ec4:	bfb8      	it	lt
 8000ec6:	f840 2b04 	strlt.w	r2, [r0], #4
 8000eca:	dbfa      	blt.n	8000ec2 <zero_loop>
        "    it      lt\n"
        "    strlt   r2, [r0], #4\n"
        "    blt     zero_loop");
  
  /* Setup the microcontroller system. */
  SystemInit();
 8000ecc:	f7ff fb5c 	bl	8000588 <SystemInit>
    
  /* Call the application's entry point.*/
  main();
}
 8000ed0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  /* Setup the microcontroller system. */
  SystemInit();
    
  /* Call the application's entry point.*/
  main();
 8000ed4:	f000 bf7a 	b.w	8001dcc <main>
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	200009a4 	.word	0x200009a4
 8000ee0:	080061e0 	.word	0x080061e0
 8000ee4:	200009a4 	.word	0x200009a4
 8000ee8:	20002808 	.word	0x20002808

08000eec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000eec:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eee:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	4602      	mov	r2, r0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ef6:	2b01      	cmp	r3, #1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0;
 8000ef8:	f04f 0000 	mov.w	r0, #0
 8000efc:	9001      	str	r0, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000efe:	f000 808a 	beq.w	8001016 <HAL_ADC_ConfigChannel+0x12a>
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000f02:	684b      	ldr	r3, [r1, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f04:	2001      	movs	r0, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000f06:	2b06      	cmp	r3, #6
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f08:	f882 0024 	strb.w	r0, [r2, #36]	; 0x24
 8000f0c:	f44f 7578 	mov.w	r5, #992	; 0x3e0
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f10:	6810      	ldr	r0, [r2, #0]
  __HAL_LOCK(hadc);
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000f12:	d83f      	bhi.n	8000f94 <HAL_ADC_ConfigChannel+0xa8>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f14:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8000f16:	fa95 f6a5 	rbit	r6, r5
 8000f1a:	fab6 f686 	clz	r6, r6
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	680c      	ldr	r4, [r1, #0]
 8000f22:	fa95 f5a5 	rbit	r5, r5
 8000f26:	fab5 f585 	clz	r5, r5
 8000f2a:	fb03 f606 	mul.w	r6, r3, r6
 8000f2e:	fb03 f305 	mul.w	r3, r3, r5
 8000f32:	251f      	movs	r5, #31
 8000f34:	fa05 f606 	lsl.w	r6, r5, r6
 8000f38:	fa04 f303 	lsl.w	r3, r4, r3
 8000f3c:	ea27 0706 	bic.w	r7, r7, r6
 8000f40:	433b      	orrs	r3, r7
 8000f42:	6343      	str	r3, [r0, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f44:	2c09      	cmp	r4, #9
 8000f46:	d941      	bls.n	8000fcc <HAL_ADC_ConfigChannel+0xe0>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f48:	68c7      	ldr	r7, [r0, #12]
 8000f4a:	2538      	movs	r5, #56	; 0x38
 8000f4c:	fa95 f6a5 	rbit	r6, r5
 8000f50:	fab6 f686 	clz	r6, r6
 8000f54:	f1a4 030a 	sub.w	r3, r4, #10
 8000f58:	fa95 f5a5 	rbit	r5, r5
 8000f5c:	fab5 f585 	clz	r5, r5
 8000f60:	fb03 f606 	mul.w	r6, r3, r6
 8000f64:	fb03 f305 	mul.w	r3, r3, r5
 8000f68:	6889      	ldr	r1, [r1, #8]
 8000f6a:	2507      	movs	r5, #7
 8000f6c:	fa05 f606 	lsl.w	r6, r5, r6
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	ea27 0706 	bic.w	r7, r7, r6
 8000f78:	433b      	orrs	r3, r7
 8000f7a:	60c3      	str	r3, [r0, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f7c:	f1a4 0310 	sub.w	r3, r4, #16
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d93f      	bls.n	8001004 <HAL_ADC_ConfigChannel+0x118>
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f84:	2300      	movs	r3, #0
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
 8000f86:	4618      	mov	r0, r3
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f88:	2100      	movs	r1, #0
 8000f8a:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000f8e:	b002      	add	sp, #8
 8000f90:	bcf0      	pop	{r4, r5, r6, r7}
 8000f92:	4770      	bx	lr
    MODIFY_REG(hadc->Instance->SQR3                        ,
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000f94:	2b0c      	cmp	r3, #12
 8000f96:	d842      	bhi.n	800101e <HAL_ADC_ConfigChannel+0x132>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f98:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8000f9a:	fa95 f6a5 	rbit	r6, r5
 8000f9e:	fab6 f686 	clz	r6, r6
 8000fa2:	3b07      	subs	r3, #7
 8000fa4:	680c      	ldr	r4, [r1, #0]
 8000fa6:	fa95 f5a5 	rbit	r5, r5
 8000faa:	fab5 f585 	clz	r5, r5
 8000fae:	fb03 f606 	mul.w	r6, r3, r6
 8000fb2:	fb03 f305 	mul.w	r3, r3, r5
 8000fb6:	251f      	movs	r5, #31
 8000fb8:	fa05 f606 	lsl.w	r6, r5, r6
 8000fbc:	fa04 f303 	lsl.w	r3, r4, r3
 8000fc0:	ea27 0706 	bic.w	r7, r7, r6
 8000fc4:	433b      	orrs	r3, r7
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fc6:	2c09      	cmp	r4, #9
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000fc8:	6303      	str	r3, [r0, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fca:	d8bd      	bhi.n	8000f48 <HAL_ADC_ConfigChannel+0x5c>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fcc:	6906      	ldr	r6, [r0, #16]
 8000fce:	2338      	movs	r3, #56	; 0x38
 8000fd0:	fa93 f5a3 	rbit	r5, r3
 8000fd4:	fab5 f585 	clz	r5, r5
 8000fd8:	fa93 f3a3 	rbit	r3, r3
 8000fdc:	fab3 f383 	clz	r3, r3
 8000fe0:	fb04 f505 	mul.w	r5, r4, r5
 8000fe4:	fb04 f303 	mul.w	r3, r4, r3
 8000fe8:	6889      	ldr	r1, [r1, #8]
 8000fea:	2707      	movs	r7, #7
 8000fec:	fa07 f505 	lsl.w	r5, r7, r5
 8000ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff4:	ea26 0505 	bic.w	r5, r6, r5
 8000ff8:	432b      	orrs	r3, r5
 8000ffa:	6103      	str	r3, [r0, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ffc:	f1a4 0310 	sub.w	r3, r4, #16
 8001000:	2b01      	cmp	r3, #1
 8001002:	d8bf      	bhi.n	8000f84 <HAL_ADC_ConfigChannel+0x98>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001004:	4b21      	ldr	r3, [pc, #132]	; (800108c <HAL_ADC_ConfigChannel+0x1a0>)
 8001006:	4298      	cmp	r0, r3
 8001008:	d022      	beq.n	8001050 <HAL_ADC_ConfigChannel+0x164>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800100a:	6a91      	ldr	r1, [r2, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800100c:	2301      	movs	r3, #1
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800100e:	f041 0120 	orr.w	r1, r1, #32
 8001012:	6291      	str	r1, [r2, #40]	; 0x28
 8001014:	e7b7      	b.n	8000f86 <HAL_ADC_ConfigChannel+0x9a>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001016:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 8001018:	b002      	add	sp, #8
 800101a:	bcf0      	pop	{r4, r5, r6, r7}
 800101c:	4770      	bx	lr
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800101e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8001020:	fa95 f6a5 	rbit	r6, r5
 8001024:	fab6 f686 	clz	r6, r6
 8001028:	3b0d      	subs	r3, #13
 800102a:	680c      	ldr	r4, [r1, #0]
 800102c:	fa95 f5a5 	rbit	r5, r5
 8001030:	fab5 f585 	clz	r5, r5
 8001034:	fb03 f606 	mul.w	r6, r3, r6
 8001038:	fb03 f305 	mul.w	r3, r3, r5
 800103c:	251f      	movs	r5, #31
 800103e:	fa05 f606 	lsl.w	r6, r5, r6
 8001042:	fa04 f303 	lsl.w	r3, r4, r3
 8001046:	ea27 0706 	bic.w	r7, r7, r6
 800104a:	433b      	orrs	r3, r7
 800104c:	62c3      	str	r3, [r0, #44]	; 0x2c
 800104e:	e779      	b.n	8000f44 <HAL_ADC_ConfigChannel+0x58>
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001050:	6883      	ldr	r3, [r0, #8]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	d496      	bmi.n	8000f84 <HAL_ADC_ConfigChannel+0x98>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001056:	6883      	ldr	r3, [r0, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001058:	2c10      	cmp	r4, #16
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800105a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800105e:	6083      	str	r3, [r0, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001060:	d190      	bne.n	8000f84 <HAL_ADC_ConfigChannel+0x98>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_ADC_ConfigChannel+0x1a4>)
 8001064:	490b      	ldr	r1, [pc, #44]	; (8001094 <HAL_ADC_ConfigChannel+0x1a8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	fba1 1303 	umull	r1, r3, r1, r3
 800106c:	0c9b      	lsrs	r3, r3, #18
 800106e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8001076:	9b01      	ldr	r3, [sp, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d083      	beq.n	8000f84 <HAL_ADC_ConfigChannel+0x98>
          {
            wait_loop_index--;
 800107c:	9b01      	ldr	r3, [sp, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	9301      	str	r3, [sp, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
          while(wait_loop_index != 0)
 8001082:	9b01      	ldr	r3, [sp, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f9      	bne.n	800107c <HAL_ADC_ConfigChannel+0x190>
 8001088:	e77c      	b.n	8000f84 <HAL_ADC_ConfigChannel+0x98>
 800108a:	bf00      	nop
 800108c:	40012400 	.word	0x40012400
 8001090:	20000000 	.word	0x20000000
 8001094:	431bde83 	.word	0x431bde83

08001098 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001098:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800109a:	6803      	ldr	r3, [r0, #0]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	07d2      	lsls	r2, r2, #31
 80010a0:	d401      	bmi.n	80010a6 <ADC_ConversionStop_Disable+0xe>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80010a2:	2000      	movs	r0, #0
 80010a4:	bd38      	pop	{r3, r4, r5, pc}
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	4604      	mov	r4, r0
 80010aa:	f022 0201 	bic.w	r2, r2, #1
 80010ae:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010b0:	f7ff f982 	bl	80003b8 <HAL_GetTick>
 80010b4:	4605      	mov	r5, r0
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010b6:	6823      	ldr	r3, [r4, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	07db      	lsls	r3, r3, #31
 80010bc:	d5f1      	bpl.n	80010a2 <ADC_ConversionStop_Disable+0xa>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010be:	f7ff f97b 	bl	80003b8 <HAL_GetTick>
 80010c2:	1b40      	subs	r0, r0, r5
 80010c4:	2802      	cmp	r0, #2
 80010c6:	d9f6      	bls.n	80010b6 <ADC_ConversionStop_Disable+0x1e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ca:	2001      	movs	r0, #1
    while(ADC_IS_ENABLE(hadc) != RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010cc:	f043 0310 	orr.w	r3, r3, #16
 80010d0:	62a3      	str	r3, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80010d4:	4303      	orrs	r3, r0
 80010d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80010d8:	bd38      	pop	{r3, r4, r5, pc}
 80010da:	bf00      	nop

080010dc <HAL_ADC_Init>:
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  uint32_t tmp_sqr1 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010dc:	2800      	cmp	r0, #0
 80010de:	d06f      	beq.n	80011c0 <HAL_ADC_Init+0xe4>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010e2:	b570      	push	{r4, r5, r6, lr}
 80010e4:	4604      	mov	r4, r0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d04a      	beq.n	8001180 <HAL_ADC_Init+0xa4>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010ea:	4620      	mov	r0, r4
 80010ec:	f7ff ffd4 	bl	8001098 <ADC_ConversionStop_Disable>
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010f2:	f013 0f10 	tst.w	r3, #16
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010f8:	d13d      	bne.n	8001176 <HAL_ADC_Init+0x9a>
 80010fa:	2800      	cmp	r0, #0
 80010fc:	d13b      	bne.n	8001176 <HAL_ADC_Init+0x9a>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001102:	f023 0302 	bic.w	r3, r3, #2
 8001106:	f043 0302 	orr.w	r3, r3, #2
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800110a:	68e5      	ldr	r5, [r4, #12]
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110c:	62a3      	str	r3, [r4, #40]	; 0x28
 800110e:	2202      	movs	r2, #2
 8001110:	fa92 f2a2 	rbit	r2, r2
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8001114:	fab2 f282 	clz	r2, r2
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8001118:	6866      	ldr	r6, [r4, #4]
 800111a:	69e3      	ldr	r3, [r4, #28]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800111c:	68a1      	ldr	r1, [r4, #8]
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800111e:	fa05 f202 	lsl.w	r2, r5, r2
 8001122:	4333      	orrs	r3, r6
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001124:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8001128:	ea43 0302 	orr.w	r3, r3, r2
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800112c:	d02e      	beq.n	800118c <HAL_ADC_Init+0xb0>
 800112e:	2901      	cmp	r1, #1
 8001130:	d051      	beq.n	80011d6 <HAL_ADC_Init+0xfa>
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001132:	6962      	ldr	r2, [r4, #20]
 8001134:	2a01      	cmp	r2, #1
 8001136:	d054      	beq.n	80011e2 <HAL_ADC_Init+0x106>
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001138:	6822      	ldr	r2, [r4, #0]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800113a:	4941      	ldr	r1, [pc, #260]	; (8001240 <HAL_ADC_Init+0x164>)
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800113c:	6855      	ldr	r5, [r2, #4]
 800113e:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8001142:	6055      	str	r5, [r2, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001144:	6895      	ldr	r5, [r2, #8]
 8001146:	4029      	ands	r1, r5
 8001148:	4319      	orrs	r1, r3
 800114a:	6091      	str	r1, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800114c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800114e:	493d      	ldr	r1, [pc, #244]	; (8001244 <HAL_ADC_Init+0x168>)
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001150:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001154:	4328      	orrs	r0, r5
 8001156:	62d0      	str	r0, [r2, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001158:	6892      	ldr	r2, [r2, #8]
 800115a:	4011      	ands	r1, r2
 800115c:	428b      	cmp	r3, r1
 800115e:	d031      	beq.n	80011c4 <HAL_ADC_Init+0xe8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001160:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 8001162:	2001      	movs	r0, #1
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001164:	f023 0312 	bic.w	r3, r3, #18
 8001168:	f043 0310 	orr.w	r3, r3, #16
 800116c:	62a3      	str	r3, [r4, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800116e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001170:	4303      	orrs	r3, r0
 8001172:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001174:	bd70      	pop	{r4, r5, r6, pc}
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001176:	f043 0310 	orr.w	r3, r3, #16
        
    tmp_hal_status = HAL_ERROR;
 800117a:	2001      	movs	r0, #1
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800117c:	62a3      	str	r3, [r4, #40]	; 0x28
 800117e:	bd70      	pop	{r4, r5, r6, pc}
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001180:	62c3      	str	r3, [r0, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001182:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001186:	f002 fef7 	bl	8003f78 <HAL_ADC_MspInit>
 800118a:	e7ae      	b.n	80010ea <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800118c:	6962      	ldr	r2, [r4, #20]
 800118e:	2a01      	cmp	r2, #1
 8001190:	d052      	beq.n	8001238 <HAL_ADC_Init+0x15c>
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001192:	6822      	ldr	r2, [r4, #0]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001194:	492a      	ldr	r1, [pc, #168]	; (8001240 <HAL_ADC_Init+0x164>)
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001196:	6850      	ldr	r0, [r2, #4]
 8001198:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 800119c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80011a0:	6050      	str	r0, [r2, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011a2:	6890      	ldr	r0, [r2, #8]
 80011a4:	4001      	ands	r1, r0
 80011a6:	4319      	orrs	r1, r3
 80011a8:	6091      	str	r1, [r2, #8]
 80011aa:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 80011ae:	fa90 f0a0 	rbit	r0, r0
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011b2:	fab0 f080 	clz	r0, r0
 80011b6:	6921      	ldr	r1, [r4, #16]
 80011b8:	3901      	subs	r1, #1
 80011ba:	fa01 f000 	lsl.w	r0, r1, r0
 80011be:	e7c5      	b.n	800114c <HAL_ADC_Init+0x70>
  uint32_t tmp_sqr1 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80011c0:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80011c2:	4770      	bx	lr
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011c4:	2000      	movs	r0, #0
 80011c6:	62e0      	str	r0, [r4, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011ca:	f023 0303 	bic.w	r3, r3, #3
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80011d4:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011d6:	6962      	ldr	r2, [r4, #20]
 80011d8:	2a01      	cmp	r2, #1
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011da:	bf08      	it	eq
 80011dc:	f44f 7080 	moveq.w	r0, #256	; 0x100
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011e0:	d1d7      	bne.n	8001192 <HAL_ADC_Init+0xb6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011e2:	b1e5      	cbz	r5, 800121e <HAL_ADC_Init+0x142>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011e6:	f042 0220 	orr.w	r2, r2, #32
 80011ea:	62a2      	str	r2, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011ee:	f042 0201 	orr.w	r2, r2, #1
 80011f2:	62e2      	str	r2, [r4, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80011f4:	6822      	ldr	r2, [r4, #0]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011f6:	4d12      	ldr	r5, [pc, #72]	; (8001240 <HAL_ADC_Init+0x164>)
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80011f8:	6856      	ldr	r6, [r2, #4]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011fa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80011fe:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8001202:	ea40 0006 	orr.w	r0, r0, r6
 8001206:	6050      	str	r0, [r2, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001208:	6890      	ldr	r0, [r2, #8]
 800120a:	ea05 0500 	and.w	r5, r5, r0
 800120e:	ea45 0503 	orr.w	r5, r5, r3
 8001212:	6095      	str	r5, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001214:	d0c9      	beq.n	80011aa <HAL_ADC_Init+0xce>
 8001216:	2901      	cmp	r1, #1
 8001218:	d0c7      	beq.n	80011aa <HAL_ADC_Init+0xce>
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  uint32_t tmp_sqr1 = 0;
 800121a:	2000      	movs	r0, #0
 800121c:	e796      	b.n	800114c <HAL_ADC_Init+0x70>
 800121e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001222:	fa92 f2a2 	rbit	r2, r2
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001226:	fab2 f582 	clz	r5, r2
 800122a:	69a2      	ldr	r2, [r4, #24]
 800122c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8001230:	3a01      	subs	r2, #1
 8001232:	40aa      	lsls	r2, r5
 8001234:	4310      	orrs	r0, r2
 8001236:	e7dd      	b.n	80011f4 <HAL_ADC_Init+0x118>
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001238:	4608      	mov	r0, r1
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800123a:	2d00      	cmp	r5, #0
 800123c:	d1d2      	bne.n	80011e4 <HAL_ADC_Init+0x108>
 800123e:	e7ee      	b.n	800121e <HAL_ADC_Init+0x142>
 8001240:	ffe1f7fd 	.word	0xffe1f7fd
 8001244:	ff1f0efe 	.word	0xff1f0efe

08001248 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001248:	2800      	cmp	r0, #0
 800124a:	d069      	beq.n	8001320 <HAL_PCD_Init+0xd8>
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800124c:	b5f0      	push	{r4, r5, r6, r7, lr}
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 800124e:	f890 33e9 	ldrb.w	r3, [r0, #1001]	; 0x3e9
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001252:	b087      	sub	sp, #28
 8001254:	4604      	mov	r4, r0
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8001256:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800125a:	2b00      	cmp	r3, #0
 800125c:	d05b      	beq.n	8001316 <HAL_PCD_Init+0xce>
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 800125e:	4625      	mov	r5, r4

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001260:	2303      	movs	r3, #3
 8001262:	f884 33e9 	strb.w	r3, [r4, #1001]	; 0x3e9
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001266:	6820      	ldr	r0, [r4, #0]
 8001268:	f001 f8d6 	bl	8002418 <USB_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 800126c:	f855 eb10 	ldr.w	lr, [r5], #16
 8001270:	466f      	mov	r7, sp
 8001272:	462e      	mov	r6, r5
 8001274:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001276:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001278:	6833      	ldr	r3, [r6, #0]
 800127a:	1d26      	adds	r6, r4, #4
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001282:	4670      	mov	r0, lr
 8001284:	f001 f8b6 	bl	80023f4 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8001288:	2100      	movs	r1, #0
 800128a:	6820      	ldr	r0, [r4, #0]
 800128c:	f001 f8ce 	bl	800242c <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 8001290:	2100      	movs	r1, #0
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8001292:	4608      	mov	r0, r1
 8001294:	4623      	mov	r3, r4
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8001296:	4622      	mov	r2, r4
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8001298:	2701      	movs	r7, #1
    hpcd->IN_ep[index].num = index;
 800129a:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 800129e:	8691      	strh	r1, [r2, #52]	; 0x34
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 80012a0:	3101      	adds	r1, #1
 80012a2:	290f      	cmp	r1, #15
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 80012a4:	f882 7029 	strb.w	r7, [r2, #41]	; 0x29
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80012a8:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0;
 80012ac:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0;
 80012ae:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0;
 80012b0:	6410      	str	r0, [r2, #64]	; 0x40
 80012b2:	f102 0220 	add.w	r2, r2, #32
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 80012b6:	d1f0      	bne.n	800129a <HAL_PCD_Init+0x52>
 80012b8:	2200      	movs	r2, #0
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 80012ba:	4611      	mov	r1, r2
    hpcd->OUT_ep[index].num = index;
 80012bc:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    hpcd->IN_ep[index].tx_fifo_num = index;
 80012c0:	869a      	strh	r2, [r3, #52]	; 0x34
    hpcd->IN_ep[index].maxpacket =  0;
    hpcd->IN_ep[index].xfer_buff = 0;
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
 80012c2:	3201      	adds	r2, #1
 80012c4:	2a0f      	cmp	r2, #15
  {
    hpcd->OUT_ep[index].is_in = 0;
 80012c6:	f883 1209 	strb.w	r1, [r3, #521]	; 0x209
    hpcd->OUT_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 80012ca:	f883 120b 	strb.w	r1, [r3, #523]	; 0x20b
    hpcd->OUT_ep[index].maxpacket = 0;
 80012ce:	f8c3 1218 	str.w	r1, [r3, #536]	; 0x218
    hpcd->OUT_ep[index].xfer_buff = 0;
 80012d2:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c
    hpcd->OUT_ep[index].xfer_len = 0;
 80012d6:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 80012da:	f04f 0700 	mov.w	r7, #0
 80012de:	f103 0320 	add.w	r3, r3, #32
    hpcd->IN_ep[index].maxpacket =  0;
    hpcd->IN_ep[index].xfer_buff = 0;
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
 80012e2:	d1eb      	bne.n	80012bc <HAL_PCD_Init+0x74>
    hpcd->OUT_ep[index].xfer_buff = 0;
    hpcd->OUT_ep[index].xfer_len = 0;
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 80012e4:	46ee      	mov	lr, sp
 80012e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012e8:	f8d4 c000 	ldr.w	ip, [r4]
 80012ec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80012f0:	682b      	ldr	r3, [r5, #0]
 80012f2:	4660      	mov	r0, ip
 80012f4:	f8ce 3000 	str.w	r3, [lr]
 80012f8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80012fc:	f001 f898 	bl	8002430 <USB_DevInit>
  
  hpcd->USB_Address = 0;
  hpcd->State= HAL_PCD_STATE_READY;
 8001300:	2301      	movs	r3, #1
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
  
  hpcd->USB_Address = 0;
 8001302:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
  
  USB_DevDisconnect (hpcd->Instance);  
 8001306:	6820      	ldr	r0, [r4, #0]
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
  
  hpcd->USB_Address = 0;
  hpcd->State= HAL_PCD_STATE_READY;
 8001308:	f884 33e9 	strb.w	r3, [r4, #1001]	; 0x3e9
  
  USB_DevDisconnect (hpcd->Instance);  
 800130c:	f001 fd00 	bl	8002d10 <USB_DevDisconnect>
  return HAL_OK;
 8001310:	4638      	mov	r0, r7
}
 8001312:	b007      	add	sp, #28
 8001314:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001316:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800131a:	f002 fcb3 	bl	8003c84 <HAL_PCD_MspInit>
 800131e:	e79e      	b.n	800125e <HAL_PCD_Init+0x16>
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 8001320:	2001      	movs	r0, #1
 8001322:	4770      	bx	lr

08001324 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8001324:	f890 23e8 	ldrb.w	r2, [r0, #1000]	; 0x3e8
 8001328:	2a01      	cmp	r2, #1
 800132a:	d101      	bne.n	8001330 <HAL_PCD_Start+0xc>
 800132c:	2002      	movs	r0, #2
 800132e:	4770      	bx	lr
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001330:	b510      	push	{r4, lr}
 8001332:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001334:	2101      	movs	r1, #1
 8001336:	f880 13e8 	strb.w	r1, [r0, #1000]	; 0x3e8
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 800133a:	f002 fd9d 	bl	8003e78 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 800133e:	6820      	ldr	r0, [r4, #0]
 8001340:	f001 fce4 	bl	8002d0c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001344:	6820      	ldr	r0, [r4, #0]
 8001346:	f001 f85d 	bl	8002404 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800134a:	2000      	movs	r0, #0
 800134c:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 8001350:	bd10      	pop	{r4, pc}
 8001352:	bf00      	nop

08001354 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001354:	f890 23e8 	ldrb.w	r2, [r0, #1000]	; 0x3e8
 8001358:	2a01      	cmp	r2, #1
 800135a:	d101      	bne.n	8001360 <HAL_PCD_SetAddress+0xc>
 800135c:	2002      	movs	r0, #2
 800135e:	4770      	bx	lr
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001360:	b510      	push	{r4, lr}
 8001362:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001364:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8001366:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 800136a:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  hpcd->USB_Address = address;
  USB_SetDevAddress(hpcd->Instance, address);
 800136e:	6800      	ldr	r0, [r0, #0]
 8001370:	f001 fcc6 	bl	8002d00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001374:	2000      	movs	r0, #0
 8001376:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
 800137a:	bd10      	pop	{r4, pc}

0800137c <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800137c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 800137e:	b2cc      	uxtb	r4, r1
 8001380:	0625      	lsls	r5, r4, #24
 8001382:	d41a      	bmi.n	80013ba <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001384:	460d      	mov	r5, r1
 8001386:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800138a:	f501 7102 	add.w	r1, r1, #520	; 0x208
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800138e:	09e4      	lsrs	r4, r4, #7
 8001390:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8001392:	700d      	strb	r5, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8001394:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8001396:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 800139a:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
    
  __HAL_LOCK(hpcd);
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <HAL_PCD_EP_Open+0x28>
 80013a0:	2002      	movs	r0, #2
  USB_ActivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);
  return ret;
}
 80013a2:	bd38      	pop	{r3, r4, r5, pc}
 80013a4:	4604      	mov	r4, r0
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
    
  __HAL_LOCK(hpcd);
 80013a6:	2301      	movs	r3, #1
 80013a8:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80013ac:	6800      	ldr	r0, [r0, #0]
 80013ae:	f001 f853 	bl	8002458 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return ret;
 80013b8:	bd38      	pop	{r3, r4, r5, pc}
 80013ba:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80013be:	eb00 1145 	add.w	r1, r0, r5, lsl #5
 80013c2:	3128      	adds	r1, #40	; 0x28
 80013c4:	e7e3      	b.n	800138e <HAL_PCD_EP_Open+0x12>
 80013c6:	bf00      	nop

080013c8 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 80013c8:	b2cb      	uxtb	r3, r1
 80013ca:	061a      	lsls	r2, r3, #24
 80013cc:	d419      	bmi.n	8001402 <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80013ce:	460a      	mov	r2, r1
 80013d0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80013d4:	f501 7102 	add.w	r1, r1, #520	; 0x208
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80013d8:	09db      	lsrs	r3, r3, #7
 80013da:	704b      	strb	r3, [r1, #1]
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 80013dc:	700a      	strb	r2, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd);
 80013de:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d101      	bne.n	80013ea <HAL_PCD_EP_Close+0x22>
 80013e6:	2002      	movs	r0, #2
 80013e8:	4770      	bx	lr
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80013ea:	b510      	push	{r4, lr}
 80013ec:	4604      	mov	r4, r0
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd);
 80013ee:	2301      	movs	r3, #1
 80013f0:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80013f4:	6800      	ldr	r0, [r0, #0]
 80013f6:	f001 f9d5 	bl	80027a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 8001400:	bd10      	pop	{r4, pc}
 8001402:	f001 027f 	and.w	r2, r1, #127	; 0x7f
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001406:	eb00 1142 	add.w	r1, r0, r2, lsl #5
 800140a:	3128      	adds	r1, #40	; 0x28
 800140c:	e7e4      	b.n	80013d8 <HAL_PCD_EP_Close+0x10>
 800140e:	bf00      	nop

08001410 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001410:	b570      	push	{r4, r5, r6, lr}
 8001412:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001416:	0175      	lsls	r5, r6, #5
 8001418:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
  ep->xfer_count = 0;
 800141a:	2100      	movs	r1, #0
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800141c:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
  ep->xfer_len = len;
 8001420:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
 8001424:	f884 6208 	strb.w	r6, [r4, #520]	; 0x208
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0;
 8001428:	f8c4 1224 	str.w	r1, [r4, #548]	; 0x224
  ep->is_in = 0;
 800142c:	f884 1209 	strb.w	r1, [r4, #521]	; 0x209
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8001430:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
 8001434:	2b01      	cmp	r3, #1
 8001436:	d00d      	beq.n	8001454 <HAL_PCD_EP_Receive+0x44>
 8001438:	4604      	mov	r4, r0
 800143a:	2301      	movs	r3, #1
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800143c:	f505 7502 	add.w	r5, r5, #520	; 0x208
 8001440:	1941      	adds	r1, r0, r5
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8001442:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  
  if ((ep_addr & 0x7F) == 0 )
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8001446:	6800      	ldr	r0, [r0, #0]
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8001448:	f001 fa96 	bl	8002978 <USB_EPStartXfer>
  }
  __HAL_UNLOCK(hpcd);
 800144c:	2000      	movs	r0, #0
 800144e:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 8001452:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8001454:	2002      	movs	r0, #2
    USB_EPStartXfer(hpcd->Instance , ep);
  }
  __HAL_UNLOCK(hpcd);
  
  return HAL_OK;
}
 8001456:	bd70      	pop	{r4, r5, r6, pc}

08001458 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8001458:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800145c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
}
 8001460:	f8b0 0224 	ldrh.w	r0, [r0, #548]	; 0x224
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop

08001468 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800146a:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800146e:	0175      	lsls	r5, r6, #5
 8001470:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
 8001472:	2701      	movs	r7, #1
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0;
 8001474:	2100      	movs	r1, #0
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001476:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_len = len;
 8001478:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
 800147a:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0;
 800147e:	6461      	str	r1, [r4, #68]	; 0x44
  ep->is_in = 1;
 8001480:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8001484:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
 8001488:	42bb      	cmp	r3, r7
 800148a:	d00b      	beq.n	80014a4 <HAL_PCD_EP_Transmit+0x3c>
 800148c:	4604      	mov	r4, r0
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800148e:	3528      	adds	r5, #40	; 0x28
 8001490:	1941      	adds	r1, r0, r5
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8001492:	f880 73e8 	strb.w	r7, [r0, #1000]	; 0x3e8
  
  if ((ep_addr & 0x7F) == 0 )
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8001496:	6800      	ldr	r0, [r0, #0]
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8001498:	f001 fa6e 	bl	8002978 <USB_EPStartXfer>
  }
  
  __HAL_UNLOCK(hpcd);
 800149c:	2000      	movs	r0, #0
 800149e:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 80014a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 80014a4:	2002      	movs	r0, #2
  }
  
  __HAL_UNLOCK(hpcd);
  
  return HAL_OK;
}
 80014a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080014a8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014ac:	4604      	mov	r4, r0
 80014ae:	b083      	sub	sp, #12
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80014b0:	6800      	ldr	r0, [r0, #0]
 80014b2:	f001 fc2f 	bl	8002d14 <USB_ReadInterrupts>
 80014b6:	0401      	lsls	r1, r0, #16
 80014b8:	d444      	bmi.n	8001544 <HAL_PCD_IRQHandler+0x9c>
 80014ba:	6820      	ldr	r0, [r4, #0]
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80014bc:	f001 fc2a 	bl	8002d14 <USB_ReadInterrupts>
 80014c0:	0546      	lsls	r6, r0, #21
 80014c2:	f100 8202 	bmi.w	80018ca <HAL_PCD_IRQHandler+0x422>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
    HAL_PCD_ResetCallback(hpcd);
    HAL_PCD_SetAddress(hpcd, 0);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 80014c6:	6820      	ldr	r0, [r4, #0]
 80014c8:	f001 fc24 	bl	8002d14 <USB_ReadInterrupts>
 80014cc:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 80014d0:	6820      	ldr	r0, [r4, #0]
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
    HAL_PCD_ResetCallback(hpcd);
    HAL_PCD_SetAddress(hpcd, 0);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 80014d2:	d007      	beq.n	80014e4 <HAL_PCD_IRQHandler+0x3c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 80014d4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80014d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014dc:	041b      	lsls	r3, r3, #16
 80014de:	0c1b      	lsrs	r3, r3, #16
 80014e0:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 80014e4:	f001 fc16 	bl	8002d14 <USB_ReadInterrupts>
 80014e8:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 80014ec:	6820      	ldr	r0, [r4, #0]

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 80014ee:	d007      	beq.n	8001500 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 80014f0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80014f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014f8:	041b      	lsls	r3, r3, #16
 80014fa:	0c1b      	lsrs	r3, r3, #16
 80014fc:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8001500:	f001 fc08 	bl	8002d14 <USB_ReadInterrupts>
 8001504:	04c5      	lsls	r5, r0, #19
 8001506:	f100 81c6 	bmi.w	8001896 <HAL_PCD_IRQHandler+0x3ee>
 800150a:	6820      	ldr	r0, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 800150c:	f001 fc02 	bl	8002d14 <USB_ReadInterrupts>
 8001510:	0500      	lsls	r0, r0, #20
 8001512:	f100 819f 	bmi.w	8001854 <HAL_PCD_IRQHandler+0x3ac>
    {
      HAL_PCD_SuspendCallback(hpcd);
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8001516:	6820      	ldr	r0, [r4, #0]
 8001518:	f001 fbfc 	bl	8002d14 <USB_ReadInterrupts>
 800151c:	0582      	lsls	r2, r0, #22
 800151e:	f100 818c 	bmi.w	800183a <HAL_PCD_IRQHandler+0x392>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
    HAL_PCD_SOFCallback(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8001522:	6820      	ldr	r0, [r4, #0]
 8001524:	f001 fbf6 	bl	8002d14 <USB_ReadInterrupts>
 8001528:	05c3      	lsls	r3, r0, #23
 800152a:	d508      	bpl.n	800153e <HAL_PCD_IRQHandler+0x96>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800152c:	6822      	ldr	r2, [r4, #0]
 800152e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001532:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001536:	041b      	lsls	r3, r3, #16
 8001538:	0c1b      	lsrs	r3, r3, #16
 800153a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 800153e:	b003      	add	sp, #12
 8001540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8001544:	2300      	movs	r3, #0
 8001546:	6820      	ldr	r0, [r4, #0]
 8001548:	f8ad 3004 	strh.w	r3, [sp, #4]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800154c:	f504 767b 	add.w	r6, r4, #1004	; 0x3ec
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
  __IO uint16_t wEPVal = 0;
 8001550:	f8ad 3006 	strh.w	r3, [sp, #6]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8001554:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001558:	b29b      	uxth	r3, r3
 800155a:	041f      	lsls	r7, r3, #16
 800155c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001560:	d5ac      	bpl.n	80014bc <HAL_PCD_IRQHandler+0x14>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001562:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    
    if (epindex == 0)
 8001566:	f012 070f 	ands.w	r7, r2, #15
 800156a:	d15a      	bne.n	8001622 <HAL_PCD_IRQHandler+0x17a>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 800156c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001570:	8803      	ldrh	r3, [r0, #0]
    if (epindex == 0)
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001572:	f001 0110 	and.w	r1, r1, #16
 8001576:	b289      	uxth	r1, r1
 8001578:	2900      	cmp	r1, #0
 800157a:	f000 809f 	beq.w	80016bc <HAL_PCD_IRQHandler+0x214>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800157e:	b29b      	uxth	r3, r3
 8001580:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 8001584:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001588:	051a      	lsls	r2, r3, #20
 800158a:	f100 8136 	bmi.w	80017fa <HAL_PCD_IRQHandler+0x352>
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 800158e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001592:	041b      	lsls	r3, r3, #16
 8001594:	d5de      	bpl.n	8001554 <HAL_PCD_IRQHandler+0xac>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001596:	8803      	ldrh	r3, [r0, #0]
 8001598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800159c:	051b      	lsls	r3, r3, #20
 800159e:	0d1b      	lsrs	r3, r3, #20
 80015a0:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015a2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80015a6:	f894 2208 	ldrb.w	r2, [r4, #520]	; 0x208
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80015b0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80015b4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80015b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015bc:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
          
          if (ep->xfer_count != 0)
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f040 820b 	bne.w	80019dc <HAL_PCD_IRQHandler+0x534>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
            ep->xfer_buff+=ep->xfer_count;
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 80015c6:	2100      	movs	r1, #0
 80015c8:	4620      	mov	r0, r4
 80015ca:	f002 fb81 	bl	8003cd0 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80015ce:	6820      	ldr	r0, [r4, #0]
 80015d0:	f8d4 5218 	ldr.w	r5, [r4, #536]	; 0x218
 80015d4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80015d8:	2d3e      	cmp	r5, #62	; 0x3e
 80015da:	b29b      	uxth	r3, r3
 80015dc:	f500 6180 	add.w	r1, r0, #1024	; 0x400
 80015e0:	f103 0306 	add.w	r3, r3, #6
 80015e4:	f240 81d3 	bls.w	800198e <HAL_PCD_IRQHandler+0x4e6>
 80015e8:	f3c5 124f 	ubfx	r2, r5, #5, #16
 80015ec:	06ef      	lsls	r7, r5, #27
 80015ee:	bf04      	itt	eq
 80015f0:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80015f4:	b292      	uxtheq	r2, r2
 80015f6:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80015fa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80015fe:	b292      	uxth	r2, r2
 8001600:	f841 2013 	str.w	r2, [r1, r3, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001604:	8803      	ldrh	r3, [r0, #0]
 8001606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800160a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800160e:	041b      	lsls	r3, r3, #16
 8001610:	0c1b      	lsrs	r3, r3, #16
 8001612:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800161a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800161e:	8003      	strh	r3, [r0, #0]
 8001620:	e798      	b.n	8001554 <HAL_PCD_IRQHandler+0xac>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001622:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8001626:	b29b      	uxth	r3, r3
 8001628:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 800162c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001630:	0419      	lsls	r1, r3, #16
 8001632:	d471      	bmi.n	8001718 <HAL_PCD_IRQHandler+0x270>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 8001634:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001638:	061a      	lsls	r2, r3, #24
 800163a:	d58b      	bpl.n	8001554 <HAL_PCD_IRQHandler+0xac>
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800163c:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8001640:	017d      	lsls	r5, r7, #5
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001642:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800164a:	041b      	lsls	r3, r3, #16
 800164c:	0c1b      	lsrs	r3, r3, #16
 800164e:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8001652:	eb04 0e05 	add.w	lr, r4, r5
 8001656:	f89e 3032 	ldrb.w	r3, [lr, #50]	; 0x32
 800165a:	2b00      	cmp	r3, #0
 800165c:	f040 80aa 	bne.w	80017b4 <HAL_PCD_IRQHandler+0x30c>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001660:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001664:	f89e 2028 	ldrb.w	r2, [lr, #40]	; 0x28
 8001668:	b29b      	uxth	r3, r3
 800166a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800166e:	3302      	adds	r3, #2
 8001670:	f500 6180 	add.w	r1, r0, #1024	; 0x400
 8001674:	f851 3013 	ldr.w	r3, [r1, r3, lsl #1]
 8001678:	eb04 1247 	add.w	r2, r4, r7, lsl #5
 800167c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
          if (ep->xfer_count != 0)
 8001682:	2b00      	cmp	r3, #0
 8001684:	f040 8179 	bne.w	800197a <HAL_PCD_IRQHandler+0x4d2>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001688:	4425      	add	r5, r4
 800168a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800168e:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8001692:	b29b      	uxth	r3, r3
 8001694:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001698:	3302      	adds	r3, #2
 800169a:	f851 1013 	ldr.w	r1, [r1, r3, lsl #1]
        ep->xfer_buff+=ep->xfer_count;
 800169e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016a0:	f3c1 0109 	ubfx	r1, r1, #0, #10
        ep->xfer_buff+=ep->xfer_count;
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 80016a4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
 80016a6:	440a      	add	r2, r1
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016a8:	6469      	str	r1, [r5, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 80016aa:	63ea      	str	r2, [r5, #60]	; 0x3c
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80016ac:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80016b0:	4620      	mov	r0, r4
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 80016b2:	bb6b      	cbnz	r3, 8001710 <HAL_PCD_IRQHandler+0x268>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80016b4:	f002 fb14 	bl	8003ce0 <HAL_PCD_DataInStageCallback>
 80016b8:	6820      	ldr	r0, [r4, #0]
 80016ba:	e74b      	b.n	8001554 <HAL_PCD_IRQHandler+0xac>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016bc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80016c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016c4:	041b      	lsls	r3, r3, #16
 80016c6:	0c1b      	lsrs	r3, r3, #16
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff += ep->xfer_count;
 80016c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016ca:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016cc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80016d0:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80016da:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80016de:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 80016e2:	4620      	mov	r0, r4
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 80016e8:	441a      	add	r2, r3
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016ea:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80016ec:	63e2      	str	r2, [r4, #60]	; 0x3c
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 80016ee:	f002 faf7 	bl	8003ce0 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 80016f2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80016f6:	b16b      	cbz	r3, 8001714 <HAL_PCD_IRQHandler+0x26c>
 80016f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016fa:	b95b      	cbnz	r3, 8001714 <HAL_PCD_IRQHandler+0x26c>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 80016fc:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8001700:	6820      	ldr	r0, [r4, #0]
 8001702:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001706:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
          hpcd->USB_Address = 0;
 800170a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800170e:	e721      	b.n	8001554 <HAL_PCD_IRQHandler+0xac>
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001710:	f7ff feaa 	bl	8001468 <HAL_PCD_EP_Transmit>
 8001714:	6820      	ldr	r0, [r4, #0]
 8001716:	e71d      	b.n	8001554 <HAL_PCD_IRQHandler+0xac>
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
      if ((wEPVal & USB_EP_CTR_RX) != 0)
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001718:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 800171c:	017d      	lsls	r5, r7, #5
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
      if ((wEPVal & USB_EP_CTR_RX) != 0)
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800171e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001722:	051b      	lsls	r3, r3, #20
 8001724:	0d1b      	lsrs	r3, r3, #20
 8001726:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 800172a:	eb04 0905 	add.w	r9, r4, r5
 800172e:	f899 3212 	ldrb.w	r3, [r9, #530]	; 0x212
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 80e7 	beq.w	8001906 <HAL_PCD_IRQHandler+0x45e>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8001738:	f899 3208 	ldrb.w	r3, [r9, #520]	; 0x208
 800173c:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 8001740:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8001744:	f411 4f80 	tst.w	r1, #16384	; 0x4000
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001748:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800174c:	b289      	uxth	r1, r1
 800174e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8001752:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8001756:	f000 8125 	beq.w	80019a4 <HAL_PCD_IRQHandler+0x4fc>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800175a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800175e:	f3c3 0809 	ubfx	r8, r3, #0, #10
            if (count != 0)
 8001762:	f1b8 0f00 	cmp.w	r8, #0
 8001766:	f040 8151 	bne.w	8001a0c <HAL_PCD_IRQHandler+0x564>
            if (count != 0)
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 800176a:	8813      	ldrh	r3, [r2, #0]
 800176c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001770:	051b      	lsls	r3, r3, #20
 8001772:	0d1b      	lsrs	r3, r3, #20
 8001774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001778:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800177c:	8013      	strh	r3, [r2, #0]
 800177e:	1961      	adds	r1, r4, r5
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8001780:	f8d1 0224 	ldr.w	r0, [r1, #548]	; 0x224
        ep->xfer_buff+=count;
 8001784:	f8d1 221c 	ldr.w	r2, [r1, #540]	; 0x21c
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8001788:	f8d1 3220 	ldr.w	r3, [r1, #544]	; 0x220
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 800178c:	4440      	add	r0, r8
        ep->xfer_buff+=count;
 800178e:	4442      	add	r2, r8
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8001790:	f8c1 0224 	str.w	r0, [r1, #548]	; 0x224
        ep->xfer_buff+=count;
 8001794:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8001798:	b123      	cbz	r3, 80017a4 <HAL_PCD_IRQHandler+0x2fc>
 800179a:	f8d1 0218 	ldr.w	r0, [r1, #536]	; 0x218
 800179e:	4580      	cmp	r8, r0
 80017a0:	f080 8115 	bcs.w	80019ce <HAL_PCD_IRQHandler+0x526>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80017a4:	4425      	add	r5, r4
 80017a6:	4620      	mov	r0, r4
 80017a8:	f895 1208 	ldrb.w	r1, [r5, #520]	; 0x208
 80017ac:	f002 fa90 	bl	8003cd0 <HAL_PCD_DataOutStageCallback>
 80017b0:	6820      	ldr	r0, [r4, #0]
 80017b2:	e73f      	b.n	8001634 <HAL_PCD_IRQHandler+0x18c>
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80017b4:	f89e c028 	ldrb.w	ip, [lr, #40]	; 0x28
 80017b8:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 80017bc:	065b      	lsls	r3, r3, #25
 80017be:	f140 80bb 	bpl.w	8001938 <HAL_PCD_IRQHandler+0x490>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017c2:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80017c6:	eb04 1247 	add.w	r2, r4, r7, lsl #5
 80017ca:	b289      	uxth	r1, r1
 80017cc:	eb01 03cc 	add.w	r3, r1, ip, lsl #3
 80017d0:	3302      	adds	r3, #2
 80017d2:	f500 6180 	add.w	r1, r0, #1024	; 0x400
 80017d6:	f851 3013 	ldr.w	r3, [r1, r3, lsl #1]
 80017da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017de:	6453      	str	r3, [r2, #68]	; 0x44
            if (ep->xfer_count != 0)
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 80ba 	beq.w	800195a <HAL_PCD_IRQHandler+0x4b2>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 80017e6:	f8de 103c 	ldr.w	r1, [lr, #60]	; 0x3c
 80017ea:	f8be 202e 	ldrh.w	r2, [lr, #46]	; 0x2e
 80017ee:	f001 fa97 	bl	8002d20 <USB_WritePMA>
 80017f2:	6820      	ldr	r0, [r4, #0]
 80017f4:	f500 6180 	add.w	r1, r0, #1024	; 0x400
 80017f8:	e0af      	b.n	800195a <HAL_PCD_IRQHandler+0x4b2>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017fa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80017fe:	f894 2208 	ldrb.w	r2, [r4, #520]	; 0x208
 8001802:	b29b      	uxth	r3, r3
 8001804:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001808:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800180c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8001810:	f8b4 220c 	ldrh.w	r2, [r4, #524]	; 0x20c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001818:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800181c:	4631      	mov	r1, r6
 800181e:	f001 fa91 	bl	8002d44 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8001822:	6822      	ldr	r2, [r4, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8001824:	4620      	mov	r0, r4
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8001826:	8813      	ldrh	r3, [r2, #0]
 8001828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800182c:	051b      	lsls	r3, r3, #20
 800182e:	0d1b      	lsrs	r3, r3, #20
 8001830:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8001832:	f002 fa47 	bl	8003cc4 <HAL_PCD_SetupStageCallback>
 8001836:	6820      	ldr	r0, [r4, #0]
 8001838:	e68c      	b.n	8001554 <HAL_PCD_IRQHandler+0xac>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 800183a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 800183c:	4620      	mov	r0, r4
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 800183e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001842:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001846:	041b      	lsls	r3, r3, #16
 8001848:	0c1b      	lsrs	r3, r3, #16
 800184a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800184e:	f002 fa4f 	bl	8003cf0 <HAL_PCD_SOFCallback>
 8001852:	e666      	b.n	8001522 <HAL_PCD_IRQHandler+0x7a>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
  {
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 800185a:	4618      	mov	r0, r3
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
  {
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 800185c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001860:	0412      	lsls	r2, r2, #16
 8001862:	0c12      	lsrs	r2, r2, #16
 8001864:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001868:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800186c:	b292      	uxth	r2, r2
 800186e:	f042 0208 	orr.w	r2, r2, #8
 8001872:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001876:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800187a:	b292      	uxth	r2, r2
 800187c:	f042 0204 	orr.w	r2, r2, #4
 8001880:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8001884:	f001 fa46 	bl	8002d14 <USB_ReadInterrupts>
 8001888:	04c1      	lsls	r1, r0, #19
 800188a:	f53f ae44 	bmi.w	8001516 <HAL_PCD_IRQHandler+0x6e>
    {
      HAL_PCD_SuspendCallback(hpcd);
 800188e:	4620      	mov	r0, r4
 8001890:	f002 fa40 	bl	8003d14 <HAL_PCD_SuspendCallback>
 8001894:	e63f      	b.n	8001516 <HAL_PCD_IRQHandler+0x6e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8001896:	6822      	ldr	r2, [r4, #0]
    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8001898:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 800189c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
    
    HAL_PCD_ResumeCallback(hpcd);
 80018a0:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80018a2:	f023 0304 	bic.w	r3, r3, #4
 80018a6:	041b      	lsls	r3, r3, #16
 80018a8:	0c1b      	lsrs	r3, r3, #16
 80018aa:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 80018ae:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 80018b2:	f002 fa3f 	bl	8003d34 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 80018b6:	6820      	ldr	r0, [r4, #0]
 80018b8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80018bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018c0:	041b      	lsls	r3, r3, #16
 80018c2:	0c1b      	lsrs	r3, r3, #16
 80018c4:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80018c8:	e620      	b.n	800150c <HAL_PCD_IRQHandler+0x64>
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80018ca:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80018cc:	4620      	mov	r0, r4
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80018ce:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80018d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018d6:	041b      	lsls	r3, r3, #16
 80018d8:	0c1b      	lsrs	r3, r3, #16
 80018da:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80018de:	f002 fa0b 	bl	8003cf8 <HAL_PCD_ResetCallback>
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80018e2:	f894 33e8 	ldrb.w	r3, [r4, #1000]	; 0x3e8
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	f43f aded 	beq.w	80014c6 <HAL_PCD_IRQHandler+0x1e>
  hpcd->USB_Address = address;
 80018ec:	2500      	movs	r5, #0
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80018ee:	2301      	movs	r3, #1
 80018f0:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  hpcd->USB_Address = address;
 80018f4:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 80018f8:	4629      	mov	r1, r5
 80018fa:	6820      	ldr	r0, [r4, #0]
 80018fc:	f001 fa00 	bl	8002d00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001900:	f884 53e8 	strb.w	r5, [r4, #1000]	; 0x3e8
 8001904:	e5df      	b.n	80014c6 <HAL_PCD_IRQHandler+0x1e>
        ep = &hpcd->OUT_ep[epindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001906:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800190a:	f899 2208 	ldrb.w	r2, [r9, #520]	; 0x208
 800190e:	b29b      	uxth	r3, r3
 8001910:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001914:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001918:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800191c:	f3c3 0809 	ubfx	r8, r3, #0, #10
          if (count != 0)
 8001920:	f1b8 0f00 	cmp.w	r8, #0
 8001924:	f43f af2b 	beq.w	800177e <HAL_PCD_IRQHandler+0x2d6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001928:	4643      	mov	r3, r8
 800192a:	f8b9 220c 	ldrh.w	r2, [r9, #524]	; 0x20c
 800192e:	f8d9 121c 	ldr.w	r1, [r9, #540]	; 0x21c
 8001932:	f001 fa07 	bl	8002d44 <USB_ReadPMA>
 8001936:	e722      	b.n	800177e <HAL_PCD_IRQHandler+0x2d6>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001938:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800193c:	f500 6180 	add.w	r1, r0, #1024	; 0x400
 8001940:	b29b      	uxth	r3, r3
 8001942:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8001946:	3306      	adds	r3, #6
 8001948:	f851 3013 	ldr.w	r3, [r1, r3, lsl #1]
 800194c:	eb04 1247 	add.w	r2, r4, r7, lsl #5
 8001950:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001954:	6453      	str	r3, [r2, #68]	; 0x44
            if (ep->xfer_count != 0)
 8001956:	2b00      	cmp	r3, #0
 8001958:	d14e      	bne.n	80019f8 <HAL_PCD_IRQHandler+0x550>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 800195a:	1963      	adds	r3, r4, r5
 800195c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001960:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001964:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001968:	051b      	lsls	r3, r3, #20
 800196a:	0d1b      	lsrs	r3, r3, #20
 800196c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001974:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001978:	e686      	b.n	8001688 <HAL_PCD_IRQHandler+0x1e0>
        if (ep->doublebuffer == 0)
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
          if (ep->xfer_count != 0)
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800197a:	f8de 103c 	ldr.w	r1, [lr, #60]	; 0x3c
 800197e:	f8be 202c 	ldrh.w	r2, [lr, #44]	; 0x2c
 8001982:	f001 f9cd 	bl	8002d20 <USB_WritePMA>
 8001986:	6820      	ldr	r0, [r4, #0]
 8001988:	f500 6180 	add.w	r1, r0, #1024	; 0x400
 800198c:	e67c      	b.n	8001688 <HAL_PCD_IRQHandler+0x1e0>
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800198e:	f3c5 024f 	ubfx	r2, r5, #1, #16
 8001992:	07ed      	lsls	r5, r5, #31
 8001994:	bf44      	itt	mi
 8001996:	3201      	addmi	r2, #1
 8001998:	b292      	uxthmi	r2, r2
 800199a:	0292      	lsls	r2, r2, #10
 800199c:	b292      	uxth	r2, r2
 800199e:	f841 2013 	str.w	r2, [r1, r3, lsl #1]
 80019a2:	e62f      	b.n	8001604 <HAL_PCD_IRQHandler+0x15c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80019a4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80019a8:	f3c3 0809 	ubfx	r8, r3, #0, #10
            if (count != 0)
 80019ac:	f1b8 0f00 	cmp.w	r8, #0
 80019b0:	f43f aedb 	beq.w	800176a <HAL_PCD_IRQHandler+0x2c2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80019b4:	4643      	mov	r3, r8
 80019b6:	f8b9 2210 	ldrh.w	r2, [r9, #528]	; 0x210
 80019ba:	f8d9 121c 	ldr.w	r1, [r9, #540]	; 0x21c
 80019be:	f001 f9c1 	bl	8002d44 <USB_ReadPMA>
 80019c2:	f899 2208 	ldrb.w	r2, [r9, #520]	; 0x208
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80019cc:	e6cd      	b.n	800176a <HAL_PCD_IRQHandler+0x2c2>
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80019ce:	f891 1208 	ldrb.w	r1, [r1, #520]	; 0x208
 80019d2:	4620      	mov	r0, r4
 80019d4:	f7ff fd1c 	bl	8001410 <HAL_PCD_EP_Receive>
 80019d8:	6820      	ldr	r0, [r4, #0]
 80019da:	e62b      	b.n	8001634 <HAL_PCD_IRQHandler+0x18c>
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          
          if (ep->xfer_count != 0)
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80019dc:	f8b4 220c 	ldrh.w	r2, [r4, #524]	; 0x20c
 80019e0:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 80019e4:	f001 f9ae 	bl	8002d44 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80019e8:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 80019ec:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 80019f0:	4413      	add	r3, r2
 80019f2:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
 80019f6:	e5e6      	b.n	80015c6 <HAL_PCD_IRQHandler+0x11e>
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
            if (ep->xfer_count != 0)
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80019f8:	f8de 103c 	ldr.w	r1, [lr, #60]	; 0x3c
 80019fc:	f8be 2030 	ldrh.w	r2, [lr, #48]	; 0x30
 8001a00:	f001 f98e 	bl	8002d20 <USB_WritePMA>
 8001a04:	6820      	ldr	r0, [r4, #0]
 8001a06:	f500 6180 	add.w	r1, r0, #1024	; 0x400
 8001a0a:	e7a6      	b.n	800195a <HAL_PCD_IRQHandler+0x4b2>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
            if (count != 0)
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a0c:	4643      	mov	r3, r8
 8001a0e:	f8b9 220e 	ldrh.w	r2, [r9, #526]	; 0x20e
 8001a12:	e7d2      	b.n	80019ba <HAL_PCD_IRQHandler+0x512>

08001a14 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a14:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
 8001a16:	b2cb      	uxtb	r3, r1
 8001a18:	061a      	lsls	r2, r3, #24
 8001a1a:	d41a      	bmi.n	8001a52 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a1c:	460d      	mov	r5, r1
 8001a1e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8001a22:	f501 7102 	add.w	r1, r1, #520	; 0x208
  }
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001a26:	09db      	lsrs	r3, r3, #7
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
 8001a28:	2201      	movs	r2, #1
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001a2a:	704b      	strb	r3, [r1, #1]
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
 8001a2c:	700d      	strb	r5, [r1, #0]
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
 8001a2e:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd);
 8001a30:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d101      	bne.n	8001a3c <HAL_PCD_EP_SetStall+0x28>
 8001a38:	2002      	movs	r0, #2
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8001a3a:	bd38      	pop	{r3, r4, r5, pc}
 8001a3c:	4604      	mov	r4, r0
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd);
 8001a3e:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  USB_EPSetStall(hpcd->Instance , ep);
 8001a42:	6800      	ldr	r0, [r0, #0]
 8001a44:	f001 f8d2 	bl	8002bec <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8001a48:	b14d      	cbz	r5, 8001a5e <HAL_PCD_EP_SetStall+0x4a>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd); 
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 8001a50:	bd38      	pop	{r3, r4, r5, pc}
 8001a52:	f001 057f 	and.w	r5, r1, #127	; 0x7f
{
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001a56:	eb00 1145 	add.w	r1, r0, r5, lsl #5
 8001a5a:	3128      	adds	r1, #40	; 0x28
 8001a5c:	e7e3      	b.n	8001a26 <HAL_PCD_EP_SetStall+0x12>
  
  __HAL_LOCK(hpcd);
  USB_EPSetStall(hpcd->Instance , ep);
  if((ep_addr & 0x7F) == 0)
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001a5e:	f504 717b 	add.w	r1, r4, #1004	; 0x3ec
 8001a62:	6820      	ldr	r0, [r4, #0]
 8001a64:	f001 f95a 	bl	8002d1c <USB_EP0_OutStart>
 8001a68:	e7ef      	b.n	8001a4a <HAL_PCD_EP_SetStall+0x36>
 8001a6a:	bf00      	nop

08001a6c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a6c:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
 8001a6e:	b2cb      	uxtb	r3, r1
 8001a70:	061a      	lsls	r2, r3, #24
 8001a72:	d41a      	bmi.n	8001aaa <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a74:	460a      	mov	r2, r1
 8001a76:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8001a7a:	f501 7102 	add.w	r1, r1, #520	; 0x208
  }
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001a7e:	09db      	lsrs	r3, r3, #7
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0;
 8001a80:	2500      	movs	r5, #0
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001a82:	704b      	strb	r3, [r1, #1]
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
 8001a84:	700a      	strb	r2, [r1, #0]
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0;
 8001a86:	708d      	strb	r5, [r1, #2]
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 8001a88:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_PCD_EP_ClrStall+0x28>
 8001a90:	2002      	movs	r0, #2
  USB_EPClearStall(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8001a92:	bd38      	pop	{r3, r4, r5, pc}
 8001a94:	4604      	mov	r4, r0
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 8001a96:	2301      	movs	r3, #1
 8001a98:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  USB_EPClearStall(hpcd->Instance , ep);
 8001a9c:	6800      	ldr	r0, [r0, #0]
 8001a9e:	f001 f8df 	bl	8002c60 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001aa2:	f884 53e8 	strb.w	r5, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 8001aa6:	4628      	mov	r0, r5
 8001aa8:	bd38      	pop	{r3, r4, r5, pc}
 8001aaa:	f001 027f 	and.w	r2, r1, #127	; 0x7f
{
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001aae:	eb00 1142 	add.w	r1, r0, r2, lsl #5
 8001ab2:	3128      	adds	r1, #40	; 0x28
 8001ab4:	e7e3      	b.n	8001a7e <HAL_PCD_EP_ClrStall+0x12>
 8001ab6:	bf00      	nop

08001ab8 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8001ab8:	b188      	cbz	r0, 8001ade <USBD_Init+0x26>
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8001aba:	b508      	push	{r3, lr}
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8001abc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001ac0:	b113      	cbz	r3, 8001ac8 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8001ac8:	b109      	cbz	r1, 8001ace <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8001aca:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8001ace:	2301      	movs	r3, #1
  pdev->id = id;
 8001ad0:	7002      	strb	r2, [r0, #0]
  {
    pdev->pDesc = pdesc;
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8001ad2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8001ad6:	f002 f931 	bl	8003d3c <USBD_LL_Init>
  
  return USBD_OK; 
 8001ada:	2000      	movs	r0, #0
 8001adc:	bd08      	pop	{r3, pc}
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8001ade:	2002      	movs	r0, #2
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop

08001ae4 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8001ae4:	b119      	cbz	r1, 8001aee <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8001ae6:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8001aea:	2000      	movs	r0, #0
 8001aec:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8001aee:	2002      	movs	r0, #2
  }
  
  return status;
}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop

08001af4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8001af4:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8001af6:	f002 f961 	bl	8003dbc <USBD_LL_Start>
  
  return USBD_OK;  
}
 8001afa:	2000      	movs	r0, #0
 8001afc:	bd08      	pop	{r3, pc}
 8001afe:	bf00      	nop

08001b00 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8001b00:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8001b02:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001b06:	b113      	cbz	r3, 8001b0e <USBD_SetClassConfig+0xe>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4798      	blx	r3
 8001b0c:	b108      	cbz	r0, 8001b12 <USBD_SetClassConfig+0x12>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8001b0e:	2002      	movs	r0, #2
 8001b10:	bd08      	pop	{r3, pc}
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8001b12:	bd08      	pop	{r3, pc}

08001b14 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8001b14:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8001b16:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4798      	blx	r3
  return USBD_OK;
}
 8001b1e:	2000      	movs	r0, #0
 8001b20:	bd08      	pop	{r3, pc}
 8001b22:	bf00      	nop

08001b24 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8001b24:	b538      	push	{r3, r4, r5, lr}
 8001b26:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8001b28:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8001b2c:	4628      	mov	r0, r5
 8001b2e:	f003 ff67 	bl	8005a00 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8001b32:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8001b36:	2001      	movs	r0, #1
  pdev->ep0_data_len = pdev->request.wLength;
 8001b38:	f8b4 220e 	ldrh.w	r2, [r4, #526]	; 0x20e
  
  switch (pdev->request.bmRequest & 0x1F) 
 8001b3c:	f001 031f 	and.w	r3, r1, #31
 8001b40:	4283      	cmp	r3, r0
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8001b42:	f8c4 01f4 	str.w	r0, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8001b46:	f8c4 21f8 	str.w	r2, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8001b4a:	d015      	beq.n	8001b78 <USBD_LL_SetupStage+0x54>
 8001b4c:	d30e      	bcc.n	8001b6c <USBD_LL_SetupStage+0x48>
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d006      	beq.n	8001b60 <USBD_LL_SetupStage+0x3c>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8001b52:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8001b56:	4620      	mov	r0, r4
 8001b58:	f002 f94a 	bl	8003df0 <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	bd38      	pop	{r3, r4, r5, pc}
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8001b60:	4629      	mov	r1, r5
 8001b62:	4620      	mov	r0, r4
 8001b64:	f003 fee4 	bl	8005930 <USBD_StdEPReq>
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
    break;
  }  
  return USBD_OK;  
}
 8001b68:	2000      	movs	r0, #0
 8001b6a:	bd38      	pop	{r3, r4, r5, pc}
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	4620      	mov	r0, r4
 8001b70:	f003 fd70 	bl	8005654 <USBD_StdDevReq>
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
    break;
  }  
  return USBD_OK;  
}
 8001b74:	2000      	movs	r0, #0
 8001b76:	bd38      	pop	{r3, r4, r5, pc}
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8001b78:	4629      	mov	r1, r5
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f003 feba 	bl	80058f4 <USBD_StdItfReq>
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
    break;
  }  
  return USBD_OK;  
}
 8001b80:	2000      	movs	r0, #0
 8001b82:	bd38      	pop	{r3, r4, r5, pc}

08001b84 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8001b84:	b510      	push	{r4, lr}
 8001b86:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8001b88:	b931      	cbnz	r1, 8001b98 <USBD_LL_DataOutStage+0x14>
 8001b8a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8001b8c:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8001b90:	2a03      	cmp	r2, #3
 8001b92:	d00c      	beq.n	8001bae <USBD_LL_DataOutStage+0x2a>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8001b94:	2000      	movs	r0, #0
 8001b96:	bd10      	pop	{r4, pc}
        }
        USBD_CtlSendStatus(pdev);
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8001b98:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f8      	beq.n	8001b94 <USBD_LL_DataOutStage+0x10>
 8001ba2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8001ba6:	2a03      	cmp	r2, #3
 8001ba8:	d1f4      	bne.n	8001b94 <USBD_LL_DataOutStage+0x10>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8001baa:	4798      	blx	r3
 8001bac:	e7f2      	b.n	8001b94 <USBD_LL_DataOutStage+0x10>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
 8001bae:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8001bb2:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8001bb6:	4291      	cmp	r1, r2
 8001bb8:	d80c      	bhi.n	8001bd4 <USBD_LL_DataOutStage+0x50>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8001bba:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	b11b      	cbz	r3, 8001bca <USBD_LL_DataOutStage+0x46>
 8001bc2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8001bc6:	2a03      	cmp	r2, #3
 8001bc8:	d00f      	beq.n	8001bea <USBD_LL_DataOutStage+0x66>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
        }
        USBD_CtlSendStatus(pdev);
 8001bca:	4620      	mov	r0, r4
 8001bcc:	f004 f818 	bl	8005c00 <USBD_CtlSendStatus>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	bd10      	pop	{r4, pc}
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8001bd4:	1a89      	subs	r1, r1, r2
       
        USBD_CtlContinueRx (pdev, 
 8001bd6:	428a      	cmp	r2, r1
 8001bd8:	bf28      	it	cs
 8001bda:	460a      	movcs	r2, r1
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8001bdc:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
 8001be0:	b292      	uxth	r2, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	f004 f804 	bl	8005bf0 <USBD_CtlContinueRx>
 8001be8:	e7d4      	b.n	8001b94 <USBD_LL_DataOutStage+0x10>
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8001bea:	4798      	blx	r3
 8001bec:	e7ed      	b.n	8001bca <USBD_LL_DataOutStage+0x46>
 8001bee:	bf00      	nop

08001bf0 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8001bf0:	b570      	push	{r4, r5, r6, lr}
 8001bf2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8001bf4:	b951      	cbnz	r1, 8001c0c <USBD_LL_DataInStage+0x1c>
 8001bf6:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8001bf8:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8001bfc:	2a02      	cmp	r2, #2
 8001bfe:	d015      	beq.n	8001c2c <USBD_LL_DataInStage+0x3c>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8001c00:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d00c      	beq.n	8001c22 <USBD_LL_DataInStage+0x32>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8001c08:	2000      	movs	r0, #0
 8001c0a:	bd70      	pop	{r4, r5, r6, pc}
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8001c0c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f8      	beq.n	8001c08 <USBD_LL_DataInStage+0x18>
 8001c16:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8001c1a:	2a03      	cmp	r2, #3
 8001c1c:	d1f4      	bne.n	8001c08 <USBD_LL_DataInStage+0x18>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8001c1e:	4798      	blx	r3
 8001c20:	e7f2      	b.n	8001c08 <USBD_LL_DataInStage+0x18>
      }
    }
    if (pdev->dev_test_mode == 1)
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8001c28:	2000      	movs	r0, #0
 8001c2a:	bd70      	pop	{r4, r5, r6, pc}
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
    {
      if(pep->rem_length > pep->maxpacket)
 8001c2c:	69c6      	ldr	r6, [r0, #28]
 8001c2e:	6a02      	ldr	r2, [r0, #32]
 8001c30:	4296      	cmp	r6, r2
 8001c32:	d823      	bhi.n	8001c7c <USBD_LL_DataInStage+0x8c>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8001c34:	6983      	ldr	r3, [r0, #24]
 8001c36:	fbb3 f5f2 	udiv	r5, r3, r2
 8001c3a:	fb02 3515 	mls	r5, r2, r5, r3
 8001c3e:	b98d      	cbnz	r5, 8001c64 <USBD_LL_DataInStage+0x74>
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d80f      	bhi.n	8001c64 <USBD_LL_DataInStage+0x74>
           (pep->total_length >= pep->maxpacket) &&
 8001c44:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d20b      	bcs.n	8001c64 <USBD_LL_DataInStage+0x74>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8001c4c:	462a      	mov	r2, r5
 8001c4e:	f003 ffb7 	bl	8005bc0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8001c52:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8001c56:	462b      	mov	r3, r5
 8001c58:	462a      	mov	r2, r5
 8001c5a:	4629      	mov	r1, r5
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f002 f8f7 	bl	8003e50 <USBD_LL_PrepareReceive>
 8001c62:	e7cd      	b.n	8001c00 <USBD_LL_DataInStage+0x10>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8001c64:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	b11b      	cbz	r3, 8001c74 <USBD_LL_DataInStage+0x84>
 8001c6c:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8001c70:	2a03      	cmp	r2, #3
 8001c72:	d00b      	beq.n	8001c8c <USBD_LL_DataInStage+0x9c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
          }          
          USBD_CtlReceiveStatus(pdev);
 8001c74:	4620      	mov	r0, r4
 8001c76:	f003 ffcf 	bl	8005c18 <USBD_CtlReceiveStatus>
 8001c7a:	e7c1      	b.n	8001c00 <USBD_LL_DataInStage+0x10>
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8001c7c:	1ab2      	subs	r2, r6, r2
 8001c7e:	460d      	mov	r5, r1
 8001c80:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8001c82:	4619      	mov	r1, r3
 8001c84:	b292      	uxth	r2, r2
 8001c86:	f003 ff9b 	bl	8005bc0 <USBD_CtlContinueSendData>
 8001c8a:	e7e4      	b.n	8001c56 <USBD_LL_DataInStage+0x66>
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	4798      	blx	r3
 8001c90:	e7f0      	b.n	8001c74 <USBD_LL_DataInStage+0x84>
 8001c92:	bf00      	nop

08001c94 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8001c94:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8001c96:	2340      	movs	r3, #64	; 0x40
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8001c98:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8001c9a:	461d      	mov	r5, r3
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	f002 f894 	bl	8003dcc <USBD_LL_OpenEP>
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8001ca4:	462b      	mov	r3, r5
 8001ca6:	2200      	movs	r2, #0
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8001ca8:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8001cac:	4620      	mov	r0, r4
 8001cae:	2180      	movs	r1, #128	; 0x80
 8001cb0:	f002 f88c 	bl	8003dcc <USBD_LL_OpenEP>
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 8001cb4:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8001cb8:	2201      	movs	r2, #1
  USBD_LL_OpenEP(pdev,
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8001cba:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8001cbc:	f884 21fc 	strb.w	r2, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8001cc0:	b12b      	cbz	r3, 8001cce <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8001cc2:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8001cc6:	7921      	ldrb	r1, [r4, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	4620      	mov	r0, r4
 8001ccc:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8001cce:	2000      	movs	r0, #0
 8001cd0:	bd38      	pop	{r3, r4, r5, pc}
 8001cd2:	bf00      	nop

08001cd4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8001cd4:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop

08001cdc <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8001cdc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8001ce0:	2304      	movs	r3, #4
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8001ce2:	f880 21fd 	strb.w	r2, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8001ce6:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8001cea:	2000      	movs	r0, #0
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop

08001cf0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8001cf0:	4603      	mov	r3, r0
  pdev->dev_state = pdev->dev_old_state;  
 8001cf2:	f890 21fd 	ldrb.w	r2, [r0, #509]	; 0x1fd
  return USBD_OK;
}
 8001cf6:	2000      	movs	r0, #0
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8001cf8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop

08001d00 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8001d00:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8001d04:	2a03      	cmp	r2, #3
 8001d06:	d001      	beq.n	8001d0c <USBD_LL_SOF+0xc>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 8001d08:	2000      	movs	r0, #0
 8001d0a:	4770      	bx	lr
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8001d0c:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
  {
    if(pdev->pClass->SOF != NULL)
 8001d0e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	b103      	cbz	r3, 8001d18 <USBD_LL_SOF+0x18>
    {
      pdev->pClass->SOF(pdev);
 8001d16:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8001d18:	2000      	movs	r0, #0
 8001d1a:	bd08      	pop	{r3, pc}

08001d1c <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8001d1c:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001d1e:	f003 ff87 	bl	8005c30 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d22:	2001      	movs	r0, #1
 8001d24:	f002 fa36 	bl	8004194 <osDelay>
 8001d28:	e7fb      	b.n	8001d22 <StartDefaultTask+0x6>
 8001d2a:	bf00      	nop

08001d2c <LedFlash>:
  /* USER CODE END 5 */ 
}

/* LedFlash function */
void LedFlash(void const * argument)
{
 8001d2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LedFlash */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8001d2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d32:	4804      	ldr	r0, [pc, #16]	; (8001d44 <LedFlash+0x18>)
 8001d34:	f001 fd32 	bl	800379c <HAL_GPIO_TogglePin>
	  osDelay(500);
 8001d38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d3c:	f002 fa2a 	bl	8004194 <osDelay>
 8001d40:	e7f5      	b.n	8001d2e <LedFlash+0x2>
 8001d42:	bf00      	nop
 8001d44:	40011000 	.word	0x40011000

08001d48 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001d48:	b570      	push	{r4, r5, r6, lr}
 8001d4a:	b094      	sub	sp, #80	; 0x50
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d4c:	2400      	movs	r4, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d52:	2301      	movs	r3, #1
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d54:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d56:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8001d5a:	260d      	movs	r6, #13
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001d5c:	a80a      	add	r0, sp, #40	; 0x28
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d5e:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d60:	9212      	str	r2, [sp, #72]	; 0x48

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8001d62:	960a      	str	r6, [sp, #40]	; 0x28
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d64:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d66:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d68:	9113      	str	r1, [sp, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d6a:	260f      	movs	r6, #15
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d6c:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d6e:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001d70:	f7fe fc32 	bl	80005d8 <HAL_RCC_OscConfig>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8001d74:	4629      	mov	r1, r5

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8001d7a:	a805      	add	r0, sp, #20

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d7c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d7e:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d80:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d82:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d84:	9605      	str	r6, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8001d86:	f7fe ff13 	bl	8000bb0 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 8001d8a:	2113      	movs	r1, #19
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d8c:	f44f 7280 	mov.w	r2, #256	; 0x100
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001d90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  PeriphClkInit.UsbClockSelection = RCC_USBPLLCLK_DIV1_5;
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001d94:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 8001d96:	9101      	str	r1, [sp, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d98:	9202      	str	r2, [sp, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001d9a:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBPLLCLK_DIV1_5;
 8001d9c:	9404      	str	r4, [sp, #16]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001d9e:	f7fe f9b5 	bl	800010c <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001da2:	f7ff f841 	bl	8000e28 <HAL_RCC_GetHCLKFreq>
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <SystemClock_Config+0x80>)
 8001da8:	fba3 3000 	umull	r3, r0, r3, r0
 8001dac:	0980      	lsrs	r0, r0, #6
 8001dae:	f7fe fb87 	bl	80004c0 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001db2:	2004      	movs	r0, #4
 8001db4:	f7fe fb9c 	bl	80004f0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001db8:	4622      	mov	r2, r4
 8001dba:	4631      	mov	r1, r6
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f7fe fb3a 	bl	8000438 <HAL_NVIC_SetPriority>
}
 8001dc4:	b014      	add	sp, #80	; 0x50
 8001dc6:	bd70      	pop	{r4, r5, r6, pc}
 8001dc8:	10624dd3 	.word	0x10624dd3

08001dcc <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8001dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 8001dd0:	4db1      	ldr	r5, [pc, #708]	; (8002098 <main+0x2cc>)
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8001dd2:	b095      	sub	sp, #84	; 0x54
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dd4:	f7fe fad6 	bl	8000384 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001dd8:	f7ff ffb6 	bl	8001d48 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 8001ddc:	69ab      	ldr	r3, [r5, #24]
  __GPIOD_CLK_ENABLE();
  __GPIOA_CLK_ENABLE();
  __GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedPin_GPIO_Port, LedPin_Pin, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 8001de0:	f043 0310 	orr.w	r3, r3, #16
 8001de4:	61ab      	str	r3, [r5, #24]
 8001de6:	69ab      	ldr	r3, [r5, #24]
    /**Common config 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001de8:	4614      	mov	r4, r2
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	9302      	str	r3, [sp, #8]
 8001df0:	9b02      	ldr	r3, [sp, #8]
  __GPIOD_CLK_ENABLE();
 8001df2:	69ab      	ldr	r3, [r5, #24]
  __GPIOA_CLK_ENABLE();
  __GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedPin_GPIO_Port, LedPin_Pin, GPIO_PIN_RESET);
 8001df4:	f44f 5100 	mov.w	r1, #8192	; 0x2000

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
  __GPIOD_CLK_ENABLE();
 8001df8:	f043 0320 	orr.w	r3, r3, #32
 8001dfc:	61ab      	str	r3, [r5, #24]
 8001dfe:	69ab      	ldr	r3, [r5, #24]
  __GPIOA_CLK_ENABLE();
  __GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedPin_GPIO_Port, LedPin_Pin, GPIO_PIN_RESET);
 8001e00:	48a6      	ldr	r0, [pc, #664]	; (800209c <main+0x2d0>)

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
  __GPIOD_CLK_ENABLE();
 8001e02:	f003 0320 	and.w	r3, r3, #32
 8001e06:	9303      	str	r3, [sp, #12]
 8001e08:	9b03      	ldr	r3, [sp, #12]
  __GPIOA_CLK_ENABLE();
 8001e0a:	69ab      	ldr	r3, [r5, #24]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedPin_GPIO_Port, LedPin_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LedPin_Pin */
  GPIO_InitStruct.Pin = LedPin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0c:	2701      	movs	r7, #1
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
  __GPIOD_CLK_ENABLE();
  __GPIOA_CLK_ENABLE();
 8001e0e:	f043 0304 	orr.w	r3, r3, #4
 8001e12:	61ab      	str	r3, [r5, #24]
 8001e14:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(LedPin_GPIO_Port, LedPin_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LedPin_Pin */
  GPIO_InitStruct.Pin = LedPin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001e16:	f04f 0803 	mov.w	r8, #3
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
  __GPIOD_CLK_ENABLE();
  __GPIOA_CLK_ENABLE();
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	9304      	str	r3, [sp, #16]
 8001e20:	9b04      	ldr	r3, [sp, #16]
  __GPIOB_CLK_ENABLE();
 8001e22:	69ab      	ldr	r3, [r5, #24]

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8001e24:	4e9e      	ldr	r6, [pc, #632]	; (80020a0 <main+0x2d4>)

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
  __GPIOD_CLK_ENABLE();
  __GPIOA_CLK_ENABLE();
  __GPIOB_CLK_ENABLE();
 8001e26:	f043 0308 	orr.w	r3, r3, #8
 8001e2a:	61ab      	str	r3, [r5, #24]
 8001e2c:	69ab      	ldr	r3, [r5, #24]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 2;
 8001e2e:	f04f 0902 	mov.w	r9, #2

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
  __GPIOD_CLK_ENABLE();
  __GPIOA_CLK_ENABLE();
  __GPIOB_CLK_ENABLE();
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	9305      	str	r3, [sp, #20]
 8001e38:	9b05      	ldr	r3, [sp, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedPin_GPIO_Port, LedPin_Pin, GPIO_PIN_RESET);
 8001e3a:	f001 fcab 	bl	8003794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LedPin_Pin */
  GPIO_InitStruct.Pin = LedPin_Pin;
 8001e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(LedPin_GPIO_Port, &GPIO_InitStruct);
 8001e42:	a90d      	add	r1, sp, #52	; 0x34
 8001e44:	4895      	ldr	r0, [pc, #596]	; (800209c <main+0x2d0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedPin_GPIO_Port, LedPin_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LedPin_Pin */
  GPIO_InitStruct.Pin = LedPin_Pin;
 8001e46:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e48:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001e4a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  HAL_GPIO_Init(LedPin_GPIO_Port, &GPIO_InitStruct);
 8001e4e:	f001 fbb5 	bl	80035bc <HAL_GPIO_Init>
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e52:	696b      	ldr	r3, [r5, #20]

  /* DMA interrupt init */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001e54:	4622      	mov	r2, r4
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e56:	433b      	orrs	r3, r7
 8001e58:	616b      	str	r3, [r5, #20]
 8001e5a:	696b      	ldr	r3, [r5, #20]

  /* DMA interrupt init */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001e5c:	2105      	movs	r1, #5
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e5e:	403b      	ands	r3, r7
 8001e60:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001e62:	200b      	movs	r0, #11
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e64:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001e66:	f7fe fae7 	bl	8000438 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e6a:	200b      	movs	r0, #11
 8001e6c:	f7fe fb1c 	bl	80004a8 <HAL_NVIC_EnableIRQ>

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8001e70:	498c      	ldr	r1, [pc, #560]	; (80020a4 <main+0x2d8>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e72:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e76:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 5;
 8001e7a:	2505      	movs	r5, #5
  HAL_ADC_Init(&hadc1);
 8001e7c:	4630      	mov	r0, r6
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e7e:	60b2      	str	r2, [r6, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e80:	61f3      	str	r3, [r6, #28]

    /**Common config 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e82:	60f7      	str	r7, [r6, #12]

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8001e84:	6031      	str	r1, [r6, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 5;
 8001e86:	6135      	str	r5, [r6, #16]
    /**Common config 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e88:	6174      	str	r4, [r6, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e8a:	6074      	str	r4, [r6, #4]
  hadc1.Init.NbrOfConversion = 5;
  HAL_ADC_Init(&hadc1);
 8001e8c:	f7ff f926 	bl	80010dc <HAL_ADC_Init>
    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001e90:	a90d      	add	r1, sp, #52	; 0x34
 8001e92:	4630      	mov	r0, r6
  HAL_ADC_Init(&hadc1);

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
 8001e94:	970e      	str	r7, [sp, #56]	; 0x38
  hadc1.Init.NbrOfConversion = 5;
  HAL_ADC_Init(&hadc1);

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e96:	940d      	str	r4, [sp, #52]	; 0x34
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001e98:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001e9a:	f7ff f827 	bl	8000eec <HAL_ADC_ConfigChannel>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 2;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001e9e:	a90d      	add	r1, sp, #52	; 0x34
 8001ea0:	4630      	mov	r0, r6
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ea2:	970d      	str	r7, [sp, #52]	; 0x34
  sConfig.Rank = 2;
 8001ea4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001ea8:	f7ff f820 	bl	8000eec <HAL_ADC_ConfigChannel>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = 3;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001eac:	a90d      	add	r1, sp, #52	; 0x34
 8001eae:	4630      	mov	r0, r6
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = 3;
 8001eb0:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  sConfig.Rank = 2;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 8001eb4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  sConfig.Rank = 3;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001eb8:	f04f 0810 	mov.w	r8, #16

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = 3;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001ebc:	f7ff f816 	bl	8000eec <HAL_ADC_ConfigChannel>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
  sConfig.Rank = 4;
 8001ec0:	f04f 0904 	mov.w	r9, #4
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001ec4:	a90d      	add	r1, sp, #52	; 0x34
 8001ec6:	4630      	mov	r0, r6
  sConfig.Rank = 3;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001ec8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  sConfig.Rank = 4;
 8001ecc:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001ed0:	f7ff f80c 	bl	8000eec <HAL_ADC_ConfigChannel>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
  sConfig.Rank = 5;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001ed4:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.Rank = 4;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001ed6:	2311      	movs	r3, #17
  sConfig.Rank = 5;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001ed8:	4630      	mov	r0, r6
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
  sConfig.Rank = 5;
 8001eda:	950e      	str	r5, [sp, #56]	; 0x38
  sConfig.Rank = 4;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001edc:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.Rank = 5;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001ede:	f7ff f805 	bl	8000eec <HAL_ADC_ConfigChannel>

/* CRC init function */
void MX_CRC_Init(void)
{

  hcrc.Instance = CRC;
 8001ee2:	4b71      	ldr	r3, [pc, #452]	; (80020a8 <main+0x2dc>)
 8001ee4:	4a71      	ldr	r2, [pc, #452]	; (80020ac <main+0x2e0>)
  HAL_CRC_Init(&hcrc);
 8001ee6:	4618      	mov	r0, r3

/* CRC init function */
void MX_CRC_Init(void)
{

  hcrc.Instance = CRC;
 8001ee8:	601a      	str	r2, [r3, #0]
  HAL_CRC_Init(&hcrc);
 8001eea:	f7fe fb0d 	bl	8000508 <HAL_CRC_Init>
void MX_IWDG_Init(void)
{

  hiwdg.Instance = IWDG;
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
  hiwdg.Init.Reload = 4095;
 8001eee:	f640 72ff 	movw	r2, #4095	; 0xfff

/* IWDG init function */
void MX_IWDG_Init(void)
{

  hiwdg.Instance = IWDG;
 8001ef2:	4b6f      	ldr	r3, [pc, #444]	; (80020b0 <main+0x2e4>)
 8001ef4:	496f      	ldr	r1, [pc, #444]	; (80020b4 <main+0x2e8>)
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef DateToUpdate;

    /**Initialize RTC and set the Time and Date 
    */
  hrtc.Instance = RTC;
 8001ef6:	4d70      	ldr	r5, [pc, #448]	; (80020b8 <main+0x2ec>)
{

  hiwdg.Instance = IWDG;
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
  hiwdg.Init.Reload = 4095;
  HAL_IWDG_Init(&hiwdg);
 8001ef8:	4618      	mov	r0, r3

/* IWDG init function */
void MX_IWDG_Init(void)
{

  hiwdg.Instance = IWDG;
 8001efa:	e883 0012 	stmia.w	r3, {r1, r4}
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
  hiwdg.Init.Reload = 4095;
 8001efe:	609a      	str	r2, [r3, #8]
  HAL_IWDG_Init(&hiwdg);
 8001f00:	f7fe fb16 	bl	8000530 <HAL_IWDG_Init>
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef DateToUpdate;

    /**Initialize RTC and set the Time and Date 
    */
  hrtc.Instance = RTC;
 8001f04:	4a6d      	ldr	r2, [pc, #436]	; (80020bc <main+0x2f0>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
  HAL_RTC_Init(&hrtc);
 8001f0a:	4628      	mov	r0, r5
  RTC_DateTypeDef DateToUpdate;

    /**Initialize RTC and set the Time and Date 
    */
  hrtc.Instance = RTC;
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001f0c:	e885 001c 	stmia.w	r5, {r2, r3, r4}
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
  HAL_RTC_Init(&hrtc);
 8001f10:	f003 f84a 	bl	8004fa8 <HAL_RTC_Init>

  sTime.Hours = 0x1;
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;

  HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BCD);
 8001f14:	463a      	mov	r2, r7
 8001f16:	4628      	mov	r0, r5
 8001f18:	a908      	add	r1, sp, #32
  hrtc.Instance = RTC;
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
  HAL_RTC_Init(&hrtc);

  sTime.Hours = 0x1;
 8001f1a:	f88d 7020 	strb.w	r7, [sp, #32]
  sTime.Minutes = 0x0;
 8001f1e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  sTime.Seconds = 0x0;
 8001f22:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22

  HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BCD);
 8001f26:	f002 ff23 	bl	8004d70 <HAL_RTC_SetTime>
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
  DateToUpdate.Month = RTC_MONTH_JANUARY;
  DateToUpdate.Date = 0x1;
  DateToUpdate.Year = 0x10;

  HAL_RTC_SetDate(&hrtc, &DateToUpdate, FORMAT_BCD);
 8001f2a:	463a      	mov	r2, r7
 8001f2c:	4628      	mov	r0, r5
 8001f2e:	a90d      	add	r1, sp, #52	; 0x34
  HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BCD);

  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
  DateToUpdate.Month = RTC_MONTH_JANUARY;
  DateToUpdate.Date = 0x1;
  DateToUpdate.Year = 0x10;
 8001f30:	f88d 8037 	strb.w	r8, [sp, #55]	; 0x37
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;

  HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BCD);

  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f34:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001f38:	f88d 7035 	strb.w	r7, [sp, #53]	; 0x35
  DateToUpdate.Date = 0x1;
 8001f3c:	f88d 7036 	strb.w	r7, [sp, #54]	; 0x36
  DateToUpdate.Year = 0x10;

  HAL_RTC_SetDate(&hrtc, &DateToUpdate, FORMAT_BCD);
 8001f40:	f002 ff8e 	bl	8004e60 <HAL_RTC_SetDate>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 35999;
 8001f44:	f648 429f 	movw	r2, #35999	; 0x8c9f
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 720;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
 8001f48:	f64f 7aff 	movw	sl, #65535	; 0xffff
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8001f4c:	4e5c      	ldr	r6, [pc, #368]	; (80020c0 <main+0x2f4>)
  htim2.Init.Prescaler = 35999;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1000;
 8001f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8001f52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 35999;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1000;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim2);
 8001f56:	4630      	mov	r0, r6

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 35999;
 8001f58:	e886 0006 	stmia.w	r6, {r1, r2}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1000;
 8001f5c:	60f3      	str	r3, [r6, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim2);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f5e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 35999;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f62:	60b4      	str	r4, [r6, #8]
  htim2.Init.Period = 1000;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f64:	6134      	str	r4, [r6, #16]
  HAL_TIM_Base_Init(&htim2);
 8001f66:	f003 faa5 	bl	80054b4 <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 8001f6a:	a90d      	add	r1, sp, #52	; 0x34
 8001f6c:	4630      	mov	r0, r6

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 8001f6e:	4d55      	ldr	r5, [pc, #340]	; (80020c4 <main+0x2f8>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1000;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim2);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f70:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 8001f72:	f003 f8ed 	bl	8005150 <HAL_TIM_ConfigClockSource>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 8001f76:	a908      	add	r1, sp, #32
 8001f78:	4630      	mov	r0, r6
  HAL_TIM_Base_Init(&htim2);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f7a:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 8001f7e:	f003 fe73 	bl	8005c68 <HAL_TIMEx_MasterConfigSynchronization>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 8001f82:	4b51      	ldr	r3, [pc, #324]	; (80020c8 <main+0x2fc>)
  htim3.Init.Prescaler = 720;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim3);
 8001f84:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 720;
 8001f86:	f44f 7b34 	mov.w	fp, #720	; 0x2d0
 8001f8a:	e885 0808 	stmia.w	r5, {r3, fp}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8e:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 65535;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f90:	612c      	str	r4, [r5, #16]
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 720;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
 8001f92:	f8c5 a00c 	str.w	sl, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim3);
 8001f96:	f003 fa8d 	bl	80054b4 <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 8001f9a:	a908      	add	r1, sp, #32
 8001f9c:	4628      	mov	r0, r5

  HAL_TIM_PWM_Init(&htim3);

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 8001f9e:	f10d 0818 	add.w	r8, sp, #24
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim3);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa2:	9708      	str	r7, [sp, #32]
  HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 8001fa4:	f003 f8d4 	bl	8005150 <HAL_TIM_ConfigClockSource>

  HAL_TIM_PWM_Init(&htim3);
 8001fa8:	4628      	mov	r0, r5
 8001faa:	f003 fa9f 	bl	80054ec <HAL_TIM_PWM_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 8001fae:	4628      	mov	r0, r5
 8001fb0:	4641      	mov	r1, r8

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb2:	2660      	movs	r6, #96	; 0x60
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);

  HAL_TIM_PWM_Init(&htim3);

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb4:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb6:	9407      	str	r4, [sp, #28]
  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 8001fb8:	f003 fe56 	bl	8005c68 <HAL_TIMEx_MasterConfigSynchronization>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 8001fbc:	4622      	mov	r2, r4
 8001fbe:	a90d      	add	r1, sp, #52	; 0x34
 8001fc0:	4628      	mov	r0, r5

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fc2:	960d      	str	r6, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001fc4:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fc6:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fc8:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 8001fca:	f003 fad9 	bl	8005580 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 8001fce:	464a      	mov	r2, r9
 8001fd0:	a90d      	add	r1, sp, #52	; 0x34
 8001fd2:	4628      	mov	r0, r5
 8001fd4:	f003 fad4 	bl	8005580 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3);
 8001fd8:	2208      	movs	r2, #8
 8001fda:	a90d      	add	r1, sp, #52	; 0x34
 8001fdc:	4628      	mov	r0, r5
 8001fde:	f003 facf 	bl	8005580 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_MspPostInit(&htim3);
 8001fe2:	4628      	mov	r0, r5

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
 8001fe4:	4d39      	ldr	r5, [pc, #228]	; (80020cc <main+0x300>)

  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);

  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3);

  HAL_TIM_MspPostInit(&htim3);
 8001fe6:	f002 f883 	bl	80040f0 <HAL_TIM_MspPostInit>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
 8001fea:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <main+0x304>)
  htim4.Init.Prescaler = 720;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 65535;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim4);
 8001fec:	4628      	mov	r0, r5

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
 8001fee:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 720;
 8001ff0:	f8c5 b004 	str.w	fp, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff4:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 65535;
 8001ff6:	f8c5 a00c 	str.w	sl, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffa:	612c      	str	r4, [r5, #16]
  HAL_TIM_Base_Init(&htim4);
 8001ffc:	f003 fa5a 	bl	80054b4 <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8002000:	a908      	add	r1, sp, #32
 8002002:	4628      	mov	r0, r5
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 65535;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim4);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002004:	9708      	str	r7, [sp, #32]
  HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8002006:	f003 f8a3 	bl	8005150 <HAL_TIM_ConfigClockSource>

  HAL_TIM_PWM_Init(&htim4);
 800200a:	4628      	mov	r0, r5
 800200c:	f003 fa6e 	bl	80054ec <HAL_TIM_PWM_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8002010:	4641      	mov	r1, r8
 8002012:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);

  HAL_TIM_PWM_Init(&htim4);

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002014:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002016:	9407      	str	r4, [sp, #28]
  HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8002018:	f003 fe26 	bl	8005c68 <HAL_TIMEx_MasterConfigSynchronization>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 800201c:	4622      	mov	r2, r4
 800201e:	a90d      	add	r1, sp, #52	; 0x34
 8002020:	4628      	mov	r0, r5

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002022:	960d      	str	r6, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8002024:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002026:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002028:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 800202a:	f003 faa9 	bl	8005580 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
 800202e:	464a      	mov	r2, r9
 8002030:	a90d      	add	r1, sp, #52	; 0x34
 8002032:	4628      	mov	r0, r5
 8002034:	f003 faa4 	bl	8005580 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3);
 8002038:	a90d      	add	r1, sp, #52	; 0x34
 800203a:	2208      	movs	r2, #8
 800203c:	4628      	mov	r0, r5
 800203e:	f003 fa9f 	bl	8005580 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_MspPostInit(&htim4);
 8002042:	4628      	mov	r0, r5
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002044:	4d23      	ldr	r5, [pc, #140]	; (80020d4 <main+0x308>)

  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);

  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3);

  HAL_TIM_MspPostInit(&htim4);
 8002046:	f002 f853 	bl	80040f0 <HAL_TIM_MspPostInit>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800204a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800204c:	462e      	mov	r6, r5
 800204e:	af08      	add	r7, sp, #32
 8002050:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002052:	f856 3b04 	ldr.w	r3, [r6], #4
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002056:	4621      	mov	r1, r4
 8002058:	a808      	add	r0, sp, #32
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800205a:	603b      	str	r3, [r7, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800205c:	f002 f87e 	bl	800415c <osThreadCreate>
 8002060:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <main+0x30c>)

  /* definition and creation of TaskLedFlash */
  osThreadDef(TaskLedFlash, LedFlash, osPriorityNormal, 0, 64);
 8002062:	af0d      	add	r7, sp, #52	; 0x34
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002064:	6018      	str	r0, [r3, #0]

  /* definition and creation of TaskLedFlash */
  osThreadDef(TaskLedFlash, LedFlash, osPriorityNormal, 0, 64);
 8002066:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002068:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800206a:	6833      	ldr	r3, [r6, #0]
  TaskLedFlashHandle = osThreadCreate(osThread(TaskLedFlash), NULL);
 800206c:	4621      	mov	r1, r4
 800206e:	a80d      	add	r0, sp, #52	; 0x34
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* definition and creation of TaskLedFlash */
  osThreadDef(TaskLedFlash, LedFlash, osPriorityNormal, 0, 64);
 8002070:	603b      	str	r3, [r7, #0]
  TaskLedFlashHandle = osThreadCreate(osThread(TaskLedFlash), NULL);
 8002072:	f002 f873 	bl	800415c <osThreadCreate>
 8002076:	4b19      	ldr	r3, [pc, #100]	; (80020dc <main+0x310>)
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of InputFromUsb */
  osMessageQDef(InputFromUsb, 128, uint8_t);
 8002078:	3518      	adds	r5, #24
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* definition and creation of TaskLedFlash */
  osThreadDef(TaskLedFlash, LedFlash, osPriorityNormal, 0, 64);
  TaskLedFlashHandle = osThreadCreate(osThread(TaskLedFlash), NULL);
 800207a:	6018      	str	r0, [r3, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of InputFromUsb */
  osMessageQDef(InputFromUsb, 128, uint8_t);
 800207c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002080:	e888 0003 	stmia.w	r8, {r0, r1}
  InputFromUsbHandle = osMessageCreate(osMessageQ(InputFromUsb), NULL);
 8002084:	4621      	mov	r1, r4
 8002086:	4640      	mov	r0, r8
 8002088:	f002 f88c 	bl	80041a4 <osMessageCreate>
 800208c:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <main+0x314>)
 800208e:	6018      	str	r0, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 8002090:	f002 f85e 	bl	8004150 <osKernelStart>
 8002094:	e7fe      	b.n	8002094 <main+0x2c8>
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	40011000 	.word	0x40011000
 80020a0:	20001dc4 	.word	0x20001dc4
 80020a4:	40012400 	.word	0x40012400
 80020a8:	20001d78 	.word	0x20001d78
 80020ac:	40023000 	.word	0x40023000
 80020b0:	20001d68 	.word	0x20001d68
 80020b4:	40003000 	.word	0x40003000
 80020b8:	20001e2c 	.word	0x20001e2c
 80020bc:	40002800 	.word	0x40002800
 80020c0:	20001e40 	.word	0x20001e40
 80020c4:	20001d88 	.word	0x20001d88
 80020c8:	40000400 	.word	0x40000400
 80020cc:	20001d2c 	.word	0x20001d2c
 80020d0:	40000800 	.word	0x40000800
 80020d4:	08006124 	.word	0x08006124
 80020d8:	20001d28 	.word	0x20001d28
 80020dc:	20001d84 	.word	0x20001d84
 80020e0:	20001d80 	.word	0x20001d80

080020e4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80020e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80020e6:	4c12      	ldr	r4, [pc, #72]	; (8002130 <prvCheckForValidListAndQueue+0x4c>)
static void prvCheckForValidListAndQueue( void )
{
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80020e8:	f002 fb80 	bl	80047ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80020ec:	6825      	ldr	r5, [r4, #0]
 80020ee:	b11d      	cbz	r5, 80020f8 <prvCheckForValidListAndQueue+0x14>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80020f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80020f4:	f002 bb98 	b.w	8004828 <vPortExitCritical>
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 80020f8:	1d27      	adds	r7, r4, #4
 80020fa:	4638      	mov	r0, r7
			vListInitialise( &xActiveTimerList2 );
 80020fc:	f104 0618 	add.w	r6, r4, #24
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 8002100:	f001 febc 	bl	8003e7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002104:	4630      	mov	r0, r6
 8002106:	f001 feb9 	bl	8003e7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800210a:	462a      	mov	r2, r5
 800210c:	210c      	movs	r1, #12
 800210e:	200a      	movs	r0, #10
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
 8002110:	62e7      	str	r7, [r4, #44]	; 0x2c
			pxOverflowTimerList = &xActiveTimerList2;
 8002112:	6326      	str	r6, [r4, #48]	; 0x30
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002114:	f002 f920 	bl	8004358 <xQueueGenericCreate>
 8002118:	6020      	str	r0, [r4, #0]
			configASSERT( xTimerQueue );
 800211a:	b130      	cbz	r0, 800212a <prvCheckForValidListAndQueue+0x46>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800211c:	4905      	ldr	r1, [pc, #20]	; (8002134 <prvCheckForValidListAndQueue+0x50>)
 800211e:	f002 fadb 	bl	80046d8 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8002122:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002126:	f002 bb7f 	b.w	8004828 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
			configASSERT( xTimerQueue );
 800212a:	f002 fb49 	bl	80047c0 <ulPortSetInterruptMask>
 800212e:	e7fe      	b.n	800212e <prvCheckForValidListAndQueue+0x4a>
 8002130:	200009a8 	.word	0x200009a8
 8002134:	08006170 	.word	0x08006170

08002138 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8002138:	4291      	cmp	r1, r2
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800213a:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800213c:	6100      	str	r0, [r0, #16]

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800213e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8002140:	d805      	bhi.n	800214e <prvInsertTimerInActiveList+0x16>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8002142:	6981      	ldr	r1, [r0, #24]
 8002144:	1ad2      	subs	r2, r2, r3
 8002146:	428a      	cmp	r2, r1
 8002148:	d30c      	bcc.n	8002164 <prvInsertTimerInActiveList+0x2c>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800214a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800214c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800214e:	429a      	cmp	r2, r3
 8002150:	d201      	bcs.n	8002156 <prvInsertTimerInActiveList+0x1e>
 8002152:	4299      	cmp	r1, r3
 8002154:	d2f9      	bcs.n	800214a <prvInsertTimerInActiveList+0x12>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002156:	4b07      	ldr	r3, [pc, #28]	; (8002174 <prvInsertTimerInActiveList+0x3c>)
 8002158:	1d01      	adds	r1, r0, #4
 800215a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800215c:	f001 feac 	bl	8003eb8 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
 8002160:	2000      	movs	r0, #0
 8002162:	bd08      	pop	{r3, pc}
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <prvInsertTimerInActiveList+0x3c>)
 8002166:	1d01      	adds	r1, r0, #4
 8002168:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800216a:	f001 fea5 	bl	8003eb8 <vListInsert>
 800216e:	2000      	movs	r0, #0
 8002170:	bd08      	pop	{r3, pc}
 8002172:	bf00      	nop
 8002174:	200009a8 	.word	0x200009a8

08002178 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002178:	b500      	push	{lr}
 800217a:	b085      	sub	sp, #20

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800217c:	f7ff ffb2 	bl	80020e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002180:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <xTimerCreateTimerTask+0x34>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	b173      	cbz	r3, 80021a4 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8002186:	2300      	movs	r3, #0
 8002188:	2203      	movs	r2, #3
 800218a:	e88d 000c 	stmia.w	sp, {r2, r3}
 800218e:	9303      	str	r3, [sp, #12]
 8002190:	9302      	str	r3, [sp, #8]
 8002192:	2280      	movs	r2, #128	; 0x80
 8002194:	4906      	ldr	r1, [pc, #24]	; (80021b0 <xTimerCreateTimerTask+0x38>)
 8002196:	4807      	ldr	r0, [pc, #28]	; (80021b4 <xTimerCreateTimerTask+0x3c>)
 8002198:	f000 fe0e 	bl	8002db8 <xTaskGenericCreate>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800219c:	b110      	cbz	r0, 80021a4 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
 800219e:	b005      	add	sp, #20
 80021a0:	f85d fb04 	ldr.w	pc, [sp], #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80021a4:	f002 fb0c 	bl	80047c0 <ulPortSetInterruptMask>
 80021a8:	e7fe      	b.n	80021a8 <xTimerCreateTimerTask+0x30>
 80021aa:	bf00      	nop
 80021ac:	200009a8 	.word	0x200009a8
 80021b0:	08006178 	.word	0x08006178
 80021b4:	08002289 	.word	0x08002289

080021b8 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80021b8:	b530      	push	{r4, r5, lr}
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80021ba:	4d14      	ldr	r5, [pc, #80]	; (800220c <xTimerGenericCommand+0x54>)
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80021bc:	b085      	sub	sp, #20
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80021be:	682c      	ldr	r4, [r5, #0]
 80021c0:	b304      	cbz	r4, 8002204 <xTimerGenericCommand+0x4c>
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80021c2:	2905      	cmp	r1, #5
	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80021c4:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80021c6:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80021c8:	9003      	str	r0, [sp, #12]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80021ca:	dc0b      	bgt.n	80021e4 <xTimerGenericCommand+0x2c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80021cc:	f001 f942 	bl	8003454 <xTaskGetSchedulerState>
 80021d0:	2802      	cmp	r0, #2
 80021d2:	d00f      	beq.n	80021f4 <xTimerGenericCommand+0x3c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80021d4:	2300      	movs	r3, #0
 80021d6:	6828      	ldr	r0, [r5, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	a901      	add	r1, sp, #4
 80021dc:	f002 f8e4 	bl	80043a8 <xQueueGenericSend>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 80021e0:	b005      	add	sp, #20
 80021e2:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80021e4:	461a      	mov	r2, r3
 80021e6:	4620      	mov	r0, r4
 80021e8:	2300      	movs	r3, #0
 80021ea:	a901      	add	r1, sp, #4
 80021ec:	f002 f976 	bl	80044dc <xQueueGenericSendFromISR>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 80021f0:	b005      	add	sp, #20
 80021f2:	bd30      	pop	{r4, r5, pc}

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80021f4:	6828      	ldr	r0, [r5, #0]
 80021f6:	2300      	movs	r3, #0
 80021f8:	9a08      	ldr	r2, [sp, #32]
 80021fa:	a901      	add	r1, sp, #4
 80021fc:	f002 f8d4 	bl	80043a8 <xQueueGenericSend>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8002200:	b005      	add	sp, #20
 8002202:	bd30      	pop	{r4, r5, pc}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
 8002204:	4620      	mov	r0, r4
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8002206:	b005      	add	sp, #20
 8002208:	bd30      	pop	{r4, r5, pc}
 800220a:	bf00      	nop
 800220c:	200009a8 	.word	0x200009a8

08002210 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002214:	4e1b      	ldr	r6, [pc, #108]	; (8002284 <prvSwitchTimerLists+0x74>)
 8002216:	b083      	sub	sp, #12
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002218:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800221c:	46b1      	mov	r9, r6
 800221e:	e00c      	b.n	800223a <prvSwitchTimerLists+0x2a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002220:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002222:	68dc      	ldr	r4, [r3, #12]
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002224:	681f      	ldr	r7, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002226:	1d25      	adds	r5, r4, #4
 8002228:	4628      	mov	r0, r5
 800222a:	f001 fe5f 	bl	8003eec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800222e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002230:	4620      	mov	r0, r4
 8002232:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002234:	69e3      	ldr	r3, [r4, #28]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d00a      	beq.n	8002250 <prvSwitchTimerLists+0x40>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800223a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800223c:	4911      	ldr	r1, [pc, #68]	; (8002284 <prvSwitchTimerLists+0x74>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	2a00      	cmp	r2, #0
 8002242:	d1ed      	bne.n	8002220 <prvSwitchTimerLists+0x10>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8002244:	6b0a      	ldr	r2, [r1, #48]	; 0x30
	pxOverflowTimerList = pxTemp;
 8002246:	630b      	str	r3, [r1, #48]	; 0x30
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8002248:	62ca      	str	r2, [r1, #44]	; 0x2c
	pxOverflowTimerList = pxTemp;
}
 800224a:	b003      	add	sp, #12
 800224c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002250:	69a2      	ldr	r2, [r4, #24]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002252:	2300      	movs	r3, #0
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002254:	443a      	add	r2, r7
			if( xReloadTime > xNextExpireTime )
 8002256:	4297      	cmp	r7, r2
 8002258:	d207      	bcs.n	800226a <prvSwitchTimerLists+0x5a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800225a:	6062      	str	r2, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800225c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800225e:	4629      	mov	r1, r5
 8002260:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8002264:	f001 fe28 	bl	8003eb8 <vListInsert>
 8002268:	e7e7      	b.n	800223a <prvSwitchTimerLists+0x2a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800226a:	f8cd 8000 	str.w	r8, [sp]
 800226e:	463a      	mov	r2, r7
 8002270:	4620      	mov	r0, r4
 8002272:	4619      	mov	r1, r3
 8002274:	f7ff ffa0 	bl	80021b8 <xTimerGenericCommand>
				configASSERT( xResult );
 8002278:	2800      	cmp	r0, #0
 800227a:	d1de      	bne.n	800223a <prvSwitchTimerLists+0x2a>
 800227c:	f002 faa0 	bl	80047c0 <ulPortSetInterruptMask>
 8002280:	e7fe      	b.n	8002280 <prvSwitchTimerLists+0x70>
 8002282:	bf00      	nop
 8002284:	200009a8 	.word	0x200009a8

08002288 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800228c:	4c58      	ldr	r4, [pc, #352]	; (80023f0 <prvTimerTask+0x168>)
 800228e:	b087      	sub	sp, #28
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002290:	4627      	mov	r7, r4
 8002292:	f04f 0801 	mov.w	r8, #1
 8002296:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if( *pxListWasEmpty == pdFALSE )
 8002298:	681e      	ldr	r6, [r3, #0]
 800229a:	2e00      	cmp	r6, #0
 800229c:	d03d      	beq.n	800231a <prvTimerTask+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80022a2:	f000 fe89 	bl	8002fb8 <vTaskSuspendAll>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80022a6:	f000 fe91 	bl	8002fcc <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 80022aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80022ac:	4605      	mov	r5, r0

	if( xTimeNow < xLastTime )
 80022ae:	4298      	cmp	r0, r3
 80022b0:	d33b      	bcc.n	800232a <prvTimerTask+0xa2>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80022b2:	4286      	cmp	r6, r0
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 80022b4:	6378      	str	r0, [r7, #52]	; 0x34
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80022b6:	d946      	bls.n	8002346 <prvTimerTask+0xbe>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 80022b8:	1b71      	subs	r1, r6, r5
 80022ba:	6820      	ldr	r0, [r4, #0]
 80022bc:	f002 fa22 	bl	8004704 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 80022c0:	f000 ff1c 	bl	80030fc <xTaskResumeAll>
 80022c4:	2800      	cmp	r0, #0
 80022c6:	d03b      	beq.n	8002340 <prvTimerTask+0xb8>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80022c8:	2300      	movs	r3, #0
 80022ca:	461a      	mov	r2, r3
 80022cc:	a903      	add	r1, sp, #12
 80022ce:	6820      	ldr	r0, [r4, #0]
 80022d0:	f002 f95c 	bl	800458c <xQueueGenericReceive>
 80022d4:	2800      	cmp	r0, #0
 80022d6:	d0de      	beq.n	8002296 <prvTimerTask+0xe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80022d8:	9b03      	ldr	r3, [sp, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	dbf4      	blt.n	80022c8 <prvTimerTask+0x40>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80022de:	9e05      	ldr	r6, [sp, #20]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80022e0:	6973      	ldr	r3, [r6, #20]
 80022e2:	b113      	cbz	r3, 80022ea <prvTimerTask+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80022e4:	1d30      	adds	r0, r6, #4
 80022e6:	f001 fe01 	bl	8003eec <uxListRemove>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80022ea:	f000 fe6f 	bl	8002fcc <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 80022ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80022f0:	4605      	mov	r5, r0

	if( xTimeNow < xLastTime )
 80022f2:	4298      	cmp	r0, r3
 80022f4:	d321      	bcc.n	800233a <prvTimerTask+0xb2>
 80022f6:	9b03      	ldr	r3, [sp, #12]
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 80022f8:	6365      	str	r5, [r4, #52]	; 0x34
 80022fa:	2b09      	cmp	r3, #9
 80022fc:	d8e4      	bhi.n	80022c8 <prvTimerTask+0x40>
 80022fe:	fa08 f303 	lsl.w	r3, r8, r3
 8002302:	f413 7904 	ands.w	r9, r3, #528	; 0x210
 8002306:	d166      	bne.n	80023d6 <prvTimerTask+0x14e>
 8002308:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 800230c:	d144      	bne.n	8002398 <prvTimerTask+0x110>
 800230e:	069b      	lsls	r3, r3, #26
 8002310:	d5da      	bpl.n	80022c8 <prvTimerTask+0x40>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
 8002312:	4630      	mov	r0, r6
 8002314:	f003 fc40 	bl	8005b98 <vPortFree>
 8002318:	e7d6      	b.n	80022c8 <prvTimerTask+0x40>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800231a:	f000 fe4d 	bl	8002fb8 <vTaskSuspendAll>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800231e:	f000 fe55 	bl	8002fcc <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 8002322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002324:	4605      	mov	r5, r0

	if( xTimeNow < xLastTime )
 8002326:	4283      	cmp	r3, r0
 8002328:	d905      	bls.n	8002336 <prvTimerTask+0xae>
	{
		prvSwitchTimerLists();
 800232a:	f7ff ff71 	bl	8002210 <prvSwitchTimerLists>
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 800232e:	6365      	str	r5, [r4, #52]	; 0x34
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8002330:	f000 fee4 	bl	80030fc <xTaskResumeAll>
 8002334:	e7c8      	b.n	80022c8 <prvTimerTask+0x40>
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 8002336:	637d      	str	r5, [r7, #52]	; 0x34
 8002338:	e7be      	b.n	80022b8 <prvTimerTask+0x30>

	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
 800233a:	f7ff ff69 	bl	8002210 <prvSwitchTimerLists>
 800233e:	e7da      	b.n	80022f6 <prvTimerTask+0x6e>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 8002340:	f002 fa32 	bl	80047a8 <vPortYield>
 8002344:	e7c0      	b.n	80022c8 <prvTimerTask+0x40>
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
			{
				( void ) xTaskResumeAll();
 8002346:	f000 fed9 	bl	80030fc <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800234a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f8d3 900c 	ldr.w	r9, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002352:	f109 0004 	add.w	r0, r9, #4
 8002356:	f001 fdc9 	bl	8003eec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800235a:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d004      	beq.n	800236c <prvTimerTask+0xe4>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002362:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8002366:	4648      	mov	r0, r9
 8002368:	4798      	blx	r3
 800236a:	e7ad      	b.n	80022c8 <prvTimerTask+0x40>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800236c:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8002370:	462a      	mov	r2, r5
 8002372:	4431      	add	r1, r6
 8002374:	4633      	mov	r3, r6
 8002376:	4648      	mov	r0, r9
 8002378:	f7ff fede 	bl	8002138 <prvInsertTimerInActiveList>
 800237c:	2801      	cmp	r0, #1
 800237e:	d1f0      	bne.n	8002362 <prvTimerTask+0xda>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002380:	2300      	movs	r3, #0
 8002382:	4632      	mov	r2, r6
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	4619      	mov	r1, r3
 8002388:	4648      	mov	r0, r9
 800238a:	f7ff ff15 	bl	80021b8 <xTimerGenericCommand>
			configASSERT( xResult );
 800238e:	2800      	cmp	r0, #0
 8002390:	d1e7      	bne.n	8002362 <prvTimerTask+0xda>
 8002392:	f002 fa15 	bl	80047c0 <ulPortSetInterruptMask>
 8002396:	e7fe      	b.n	8002396 <prvTimerTask+0x10e>
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 8002398:	9b04      	ldr	r3, [sp, #16]
 800239a:	69b1      	ldr	r1, [r6, #24]
 800239c:	462a      	mov	r2, r5
 800239e:	4419      	add	r1, r3
 80023a0:	4630      	mov	r0, r6
 80023a2:	f7ff fec9 	bl	8002138 <prvInsertTimerInActiveList>
 80023a6:	2801      	cmp	r0, #1
 80023a8:	d18e      	bne.n	80022c8 <prvTimerTask+0x40>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80023aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80023ac:	4630      	mov	r0, r6
 80023ae:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80023b0:	69f3      	ldr	r3, [r6, #28]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d188      	bne.n	80022c8 <prvTimerTask+0x40>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80023b6:	69b3      	ldr	r3, [r6, #24]
 80023b8:	9a04      	ldr	r2, [sp, #16]
 80023ba:	4630      	mov	r0, r6
 80023bc:	441a      	add	r2, r3
 80023be:	f8cd 9000 	str.w	r9, [sp]
 80023c2:	464b      	mov	r3, r9
 80023c4:	4649      	mov	r1, r9
 80023c6:	f7ff fef7 	bl	80021b8 <xTimerGenericCommand>
							configASSERT( xResult );
 80023ca:	2800      	cmp	r0, #0
 80023cc:	f47f af7c 	bne.w	80022c8 <prvTimerTask+0x40>
 80023d0:	f002 f9f6 	bl	80047c0 <ulPortSetInterruptMask>
 80023d4:	e7fe      	b.n	80023d4 <prvTimerTask+0x14c>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80023d6:	9904      	ldr	r1, [sp, #16]
 80023d8:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80023da:	b131      	cbz	r1, 80023ea <prvTimerTask+0x162>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80023dc:	4429      	add	r1, r5
 80023de:	4630      	mov	r0, r6
 80023e0:	462b      	mov	r3, r5
 80023e2:	462a      	mov	r2, r5
 80023e4:	f7ff fea8 	bl	8002138 <prvInsertTimerInActiveList>
 80023e8:	e76e      	b.n	80022c8 <prvTimerTask+0x40>
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80023ea:	f002 f9e9 	bl	80047c0 <ulPortSetInterruptMask>
 80023ee:	e7fe      	b.n	80023ee <prvTimerTask+0x166>
 80023f0:	200009a8 	.word	0x200009a8

080023f4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80023f4:	b084      	sub	sp, #16
 80023f6:	a801      	add	r0, sp, #4
 80023f8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80023fc:	b004      	add	sp, #16
 80023fe:	2000      	movs	r0, #0
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop

08002404 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002404:	4602      	mov	r2, r0
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002406:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 800240a:	2000      	movs	r0, #0
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800240c:	b29b      	uxth	r3, r3
 800240e:	f443 433d 	orr.w	r3, r3, #48384	; 0xbd00
 8002412:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
  
  return HAL_OK;
}
 8002416:	4770      	bx	lr

08002418 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002418:	f244 21ff 	movw	r1, #17151	; 0x42ff
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800241c:	4602      	mov	r2, r0
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800241e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8002422:	2000      	movs	r0, #0
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002424:	400b      	ands	r3, r1
 8002426:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
  
  return HAL_OK;
}
 800242a:	4770      	bx	lr

0800242c <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800242c:	2000      	movs	r0, #0
 800242e:	4770      	bx	lr

08002430 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{    
 8002430:	b084      	sub	sp, #16
 8002432:	b470      	push	{r4, r5, r6}
 8002434:	4604      	mov	r4, r0
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002436:	2500      	movs	r5, #0
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{    
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002438:	2001      	movs	r0, #1
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{    
 800243a:	ae04      	add	r6, sp, #16
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800243c:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{    
 8002440:	e886 000e 	stmia.w	r6, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002444:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
    
  return HAL_OK;
}
 8002448:	4628      	mov	r0, r5
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800244a:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800244e:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
    
  return HAL_OK;
}
 8002452:	bc70      	pop	{r4, r5, r6}
 8002454:	b004      	add	sp, #16
 8002456:	4770      	bx	lr

08002458 <USB_ActivateEndpoint>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  /* initialize Endpoint */
  switch (ep->type)
 8002458:	78cb      	ldrb	r3, [r1, #3]
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800245a:	b430      	push	{r4, r5}
  /* initialize Endpoint */
  switch (ep->type)
 800245c:	2b03      	cmp	r3, #3
 800245e:	d810      	bhi.n	8002482 <USB_ActivateEndpoint+0x2a>
 8002460:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002464:	01690176 	.word	0x01690176
 8002468:	015c0004 	.word	0x015c0004
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
    break;
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 800246c:	780a      	ldrb	r2, [r1, #0]
 800246e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002472:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800247a:	041b      	lsls	r3, r3, #16
 800247c:	0c1b      	lsrs	r3, r3, #16
 800247e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002482:	780c      	ldrb	r4, [r1, #0]
 8002484:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002488:	f444 4200 	orr.w	r2, r4, #32768	; 0x8000
 800248c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002490:	051b      	lsls	r3, r3, #20
 8002492:	0d1b      	lsrs	r3, r3, #20
 8002494:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002498:	4313      	orrs	r3, r2
 800249a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 800249e:	7a8b      	ldrb	r3, [r1, #10]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d137      	bne.n	8002514 <USB_ActivateEndpoint+0xbc>
  {
    if (ep->is_in)
 80024a4:	784b      	ldrb	r3, [r1, #1]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80ee 	beq.w	8002688 <USB_ActivateEndpoint+0x230>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80024ac:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80024b0:	780c      	ldrb	r4, [r1, #0]
 80024b2:	888a      	ldrh	r2, [r1, #4]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80024ba:	0852      	lsrs	r2, r2, #1
 80024bc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80024c0:	0052      	lsls	r2, r2, #1
 80024c2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80024c6:	780c      	ldrb	r4, [r1, #0]
 80024c8:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80024cc:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 80024d0:	065b      	lsls	r3, r3, #25
 80024d2:	d50e      	bpl.n	80024f2 <USB_ActivateEndpoint+0x9a>
 80024d4:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80024d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024dc:	051b      	lsls	r3, r3, #20
 80024de:	0d1b      	lsrs	r3, r3, #20
 80024e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024e8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 80024ec:	780a      	ldrb	r2, [r1, #0]
 80024ee:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 80024f2:	8813      	ldrh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80024f4:	2000      	movs	r0, #0
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 80024f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024fe:	041b      	lsls	r3, r3, #16
 8002500:	0c1b      	lsrs	r3, r3, #16
 8002502:	f083 0320 	eor.w	r3, r3, #32
 8002506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800250a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800250e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002510:	bc30      	pop	{r4, r5}
 8002512:	4770      	bx	lr
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002514:	780a      	ldrb	r2, [r1, #0]
 8002516:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 800251a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800251e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002522:	051b      	lsls	r3, r3, #20
 8002524:	0d1b      	lsrs	r3, r3, #20
 8002526:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800252a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800252e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8002532:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002536:	88ca      	ldrh	r2, [r1, #6]
 8002538:	780d      	ldrb	r5, [r1, #0]
 800253a:	b29b      	uxth	r3, r3
 800253c:	0852      	lsrs	r2, r2, #1
 800253e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002542:	0052      	lsls	r2, r2, #1
 8002544:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
 8002548:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800254c:	780d      	ldrb	r5, [r1, #0]
 800254e:	890a      	ldrh	r2, [r1, #8]
 8002550:	b29b      	uxth	r3, r3
 8002552:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002556:	0852      	lsrs	r2, r2, #1
 8002558:	3304      	adds	r3, #4
 800255a:	0052      	lsls	r2, r2, #1
 800255c:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
    
    if (ep->is_in==0)
 8002560:	784b      	ldrb	r3, [r1, #1]
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002562:	780c      	ldrb	r4, [r1, #0]
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
    
    if (ep->is_in==0)
 8002564:	2b00      	cmp	r3, #0
 8002566:	d14f      	bne.n	8002608 <USB_ActivateEndpoint+0x1b0>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002568:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800256c:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8002570:	045d      	lsls	r5, r3, #17
 8002572:	d50e      	bpl.n	8002592 <USB_ActivateEndpoint+0x13a>
 8002574:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002578:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800257c:	051b      	lsls	r3, r3, #20
 800257e:	0d1b      	lsrs	r3, r3, #20
 8002580:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002588:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 800258c:	780a      	ldrb	r2, [r1, #0]
 800258e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002592:	8813      	ldrh	r3, [r2, #0]
 8002594:	065b      	lsls	r3, r3, #25
 8002596:	d50c      	bpl.n	80025b2 <USB_ActivateEndpoint+0x15a>
 8002598:	8813      	ldrh	r3, [r2, #0]
 800259a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800259e:	051b      	lsls	r3, r3, #20
 80025a0:	0d1b      	lsrs	r3, r3, #20
 80025a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025aa:	8013      	strh	r3, [r2, #0]
 80025ac:	780a      	ldrb	r2, [r1, #0]
 80025ae:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80025b2:	8813      	ldrh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80025b4:	bc30      	pop	{r4, r5}
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80025b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025ba:	051b      	lsls	r3, r3, #20
 80025bc:	0d1b      	lsrs	r3, r3, #20
 80025be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025c6:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80025c8:	780a      	ldrb	r2, [r1, #0]
 80025ca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d6:	041b      	lsls	r3, r3, #16
 80025d8:	0c1b      	lsrs	r3, r3, #16
 80025da:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80025de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80025ea:	780a      	ldrb	r2, [r1, #0]
 80025ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80025f4:	051b      	lsls	r3, r3, #20
 80025f6:	0d1b      	lsrs	r3, r3, #20
 80025f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002600:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002604:	2000      	movs	r0, #0
 8002606:	4770      	bx	lr
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002608:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800260c:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8002610:	045d      	lsls	r5, r3, #17
 8002612:	d50e      	bpl.n	8002632 <USB_ActivateEndpoint+0x1da>
 8002614:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002618:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800261c:	051b      	lsls	r3, r3, #20
 800261e:	0d1b      	lsrs	r3, r3, #20
 8002620:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002628:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 800262c:	780a      	ldrb	r2, [r1, #0]
 800262e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002632:	8813      	ldrh	r3, [r2, #0]
 8002634:	065b      	lsls	r3, r3, #25
 8002636:	f100 8098 	bmi.w	800276a <USB_ActivateEndpoint+0x312>
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 800263a:	bc30      	pop	{r4, r5}
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);
 800263c:	8813      	ldrh	r3, [r2, #0]
 800263e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002642:	051b      	lsls	r3, r3, #20
 8002644:	0d1b      	lsrs	r3, r3, #20
 8002646:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800264a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800264e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002650:	780a      	ldrb	r2, [r1, #0]
 8002652:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002656:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800265a:	051b      	lsls	r3, r3, #20
 800265c:	0d1b      	lsrs	r3, r3, #20
 800265e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002666:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800266a:	780a      	ldrb	r2, [r1, #0]
 800266c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002670:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002674:	049b      	lsls	r3, r3, #18
 8002676:	0c9b      	lsrs	r3, r3, #18
 8002678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800267c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002680:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  
  return HAL_OK;
}
 8002684:	2000      	movs	r0, #0
 8002686:	4770      	bx	lr
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002688:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800268c:	780c      	ldrb	r4, [r1, #0]
 800268e:	888a      	ldrh	r2, [r1, #4]
 8002690:	b29b      	uxth	r3, r3
 8002692:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002696:	0852      	lsrs	r2, r2, #1
 8002698:	3304      	adds	r3, #4
 800269a:	0052      	lsls	r2, r2, #1
 800269c:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 80026a0:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80026a4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80026a8:	780a      	ldrb	r2, [r1, #0]
 80026aa:	690d      	ldr	r5, [r1, #16]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80026b2:	2d3e      	cmp	r5, #62	; 0x3e
 80026b4:	f103 0306 	add.w	r3, r3, #6
 80026b8:	d865      	bhi.n	8002786 <USB_ActivateEndpoint+0x32e>
 80026ba:	f3c5 024f 	ubfx	r2, r5, #1, #16
 80026be:	07ed      	lsls	r5, r5, #31
 80026c0:	bf44      	itt	mi
 80026c2:	3201      	addmi	r2, #1
 80026c4:	b292      	uxthmi	r2, r2
 80026c6:	0292      	lsls	r2, r2, #10
 80026c8:	b292      	uxth	r2, r2
 80026ca:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80026ce:	780c      	ldrb	r4, [r1, #0]
 80026d0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80026d4:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 80026d8:	045b      	lsls	r3, r3, #17
 80026da:	d50e      	bpl.n	80026fa <USB_ActivateEndpoint+0x2a2>
 80026dc:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80026e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026e4:	051b      	lsls	r3, r3, #20
 80026e6:	0d1b      	lsrs	r3, r3, #20
 80026e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 80026f4:	780a      	ldrb	r2, [r1, #0]
 80026f6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80026fa:	8813      	ldrh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80026fc:	2000      	movs	r0, #0
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80026fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002706:	041b      	lsls	r3, r3, #16
 8002708:	0c1b      	lsrs	r3, r3, #16
 800270a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800270e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002716:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002718:	bc30      	pop	{r4, r5}
 800271a:	4770      	bx	lr
    break;
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 800271c:	780a      	ldrb	r2, [r1, #0]
 800271e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002722:	b29b      	uxth	r3, r3
 8002724:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002730:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 8002734:	e6a5      	b.n	8002482 <USB_ActivateEndpoint+0x2a>
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8002736:	780a      	ldrb	r2, [r1, #0]
 8002738:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800273c:	b29b      	uxth	r3, r3
 800273e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800274a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 800274e:	e698      	b.n	8002482 <USB_ActivateEndpoint+0x2a>
{
  /* initialize Endpoint */
  switch (ep->type)
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8002750:	780a      	ldrb	r2, [r1, #0]
 8002752:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002756:	b29b      	uxth	r3, r3
 8002758:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800275c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002760:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002764:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 8002768:	e68b      	b.n	8002482 <USB_ActivateEndpoint+0x2a>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800276a:	8813      	ldrh	r3, [r2, #0]
 800276c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002770:	051b      	lsls	r3, r3, #20
 8002772:	0d1b      	lsrs	r3, r3, #20
 8002774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002778:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800277c:	8013      	strh	r3, [r2, #0]
 800277e:	780a      	ldrb	r2, [r1, #0]
 8002780:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002784:	e759      	b.n	800263a <USB_ActivateEndpoint+0x1e2>
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002786:	f3c5 124f 	ubfx	r2, r5, #5, #16
 800278a:	06ed      	lsls	r5, r5, #27
 800278c:	bf04      	itt	eq
 800278e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002792:	b292      	uxtheq	r2, r2
 8002794:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002798:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800279c:	b292      	uxth	r2, r2
 800279e:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
 80027a2:	e794      	b.n	80026ce <USB_ActivateEndpoint+0x276>

080027a4 <USB_DeactivateEndpoint>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0) 
 80027a4:	7a8b      	ldrb	r3, [r1, #10]
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80027a6:	b410      	push	{r4}
  if (ep->doublebuffer == 0) 
 80027a8:	bb33      	cbnz	r3, 80027f8 <USB_DeactivateEndpoint+0x54>
  {
    if (ep->is_in)
 80027aa:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80027ac:	780c      	ldrb	r4, [r1, #0]
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0) 
  {
    if (ep->is_in)
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 80b1 	beq.w	8002916 <USB_DeactivateEndpoint+0x172>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80027b4:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80027b8:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 80027bc:	065b      	lsls	r3, r3, #25
 80027be:	d50e      	bpl.n	80027de <USB_DeactivateEndpoint+0x3a>
 80027c0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80027c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027c8:	051b      	lsls	r3, r3, #20
 80027ca:	0d1b      	lsrs	r3, r3, #20
 80027cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027d4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 80027d8:	780a      	ldrb	r2, [r1, #0]
 80027da:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 80027de:	8813      	ldrh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80027e0:	2000      	movs	r0, #0
  {
    if (ep->is_in)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 80027e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80027e6:	051b      	lsls	r3, r3, #20
 80027e8:	0d1b      	lsrs	r3, r3, #20
 80027ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80027f4:	bc10      	pop	{r4}
 80027f6:	4770      	bx	lr
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 80027f8:	784b      	ldrb	r3, [r1, #1]
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80027fa:	780c      	ldrb	r4, [r1, #0]
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d14b      	bne.n	8002898 <USB_DeactivateEndpoint+0xf4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002800:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002804:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8002808:	045b      	lsls	r3, r3, #17
 800280a:	d50e      	bpl.n	800282a <USB_DeactivateEndpoint+0x86>
 800280c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002810:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002814:	051b      	lsls	r3, r3, #20
 8002816:	0d1b      	lsrs	r3, r3, #20
 8002818:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800281c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002820:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8002824:	780a      	ldrb	r2, [r1, #0]
 8002826:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800282a:	8813      	ldrh	r3, [r2, #0]
 800282c:	065c      	lsls	r4, r3, #25
 800282e:	d50c      	bpl.n	800284a <USB_DeactivateEndpoint+0xa6>
 8002830:	8813      	ldrh	r3, [r2, #0]
 8002832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002836:	051b      	lsls	r3, r3, #20
 8002838:	0d1b      	lsrs	r3, r3, #20
 800283a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800283e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002842:	8013      	strh	r3, [r2, #0]
 8002844:	780a      	ldrb	r2, [r1, #0]
 8002846:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800284a:	8813      	ldrh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 800284c:	bc10      	pop	{r4}
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800284e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002852:	051b      	lsls	r3, r3, #20
 8002854:	0d1b      	lsrs	r3, r3, #20
 8002856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800285a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800285e:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002860:	780a      	ldrb	r2, [r1, #0]
 8002862:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800286a:	049b      	lsls	r3, r3, #18
 800286c:	0c9b      	lsrs	r3, r3, #18
 800286e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002876:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800287a:	780a      	ldrb	r2, [r1, #0]
 800287c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002880:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002884:	051b      	lsls	r3, r3, #20
 8002886:	0d1b      	lsrs	r3, r3, #20
 8002888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800288c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002890:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002894:	2000      	movs	r0, #0
 8002896:	4770      	bx	lr
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002898:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800289c:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 80028a0:	045b      	lsls	r3, r3, #17
 80028a2:	d50e      	bpl.n	80028c2 <USB_DeactivateEndpoint+0x11e>
 80028a4:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80028a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ac:	051b      	lsls	r3, r3, #20
 80028ae:	0d1b      	lsrs	r3, r3, #20
 80028b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 80028bc:	780a      	ldrb	r2, [r1, #0]
 80028be:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028c2:	8813      	ldrh	r3, [r2, #0]
 80028c4:	065b      	lsls	r3, r3, #25
 80028c6:	d448      	bmi.n	800295a <USB_DeactivateEndpoint+0x1b6>
      PCD_RX_DTOG(USBx, ep->num);
 80028c8:	8813      	ldrh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80028ca:	bc10      	pop	{r4}
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);
 80028cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028d0:	051b      	lsls	r3, r3, #20
 80028d2:	0d1b      	lsrs	r3, r3, #20
 80028d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028dc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80028de:	780a      	ldrb	r2, [r1, #0]
 80028e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80028e8:	051b      	lsls	r3, r3, #20
 80028ea:	0d1b      	lsrs	r3, r3, #20
 80028ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80028f8:	780a      	ldrb	r2, [r1, #0]
 80028fa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002902:	049b      	lsls	r3, r3, #18
 8002904:	0c9b      	lsrs	r3, r3, #18
 8002906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800290a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800290e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  
  return HAL_OK;
}
 8002912:	2000      	movs	r0, #0
 8002914:	4770      	bx	lr
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002916:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800291a:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 800291e:	045b      	lsls	r3, r3, #17
 8002920:	d50e      	bpl.n	8002940 <USB_DeactivateEndpoint+0x19c>
 8002922:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002926:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800292a:	051b      	lsls	r3, r3, #20
 800292c:	0d1b      	lsrs	r3, r3, #20
 800292e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002936:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 800293a:	780a      	ldrb	r2, [r1, #0]
 800293c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002940:	8813      	ldrh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002942:	2000      	movs	r0, #0
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002948:	049b      	lsls	r3, r3, #18
 800294a:	0c9b      	lsrs	r3, r3, #18
 800294c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002954:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002956:	bc10      	pop	{r4}
 8002958:	4770      	bx	lr
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800295a:	8813      	ldrh	r3, [r2, #0]
 800295c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002960:	051b      	lsls	r3, r3, #20
 8002962:	0d1b      	lsrs	r3, r3, #20
 8002964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002968:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800296c:	8013      	strh	r3, [r2, #0]
 800296e:	780a      	ldrb	r2, [r1, #0]
 8002970:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002974:	e7a8      	b.n	80028c8 <USB_DeactivateEndpoint+0x124>
 8002976:	bf00      	nop

08002978 <USB_EPStartXfer>:
{
  uint16_t pmabuffer = 0;
  uint32_t len = ep->xfer_len;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8002978:	784a      	ldrb	r2, [r1, #1]
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 800297a:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t pmabuffer = 0;
  uint32_t len = ep->xfer_len;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 800297c:	2a01      	cmp	r2, #1
 800297e:	d072      	beq.n	8002a66 <USB_EPStartXfer+0xee>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002980:	698b      	ldr	r3, [r1, #24]
 8002982:	690c      	ldr	r4, [r1, #16]
 8002984:	42a3      	cmp	r3, r4
 8002986:	d833      	bhi.n	80029f0 <USB_EPStartXfer+0x78>
      ep->xfer_len-=len; 
    }
    else
    {
      len=ep->xfer_len;
      ep->xfer_len =0;
 8002988:	2400      	movs	r4, #0
 800298a:	618c      	str	r4, [r1, #24]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 800298c:	7a8c      	ldrb	r4, [r1, #10]
 800298e:	2c00      	cmp	r4, #0
 8002990:	d134      	bne.n	80029fc <USB_EPStartXfer+0x84>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002992:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002996:	780c      	ldrb	r4, [r1, #0]
 8002998:	b292      	uxth	r2, r2
 800299a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800299e:	2b3e      	cmp	r3, #62	; 0x3e
 80029a0:	f102 0206 	add.w	r2, r2, #6
 80029a4:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 80029a8:	f240 8097 	bls.w	8002ada <USB_EPStartXfer+0x162>
 80029ac:	f3c3 144f 	ubfx	r4, r3, #5, #16
 80029b0:	06de      	lsls	r6, r3, #27
 80029b2:	bf04      	itt	eq
 80029b4:	f104 34ff 	addeq.w	r4, r4, #4294967295
 80029b8:	b2a4      	uxtheq	r4, r4
 80029ba:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 80029be:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80029c2:	b2a4      	uxth	r4, r4
 80029c4:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80029c8:	780a      	ldrb	r2, [r1, #0]
  }
  
  return HAL_OK;
}
 80029ca:	bcf0      	pop	{r4, r5, r6, r7}
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80029cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d8:	041b      	lsls	r3, r3, #16
 80029da:	0c1b      	lsrs	r3, r3, #16
 80029dc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80029e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  
  return HAL_OK;
}
 80029ec:	2000      	movs	r0, #0
 80029ee:	4770      	bx	lr
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
    {
      len=ep->maxpacket;
      ep->xfer_len-=len; 
 80029f0:	1b1b      	subs	r3, r3, r4
 80029f2:	618b      	str	r3, [r1, #24]
 80029f4:	4623      	mov	r3, r4
      len=ep->xfer_len;
      ep->xfer_len =0;
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 80029f6:	7a8c      	ldrb	r4, [r1, #10]
 80029f8:	2c00      	cmp	r4, #0
 80029fa:	d0ca      	beq.n	8002992 <USB_EPStartXfer+0x1a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80029fc:	2a00      	cmp	r2, #0
 80029fe:	d1e3      	bne.n	80029c8 <USB_EPStartXfer+0x50>
 8002a00:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002a04:	780c      	ldrb	r4, [r1, #0]
 8002a06:	b292      	uxth	r2, r2
 8002a08:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002a0c:	2b3e      	cmp	r3, #62	; 0x3e
 8002a0e:	f102 0202 	add.w	r2, r2, #2
 8002a12:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8002a16:	f240 80a2 	bls.w	8002b5e <USB_EPStartXfer+0x1e6>
 8002a1a:	095c      	lsrs	r4, r3, #5
 8002a1c:	b2a6      	uxth	r6, r4
 8002a1e:	f013 071f 	ands.w	r7, r3, #31
 8002a22:	bf04      	itt	eq
 8002a24:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002a28:	b2b6      	uxtheq	r6, r6
 8002a2a:	ea6f 66c6 	mvn.w	r6, r6, lsl #27
 8002a2e:	ea6f 4656 	mvn.w	r6, r6, lsr #17
 8002a32:	b2b6      	uxth	r6, r6
 8002a34:	f845 6012 	str.w	r6, [r5, r2, lsl #1]
 8002a38:	784a      	ldrb	r2, [r1, #1]
 8002a3a:	2a00      	cmp	r2, #0
 8002a3c:	f040 80c9 	bne.w	8002bd2 <USB_EPStartXfer+0x25a>
 8002a40:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002a44:	780a      	ldrb	r2, [r1, #0]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8002a4c:	3206      	adds	r2, #6
 8002a4e:	b2a3      	uxth	r3, r4
 8002a50:	b90f      	cbnz	r7, 8002a56 <USB_EPStartXfer+0xde>
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8002a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	f845 3012 	str.w	r3, [r5, r2, lsl #1]
 8002a64:	e7b0      	b.n	80029c8 <USB_EPStartXfer+0x50>
  
  /* IN endpoint */
  if (ep->is_in == 1)
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002a66:	698c      	ldr	r4, [r1, #24]
 8002a68:	690b      	ldr	r3, [r1, #16]
 8002a6a:	429c      	cmp	r4, r3
 8002a6c:	d840      	bhi.n	8002af0 <USB_EPStartXfer+0x178>
      ep->xfer_len-=len; 
    }
    else
    {  
      len=ep->xfer_len;
      ep->xfer_len =0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	618b      	str	r3, [r1, #24]
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 8002a72:	7a8b      	ldrb	r3, [r1, #10]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d141      	bne.n	8002afc <USB_EPStartXfer+0x184>
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002a78:	b2a3      	uxth	r3, r4
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002a7a:	888a      	ldrh	r2, [r1, #4]
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002a7c:	3301      	adds	r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002a7e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002a82:	105b      	asrs	r3, r3, #1
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8002a84:	694d      	ldr	r5, [r1, #20]
 8002a86:	bf18      	it	ne
 8002a88:	f202 4204 	addwne	r2, r2, #1028	; 0x404
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002a8c:	d007      	beq.n	8002a9e <USB_EPStartXfer+0x126>
 8002a8e:	f835 6b02 	ldrh.w	r6, [r5], #2
 8002a92:	3b01      	subs	r3, #1
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
 8002a94:	f822 6c04 	strh.w	r6, [r2, #-4]
 8002a98:	f102 0204 	add.w	r2, r2, #4
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002a9c:	d1f7      	bne.n	8002a8e <USB_EPStartXfer+0x116>
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002a9e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002aa2:	780a      	ldrb	r2, [r1, #0]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002aaa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002aae:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002ab2:	780a      	ldrb	r2, [r1, #0]
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
  }
  
  return HAL_OK;
}
 8002ab4:	bcf0      	pop	{r4, r5, r6, r7}
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002ab6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ac2:	041b      	lsls	r3, r3, #16
 8002ac4:	0c1b      	lsrs	r3, r3, #16
 8002ac6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
  }
  
  return HAL_OK;
}
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	4770      	bx	lr
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002ada:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8002ade:	07db      	lsls	r3, r3, #31
 8002ae0:	bf44      	itt	mi
 8002ae2:	3401      	addmi	r4, #1
 8002ae4:	b2a4      	uxthmi	r4, r4
 8002ae6:	02a4      	lsls	r4, r4, #10
 8002ae8:	b2a4      	uxth	r4, r4
 8002aea:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 8002aee:	e76b      	b.n	80029c8 <USB_EPStartXfer+0x50>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
    {
      len=ep->maxpacket;
      ep->xfer_len-=len; 
 8002af0:	1ae4      	subs	r4, r4, r3
 8002af2:	618c      	str	r4, [r1, #24]
 8002af4:	461c      	mov	r4, r3
      len=ep->xfer_len;
      ep->xfer_len =0;
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 8002af6:	7a8b      	ldrb	r3, [r1, #10]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0bd      	beq.n	8002a78 <USB_EPStartXfer+0x100>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8002afc:	780e      	ldrb	r6, [r1, #0]
 8002afe:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8002b02:	065f      	lsls	r7, r3, #25
 8002b04:	d548      	bpl.n	8002b98 <USB_EPStartXfer+0x220>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002b06:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8002b0a:	f500 6380 	add.w	r3, r0, #1024	; 0x400
 8002b0e:	b2ad      	uxth	r5, r5
 8002b10:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
 8002b14:	3202      	adds	r2, #2
        pmabuffer = ep->pmaaddr1;
 8002b16:	890e      	ldrh	r6, [r1, #8]
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002b18:	f843 4012 	str.w	r4, [r3, r2, lsl #1]
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002b1c:	b2a2      	uxth	r2, r4
 8002b1e:	3201      	adds	r2, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002b20:	1052      	asrs	r2, r2, #1
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002b22:	eb03 0646 	add.w	r6, r3, r6, lsl #1
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr0;
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8002b26:	694c      	ldr	r4, [r1, #20]
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002b28:	bf18      	it	ne
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	d006      	beq.n	8002b3c <USB_EPStartXfer+0x1c4>
 8002b2e:	f834 5b02 	ldrh.w	r5, [r4], #2
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
 8002b32:	f826 5023 	strh.w	r5, [r6, r3, lsl #2]
 8002b36:	3301      	adds	r3, #1
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d1f8      	bne.n	8002b2e <USB_EPStartXfer+0x1b6>
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr0;
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002b3c:	784b      	ldrb	r3, [r1, #1]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d136      	bne.n	8002bb0 <USB_EPStartXfer+0x238>
 8002b42:	780a      	ldrb	r2, [r1, #0]
 8002b44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b4c:	051b      	lsls	r3, r3, #20
 8002b4e:	0d1b      	lsrs	r3, r3, #20
 8002b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b58:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002b5c:	e7a9      	b.n	8002ab2 <USB_EPStartXfer+0x13a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002b5e:	085c      	lsrs	r4, r3, #1
 8002b60:	b2a6      	uxth	r6, r4
 8002b62:	f013 0701 	ands.w	r7, r3, #1
 8002b66:	bf1c      	itt	ne
 8002b68:	3601      	addne	r6, #1
 8002b6a:	b2b6      	uxthne	r6, r6
 8002b6c:	02b6      	lsls	r6, r6, #10
 8002b6e:	b2b6      	uxth	r6, r6
 8002b70:	f845 6012 	str.w	r6, [r5, r2, lsl #1]
 8002b74:	784a      	ldrb	r2, [r1, #1]
 8002b76:	bb62      	cbnz	r2, 8002bd2 <USB_EPStartXfer+0x25a>
 8002b78:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002b7c:	780a      	ldrb	r2, [r1, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002b84:	b2a4      	uxth	r4, r4
 8002b86:	3306      	adds	r3, #6
 8002b88:	b10f      	cbz	r7, 8002b8e <USB_EPStartXfer+0x216>
 8002b8a:	3401      	adds	r4, #1
 8002b8c:	b2a4      	uxth	r4, r4
 8002b8e:	02a4      	lsls	r4, r4, #10
 8002b90:	b2a4      	uxth	r4, r4
 8002b92:	f845 4013 	str.w	r4, [r5, r3, lsl #1]
 8002b96:	e717      	b.n	80029c8 <USB_EPStartXfer+0x50>
        pmabuffer = ep->pmaaddr1;
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002b98:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002b9c:	f500 6380 	add.w	r3, r0, #1024	; 0x400
 8002ba0:	b292      	uxth	r2, r2
 8002ba2:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 8002ba6:	3202      	adds	r2, #2
        pmabuffer = ep->pmaaddr0;
 8002ba8:	88ce      	ldrh	r6, [r1, #6]
        pmabuffer = ep->pmaaddr1;
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002baa:	f843 4012 	str.w	r4, [r3, r2, lsl #1]
 8002bae:	e7b5      	b.n	8002b1c <USB_EPStartXfer+0x1a4>
        pmabuffer = ep->pmaaddr0;
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	f47f af7e 	bne.w	8002ab2 <USB_EPStartXfer+0x13a>
 8002bb6:	780a      	ldrb	r2, [r1, #0]
 8002bb8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002bbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bc0:	051b      	lsls	r3, r3, #20
 8002bc2:	0d1b      	lsrs	r3, r3, #20
 8002bc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bcc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002bd0:	e76f      	b.n	8002ab2 <USB_EPStartXfer+0x13a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002bd2:	2a01      	cmp	r2, #1
 8002bd4:	f47f aef8 	bne.w	80029c8 <USB_EPStartXfer+0x50>
 8002bd8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002bdc:	780c      	ldrb	r4, [r1, #0]
 8002bde:	b292      	uxth	r2, r2
 8002be0:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002be4:	3202      	adds	r2, #2
 8002be6:	f845 3012 	str.w	r3, [r5, r2, lsl #1]
 8002bea:	e6ed      	b.n	80029c8 <USB_EPStartXfer+0x50>

08002bec <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8002bec:	780a      	ldrb	r2, [r1, #0]
 8002bee:	b32a      	cbz	r2, 8002c3c <USB_EPSetStall+0x50>
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
  }
  else
  {
    if (ep->is_in)
 8002bf0:	784b      	ldrb	r3, [r1, #1]
 8002bf2:	b98b      	cbnz	r3, 8002c18 <USB_EPSetStall+0x2c>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8002bf4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002bf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c00:	041b      	lsls	r3, r3, #16
 8002c02:	0c1b      	lsrs	r3, r3, #16
 8002c04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c10:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  return HAL_OK;
}
 8002c14:	2000      	movs	r0, #0
 8002c16:	4770      	bx	lr
  }
  else
  {
    if (ep->is_in)
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8002c18:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c24:	041b      	lsls	r3, r3, #16
 8002c26:	0c1b      	lsrs	r3, r3, #16
 8002c28:	f083 0310 	eor.w	r3, r3, #16
 8002c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c34:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8002c38:	2000      	movs	r0, #0
 8002c3a:	4770      	bx	lr
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8002c3c:	8803      	ldrh	r3, [r0, #0]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002c4c:	f083 0310 	eor.w	r3, r3, #16
 8002c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c58:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop

08002c60 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8002c60:	784b      	ldrb	r3, [r1, #1]
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002c62:	b410      	push	{r4}
  if (ep->is_in)
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c64:	780c      	ldrb	r4, [r1, #0]
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8002c66:	b32b      	cbz	r3, 8002cb4 <USB_EPClearStall+0x54>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c68:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002c6c:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8002c70:	065b      	lsls	r3, r3, #25
 8002c72:	d50e      	bpl.n	8002c92 <USB_EPClearStall+0x32>
 8002c74:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002c78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c7c:	051b      	lsls	r3, r3, #20
 8002c7e:	0d1b      	lsrs	r3, r3, #20
 8002c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c88:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8002c8c:	780a      	ldrb	r2, [r1, #0]
 8002c8e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002c92:	8813      	ldrh	r3, [r2, #0]
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
  }
  return HAL_OK;
}
 8002c94:	2000      	movs	r0, #0
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c9e:	041b      	lsls	r3, r3, #16
 8002ca0:	0c1b      	lsrs	r3, r3, #16
 8002ca2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cae:	8013      	strh	r3, [r2, #0]
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
  }
  return HAL_OK;
}
 8002cb0:	bc10      	pop	{r4}
 8002cb2:	4770      	bx	lr
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002cb4:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002cb8:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8002cbc:	045b      	lsls	r3, r3, #17
 8002cbe:	d50e      	bpl.n	8002cde <USB_EPClearStall+0x7e>
 8002cc0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002cc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cc8:	051b      	lsls	r3, r3, #20
 8002cca:	0d1b      	lsrs	r3, r3, #20
 8002ccc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8002cd8:	780a      	ldrb	r2, [r1, #0]
 8002cda:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002cde:	8813      	ldrh	r3, [r2, #0]
  }
  return HAL_OK;
}
 8002ce0:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002ce2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cea:	041b      	lsls	r3, r3, #16
 8002cec:	0c1b      	lsrs	r3, r3, #16
 8002cee:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cfa:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
}
 8002cfc:	bc10      	pop	{r4}
 8002cfe:	4770      	bx	lr

08002d00 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8002d00:	b911      	cbnz	r1, 8002d08 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8002d08:	2000      	movs	r0, #0
 8002d0a:	4770      	bx	lr

08002d0c <USB_DevConnect>:
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	4770      	bx	lr

08002d10 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002d10:	2000      	movs	r0, #0
 8002d12:	4770      	bx	lr

08002d14 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8002d14:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002d18:	b280      	uxth	r0, r0
 8002d1a:	4770      	bx	lr

08002d1c <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	4770      	bx	lr

08002d20 <USB_WritePMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002d20:	3301      	adds	r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002d22:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  for (index = nbytes; index != 0; index--)
 8002d26:	105b      	asrs	r3, r3, #1
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002d28:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002d2c:	d009      	beq.n	8002d42 <USB_WritePMA+0x22>
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002d2e:	b430      	push	{r4, r5}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002d30:	2400      	movs	r4, #0
 8002d32:	f831 5b02 	ldrh.w	r5, [r1], #2
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
 8002d36:	f822 5024 	strh.w	r5, [r2, r4, lsl #2]
 8002d3a:	3401      	adds	r4, #1
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002d3c:	42a3      	cmp	r3, r4
 8002d3e:	d1f8      	bne.n	8002d32 <USB_WritePMA+0x12>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002d40:	bc30      	pop	{r4, r5}
 8002d42:	4770      	bx	lr

08002d44 <USB_ReadPMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002d44:	3301      	adds	r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002d46:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  for (index = nbytes; index != 0; index--)
 8002d4a:	105b      	asrs	r3, r3, #1
{
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002d4c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002d50:	d005      	beq.n	8002d5e <USB_ReadPMA+0x1a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002d52:	f852 0b04 	ldr.w	r0, [r2], #4
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002d56:	3b01      	subs	r3, #1
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002d58:	f821 0b02 	strh.w	r0, [r1], #2
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002d5c:	d1f9      	bne.n	8002d52 <USB_ReadPMA+0xe>
 8002d5e:	4770      	bx	lr

08002d60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002d60:	b508      	push	{r3, lr}
 8002d62:	4c03      	ldr	r4, [pc, #12]	; (8002d70 <prvIdleTask+0x10>)
 8002d64:	6823      	ldr	r3, [r4, #0]

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d9fd      	bls.n	8002d66 <prvIdleTask+0x6>
			{
				taskYIELD();
 8002d6a:	f001 fd1d 	bl	80047a8 <vPortYield>
 8002d6e:	e7f9      	b.n	8002d64 <prvIdleTask+0x4>
 8002d70:	200009e0 	.word	0x200009e0

08002d74 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002d74:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <prvAddCurrentTaskToDelayedList+0x3c>)
 8002d76:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c

	if( xTimeToWake < xTickCount )
 8002d7a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002d7e:	6048      	str	r0, [r1, #4]

	if( xTimeToWake < xTickCount )
 8002d80:	4290      	cmp	r0, r2
 8002d82:	d30e      	bcc.n	8002da2 <prvAddCurrentTaskToDelayedList+0x2e>
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8002d84:	b510      	push	{r4, lr}
 8002d86:	4604      	mov	r4, r0
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002d88:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8002d8c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8002d90:	3104      	adds	r1, #4
 8002d92:	f001 f891 	bl	8003eb8 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8002d96:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <prvAddCurrentTaskToDelayedList+0x40>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	4294      	cmp	r4, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 8002d9c:	bf38      	it	cc
 8002d9e:	601c      	strcc	r4, [r3, #0]
 8002da0:	bd10      	pop	{r4, pc}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002da2:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 8002da6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8002daa:	3104      	adds	r1, #4
 8002dac:	f001 b884 	b.w	8003eb8 <vListInsert>
 8002db0:	200009e0 	.word	0x200009e0
 8002db4:	20000438 	.word	0x20000438

08002db8 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002db8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dbc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002dbe:	469a      	mov	sl, r3
 8002dc0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8002dc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 8002dc6:	2800      	cmp	r0, #0
 8002dc8:	f000 8088 	beq.w	8002edc <xTaskGenericCreate+0x124>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 8002dcc:	2f04      	cmp	r7, #4
 8002dce:	d902      	bls.n	8002dd6 <xTaskGenericCreate+0x1e>
 8002dd0:	f001 fcf6 	bl	80047c0 <ulPortSetInterruptMask>
 8002dd4:	e7fe      	b.n	8002dd4 <xTaskGenericCreate+0x1c>
 8002dd6:	460e      	mov	r6, r1
 8002dd8:	4615      	mov	r5, r2
 8002dda:	4681      	mov	r9, r0
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ddc:	469b      	mov	fp, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80b0 	beq.w	8002f44 <xTaskGenericCreate+0x18c>

		if( pxStack != NULL )
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002de4:	205c      	movs	r0, #92	; 0x5c
 8002de6:	f002 fea9 	bl	8005b3c <pvPortMalloc>

			if( pxNewTCB != NULL )
 8002dea:	4604      	mov	r4, r0
 8002dec:	2800      	cmp	r0, #0
 8002dee:	f000 80a2 	beq.w	8002f36 <xTaskGenericCreate+0x17e>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8002df2:	00ad      	lsls	r5, r5, #2
 8002df4:	462a      	mov	r2, r5
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );

			if( pxNewTCB != NULL )
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 8002df6:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8002dfa:	21a5      	movs	r1, #165	; 0xa5
 8002dfc:	4658      	mov	r0, fp
 8002dfe:	f002 ffdb 	bl	8005db8 <memset>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002e02:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e04:	3d04      	subs	r5, #4
 8002e06:	441d      	add	r5, r3
 8002e08:	f025 0507 	bic.w	r5, r5, #7
 8002e0c:	1e73      	subs	r3, r6, #1
 8002e0e:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8002e12:	360f      	adds	r6, #15
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8002e14:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002e18:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002e1c:	7819      	ldrb	r1, [r3, #0]
 8002e1e:	b109      	cbz	r1, 8002e24 <xTaskGenericCreate+0x6c>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e20:	42b3      	cmp	r3, r6
 8002e22:	d1f7      	bne.n	8002e14 <xTaskGenericCreate+0x5c>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e24:	2600      	movs	r6, #0
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8002e26:	f104 0b04 	add.w	fp, r4, #4
 8002e2a:	4658      	mov	r0, fp
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 8002e2c:	62e7      	str	r7, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8002e2e:	64e7      	str	r7, [r4, #76]	; 0x4c
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e30:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43

	pxTCB->uxPriority = uxPriority;
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
 8002e34:	6526      	str	r6, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8002e36:	f001 f82d 	bl	8003e94 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8002e3a:	f104 0018 	add.w	r0, r4, #24
 8002e3e:	f001 f829 	bl	8003e94 <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e42:	f1c7 0305 	rsb	r3, r7, #5
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 8002e46:	6566      	str	r6, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8002e48:	6124      	str	r4, [r4, #16]
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
		pxTCB->eNotifyState = eNotWaitingNotification;
 8002e4a:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8002e4e:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e50:	4652      	mov	r2, sl
 8002e52:	4649      	mov	r1, r9
 8002e54:	4628      	mov	r0, r5
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e56:	61a3      	str	r3, [r4, #24]
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e58:	f001 fc82 	bl	8004760 <pxPortInitialiseStack>
 8002e5c:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8002e5e:	f1b8 0f00 	cmp.w	r8, #0
 8002e62:	d001      	beq.n	8002e68 <xTaskGenericCreate+0xb0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e64:	f8c8 4000 	str.w	r4, [r8]

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 8002e68:	4d3a      	ldr	r5, [pc, #232]	; (8002f54 <xTaskGenericCreate+0x19c>)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8002e6a:	f001 fcbf 	bl	80047ec <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8002e6e:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8002e72:	3301      	adds	r3, #1
 8002e74:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
			if( pxCurrentTCB == NULL )
 8002e78:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8002e7c:	b3b3      	cbz	r3, 8002eec <xTaskGenericCreate+0x134>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8002e7e:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
 8002e82:	b933      	cbnz	r3, 8002e92 <xTaskGenericCreate+0xda>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8002e84:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
 8002e8c:	bf28      	it	cs
 8002e8e:	f8c5 408c 	strcs.w	r4, [r5, #140]	; 0x8c
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8002e92:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8002e94:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8002e98:	f8d5 20d0 	ldr.w	r2, [r5, #208]	; 0xd0
 8002e9c:	2601      	movs	r6, #1
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8002e9e:	4433      	add	r3, r6
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8002ea0:	fa06 fe00 	lsl.w	lr, r6, r0
 8002ea4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ea8:	ea4e 0202 	orr.w	r2, lr, r2
			uxTaskNumber++;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002eac:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8002eae:	4659      	mov	r1, fp
 8002eb0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8002eb4:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8002eb8:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8002ebc:	f000 ffee 	bl	8003e9c <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8002ec0:	f001 fcb2 	bl	8004828 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 8002ec4:	f8d5 20c8 	ldr.w	r2, [r5, #200]	; 0xc8
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8002ec8:	4b22      	ldr	r3, [pc, #136]	; (8002f54 <xTaskGenericCreate+0x19c>)
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 8002eca:	b122      	cbz	r2, 8002ed6 <xTaskGenericCreate+0x11e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8002ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	429f      	cmp	r7, r3
 8002ed4:	d805      	bhi.n	8002ee2 <xTaskGenericCreate+0x12a>
 8002ed6:	4630      	mov	r0, r6
 8002ed8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 8002edc:	f001 fc70 	bl	80047c0 <ulPortSetInterruptMask>
 8002ee0:	e7fe      	b.n	8002ee0 <xTaskGenericCreate+0x128>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
			{
				taskYIELD_IF_USING_PREEMPTION();
 8002ee2:	f001 fc61 	bl	80047a8 <vPortYield>
 8002ee6:	4630      	mov	r0, r6
 8002ee8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uxCurrentNumberOfTasks++;
			if( pxCurrentTCB == NULL )
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8002eec:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ef0:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d1cc      	bne.n	8002e92 <xTaskGenericCreate+0xda>
 8002ef8:	462e      	mov	r6, r5
 8002efa:	f105 0864 	add.w	r8, r5, #100	; 0x64
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002efe:	4630      	mov	r0, r6
 8002f00:	3614      	adds	r6, #20
 8002f02:	f000 ffbb 	bl	8003e7c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f06:	4546      	cmp	r6, r8
 8002f08:	d1f9      	bne.n	8002efe <xTaskGenericCreate+0x146>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f0a:	4e13      	ldr	r6, [pc, #76]	; (8002f58 <xTaskGenericCreate+0x1a0>)
 8002f0c:	4630      	mov	r0, r6
	vListInitialise( &xDelayedTaskList2 );
 8002f0e:	f106 0814 	add.w	r8, r6, #20
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f12:	f000 ffb3 	bl	8003e7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f16:	4640      	mov	r0, r8
 8002f18:	f000 ffb0 	bl	8003e7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002f1c:	f1a6 0028 	sub.w	r0, r6, #40	; 0x28
 8002f20:	f000 ffac 	bl	8003e7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002f24:	f1a6 003c 	sub.w	r0, r6, #60	; 0x3c
 8002f28:	f000 ffa8 	bl	8003e7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002f2c:	f8c5 6098 	str.w	r6, [r5, #152]	; 0x98
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f30:	f8c5 8094 	str.w	r8, [r5, #148]	; 0x94
 8002f34:	e7ad      	b.n	8002e92 <xTaskGenericCreate+0xda>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 8002f36:	4658      	mov	r0, fp
 8002f38:	f002 fe2e 	bl	8005b98 <vPortFree>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 8002f40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f44:	0090      	lsls	r0, r2, #2
 8002f46:	f002 fdf9 	bl	8005b3c <pvPortMalloc>

		if( pxStack != NULL )
 8002f4a:	4683      	mov	fp, r0
 8002f4c:	2800      	cmp	r0, #0
 8002f4e:	d0f5      	beq.n	8002f3c <xTaskGenericCreate+0x184>
 8002f50:	e748      	b.n	8002de4 <xTaskGenericCreate+0x2c>
 8002f52:	bf00      	nop
 8002f54:	200009e0 	.word	0x200009e0
 8002f58:	20000a80 	.word	0x20000a80

08002f5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f5c:	b530      	push	{r4, r5, lr}
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8002f5e:	2400      	movs	r4, #0

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f60:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8002f62:	9403      	str	r4, [sp, #12]
 8002f64:	9402      	str	r4, [sp, #8]
 8002f66:	9401      	str	r4, [sp, #4]
 8002f68:	9400      	str	r4, [sp, #0]
 8002f6a:	4623      	mov	r3, r4
 8002f6c:	2240      	movs	r2, #64	; 0x40
 8002f6e:	490f      	ldr	r1, [pc, #60]	; (8002fac <vTaskStartScheduler+0x50>)
 8002f70:	480f      	ldr	r0, [pc, #60]	; (8002fb0 <vTaskStartScheduler+0x54>)
 8002f72:	f7ff ff21 	bl	8002db8 <xTaskGenericCreate>
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002f76:	2801      	cmp	r0, #1
 8002f78:	d006      	beq.n	8002f88 <vTaskStartScheduler+0x2c>
 8002f7a:	4605      	mov	r5, r0
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8002f7c:	b10d      	cbz	r5, 8002f82 <vTaskStartScheduler+0x26>
	}
}
 8002f7e:	b005      	add	sp, #20
 8002f80:	bd30      	pop	{r4, r5, pc}
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8002f82:	f001 fc1d 	bl	80047c0 <ulPortSetInterruptMask>
 8002f86:	e7fe      	b.n	8002f86 <vTaskStartScheduler+0x2a>

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
		{
			xReturn = xTimerCreateTimerTask();
 8002f88:	f7ff f8f6 	bl	8002178 <xTimerCreateTimerTask>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f8c:	2801      	cmp	r0, #1

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
		{
			xReturn = xTimerCreateTimerTask();
 8002f8e:	4605      	mov	r5, r0
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f90:	d1f4      	bne.n	8002f7c <vTaskStartScheduler+0x20>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8002f92:	f001 fc15 	bl	80047c0 <ulPortSetInterruptMask>
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 8002f96:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <vTaskStartScheduler+0x58>)
 8002f98:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8
		xTickCount = ( TickType_t ) 0U;
 8002f9c:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8002fa0:	b005      	add	sp, #20
 8002fa2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fa6:	f001 bc9b 	b.w	80048e0 <xPortStartScheduler>
 8002faa:	bf00      	nop
 8002fac:	08006180 	.word	0x08006180
 8002fb0:	08002d61 	.word	0x08002d61
 8002fb4:	200009e0 	.word	0x200009e0

08002fb8 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002fb8:	4a03      	ldr	r2, [pc, #12]	; (8002fc8 <vTaskSuspendAll+0x10>)
 8002fba:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	200009e0 	.word	0x200009e0

08002fcc <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002fcc:	4b01      	ldr	r3, [pc, #4]	; (8002fd4 <xTaskGetTickCount+0x8>)
 8002fce:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
 8002fd2:	4770      	bx	lr
 8002fd4:	200009e0 	.word	0x200009e0

08002fd8 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fdc:	4c45      	ldr	r4, [pc, #276]	; (80030f4 <xTaskIncrementTick+0x11c>)
 8002fde:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d14e      	bne.n	8003084 <xTaskIncrementTick+0xac>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8002fe6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002fea:	3301      	adds	r3, #1
 8002fec:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8002ff0:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90

			if( xConstTickCount == ( TickType_t ) 0U )
 8002ff4:	f1b8 0f00 	cmp.w	r8, #0
 8002ff8:	d052      	beq.n	80030a0 <xTaskIncrementTick+0xc8>
 8002ffa:	4f3f      	ldr	r7, [pc, #252]	; (80030f8 <xTaskIncrementTick+0x120>)

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	4598      	cmp	r8, r3
 8003000:	d36a      	bcc.n	80030d8 <xTaskIncrementTick+0x100>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003002:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 80030f4 <xTaskIncrementTick+0x11c>
 8003006:	2600      	movs	r6, #0
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8003008:	f04f 0901 	mov.w	r9, #1
 800300c:	e027      	b.n	800305e <xTaskIncrementTick+0x86>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800300e:	f8da 3098 	ldr.w	r3, [sl, #152]	; 0x98
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8003016:	686b      	ldr	r3, [r5, #4]
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003018:	f105 0b04 	add.w	fp, r5, #4
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );

						if( xConstTickCount < xItemValue )
 800301c:	4598      	cmp	r8, r3
 800301e:	d325      	bcc.n	800306c <xTaskIncrementTick+0x94>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003020:	4658      	mov	r0, fp
 8003022:	f000 ff63 	bl	8003eec <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003026:	6aab      	ldr	r3, [r5, #40]	; 0x28
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003028:	f105 0018 	add.w	r0, r5, #24
						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800302c:	b10b      	cbz	r3, 8003032 <xTaskIncrementTick+0x5a>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800302e:	f000 ff5d 	bl	8003eec <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8003032:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003034:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 8003038:	fa09 f200 	lsl.w	r2, r9, r0
 800303c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003040:	4313      	orrs	r3, r2
 8003042:	4659      	mov	r1, fp
 8003044:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003048:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 800304c:	f000 ff26 	bl	8003e9c <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003050:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003054:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 8003058:	429a      	cmp	r2, r3
 800305a:	bf28      	it	cs
 800305c:	2601      	movcs	r6, #1
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800305e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1d2      	bne.n	800300e <xTaskIncrementTick+0x36>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8003068:	f04f 33ff 	mov.w	r3, #4294967295
 800306c:	603b      	str	r3, [r7, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800306e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003078:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
 800307c:	2b02      	cmp	r3, #2
 800307e:	bf28      	it	cs
 8003080:	2601      	movcs	r6, #1
 8003082:	e005      	b.n	8003090 <xTaskIncrementTick+0xb8>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003084:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003088:	2600      	movs	r6, #0
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800308a:	3301      	adds	r3, #1
 800308c:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003090:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
		{
			xSwitchRequired = pdTRUE;
 8003094:	2b00      	cmp	r3, #0
 8003096:	bf18      	it	ne
 8003098:	2601      	movne	r6, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 800309a:	4630      	mov	r0, r6
 800309c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			block. */
			const TickType_t xConstTickCount = xTickCount;

			if( xConstTickCount == ( TickType_t ) 0U )
			{
				taskSWITCH_DELAYED_LISTS();
 80030a0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	bb0b      	cbnz	r3, 80030ec <xTaskIncrementTick+0x114>
 80030a8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80030ac:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80030b0:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 80030b4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 80030b8:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80030bc:	3301      	adds	r3, #1
 80030be:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030c2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	b943      	cbnz	r3, 80030dc <xTaskIncrementTick+0x104>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80030ca:	4f0b      	ldr	r7, [pc, #44]	; (80030f8 <xTaskIncrementTick+0x120>)
 80030cc:	f04f 33ff 	mov.w	r3, #4294967295
 80030d0:	603b      	str	r3, [r7, #0]

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	4598      	cmp	r8, r3
 80030d6:	d294      	bcs.n	8003002 <xTaskIncrementTick+0x2a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80030d8:	2600      	movs	r6, #0
 80030da:	e7c8      	b.n	800306e <xTaskIncrementTick+0x96>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80030dc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 80030e0:	4f05      	ldr	r7, [pc, #20]	; (80030f8 <xTaskIncrementTick+0x120>)
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80030e2:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	e787      	b.n	8002ffc <xTaskIncrementTick+0x24>
			block. */
			const TickType_t xConstTickCount = xTickCount;

			if( xConstTickCount == ( TickType_t ) 0U )
			{
				taskSWITCH_DELAYED_LISTS();
 80030ec:	f001 fb68 	bl	80047c0 <ulPortSetInterruptMask>
 80030f0:	e7fe      	b.n	80030f0 <xTaskIncrementTick+0x118>
 80030f2:	bf00      	nop
 80030f4:	200009e0 	.word	0x200009e0
 80030f8:	20000438 	.word	0x20000438

080030fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003100:	4c34      	ldr	r4, [pc, #208]	; (80031d4 <xTaskResumeAll+0xd8>)
 8003102:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003106:	b913      	cbnz	r3, 800310e <xTaskResumeAll+0x12>
 8003108:	f001 fb5a 	bl	80047c0 <ulPortSetInterruptMask>
 800310c:	e7fe      	b.n	800310c <xTaskResumeAll+0x10>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800310e:	f001 fb6d 	bl	80047ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003112:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003116:	3b01      	subs	r3, #1
 8003118:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800311c:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003120:	bbb3      	cbnz	r3, 8003190 <xTaskResumeAll+0x94>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003122:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8003126:	b39b      	cbz	r3, 8003190 <xTaskResumeAll+0x94>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003128:	4625      	mov	r5, r4
 800312a:	46a1      	mov	r9, r4
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 800312c:	f04f 0801 	mov.w	r8, #1
 8003130:	e021      	b.n	8003176 <xTaskResumeAll+0x7a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003132:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8003136:	68de      	ldr	r6, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003138:	1d37      	adds	r7, r6, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800313a:	f106 0018 	add.w	r0, r6, #24
 800313e:	f000 fed5 	bl	8003eec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003142:	4638      	mov	r0, r7
 8003144:	f000 fed2 	bl	8003eec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003148:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800314a:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
 800314e:	fa08 f200 	lsl.w	r2, r8, r0
 8003152:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003156:	4313      	orrs	r3, r2
 8003158:	4639      	mov	r1, r7
 800315a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800315e:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
 8003162:	f000 fe9b 	bl	8003e9c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003166:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800316a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	429a      	cmp	r2, r3
					{
						xYieldPending = pdTRUE;
 8003170:	bf28      	it	cs
 8003172:	f8c9 a0e0 	strcs.w	sl, [r9, #224]	; 0xe0
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003176:	6fa2      	ldr	r2, [r4, #120]	; 0x78
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8003178:	f04f 0a01 	mov.w	sl, #1
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800317c:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <xTaskResumeAll+0xd8>)
 800317e:	2a00      	cmp	r2, #0
 8003180:	d1d7      	bne.n	8003132 <xTaskResumeAll+0x36>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8003182:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8003186:	b94a      	cbnz	r2, 800319c <xTaskResumeAll+0xa0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8003188:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800318c:	2c01      	cmp	r4, #1
 800318e:	d019      	beq.n	80031c4 <xTaskResumeAll+0xc8>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8003190:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003192:	f001 fb49 	bl	8004828 <vPortExitCritical>

	return xAlreadyYielded;
}
 8003196:	4620      	mov	r0, r4
 8003198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800319c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f1      	beq.n	8003188 <xTaskResumeAll+0x8c>
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
 80031a4:	2501      	movs	r5, #1
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
 80031a6:	f7ff ff17 	bl	8002fd8 <xTaskIncrementTick>
 80031aa:	b108      	cbz	r0, 80031b0 <xTaskResumeAll+0xb4>
						{
							xYieldPending = pdTRUE;
 80031ac:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 80031b0:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 80031b4:	3b01      	subs	r3, #1
 80031b6:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 80031ba:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f1      	bne.n	80031a6 <xTaskResumeAll+0xaa>
 80031c2:	e7e1      	b.n	8003188 <xTaskResumeAll+0x8c>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80031c4:	f001 faf0 	bl	80047a8 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80031c8:	f001 fb2e 	bl	8004828 <vPortExitCritical>

	return xAlreadyYielded;
}
 80031cc:	4620      	mov	r0, r4
 80031ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031d2:	bf00      	nop
 80031d4:	200009e0 	.word	0x200009e0

080031d8 <vTaskDelay>:
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80031d8:	b328      	cbz	r0, 8003226 <vTaskDelay+0x4e>
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80031da:	b538      	push	{r3, r4, r5, lr}


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80031dc:	4c16      	ldr	r4, [pc, #88]	; (8003238 <vTaskDelay+0x60>)
 80031de:	4603      	mov	r3, r0
 80031e0:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 80031e4:	bb0a      	cbnz	r2, 800322a <vTaskDelay+0x52>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80031e6:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 80031ea:	3201      	adds	r2, #1
 80031ec:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 80031f0:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80031f4:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 80031f8:	441d      	add	r5, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80031fa:	3004      	adds	r0, #4
 80031fc:	f000 fe76 	bl	8003eec <uxListRemove>
 8003200:	b950      	cbnz	r0, 8003218 <vTaskDelay+0x40>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003202:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003206:	2201      	movs	r2, #1
 8003208:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800320a:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 800320e:	408a      	lsls	r2, r1
 8003210:	ea23 0302 	bic.w	r3, r3, r2
 8003214:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003218:	4628      	mov	r0, r5
 800321a:	f7ff fdab 	bl	8002d74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800321e:	f7ff ff6d 	bl	80030fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003222:	b128      	cbz	r0, 8003230 <vTaskDelay+0x58>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003224:	bd38      	pop	{r3, r4, r5, pc}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 8003226:	f001 babf 	b.w	80047a8 <vPortYield>


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800322a:	f001 fac9 	bl	80047c0 <ulPortSetInterruptMask>
 800322e:	e7fe      	b.n	800322e <vTaskDelay+0x56>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 8003234:	f001 bab8 	b.w	80047a8 <vPortYield>
 8003238:	200009e0 	.word	0x200009e0

0800323c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800323c:	4a14      	ldr	r2, [pc, #80]	; (8003290 <vTaskSwitchContext+0x54>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800323e:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003240:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 8003244:	b9fb      	cbnz	r3, 8003286 <vTaskSwitchContext+0x4a>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 8003246:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800324a:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	f1c3 031f 	rsb	r3, r3, #31
 8003258:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	58d1      	ldr	r1, [r2, r3]
 8003260:	18d0      	adds	r0, r2, r3
 8003262:	b169      	cbz	r1, 8003280 <vTaskSwitchContext+0x44>
 8003264:	6841      	ldr	r1, [r0, #4]
 8003266:	3308      	adds	r3, #8
 8003268:	6849      	ldr	r1, [r1, #4]
 800326a:	4413      	add	r3, r2
 800326c:	4299      	cmp	r1, r3
 800326e:	6041      	str	r1, [r0, #4]
 8003270:	bf08      	it	eq
 8003272:	6849      	ldreq	r1, [r1, #4]
 8003274:	68cb      	ldr	r3, [r1, #12]
 8003276:	bf08      	it	eq
 8003278:	6041      	streq	r1, [r0, #4]
 800327a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800327e:	bd08      	pop	{r3, pc}
 8003280:	f001 fa9e 	bl	80047c0 <ulPortSetInterruptMask>
 8003284:	e7fe      	b.n	8003284 <vTaskSwitchContext+0x48>
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003286:	2301      	movs	r3, #1
 8003288:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800328c:	bd08      	pop	{r3, pc}
 800328e:	bf00      	nop
 8003290:	200009e0 	.word	0x200009e0

08003294 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003294:	b538      	push	{r3, r4, r5, lr}
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 8003296:	b300      	cbz	r0, 80032da <vTaskPlaceOnEventList+0x46>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003298:	4c15      	ldr	r4, [pc, #84]	; (80032f0 <vTaskPlaceOnEventList+0x5c>)
 800329a:	460d      	mov	r5, r1
 800329c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80032a0:	3118      	adds	r1, #24
 80032a2:	f000 fe09 	bl	8003eb8 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80032a6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80032aa:	3004      	adds	r0, #4
 80032ac:	f000 fe1e 	bl	8003eec <uxListRemove>
 80032b0:	b950      	cbnz	r0, 80032c8 <vTaskPlaceOnEventList+0x34>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80032b2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80032b6:	2201      	movs	r2, #1
 80032b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032ba:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 80032be:	408a      	lsls	r2, r1
 80032c0:	ea23 0302 	bic.w	r3, r3, r2
 80032c4:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 80032c8:	1c6b      	adds	r3, r5, #1
 80032ca:	d009      	beq.n	80032e0 <vTaskPlaceOnEventList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 80032cc:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80032d0:	4428      	add	r0, r5
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80032d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80032d6:	f7ff bd4d 	b.w	8002d74 <prvAddCurrentTaskToDelayedList>

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 80032da:	f001 fa71 	bl	80047c0 <ulPortSetInterruptMask>
 80032de:	e7fe      	b.n	80032de <vTaskPlaceOnEventList+0x4a>
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80032e0:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80032e4:	4803      	ldr	r0, [pc, #12]	; (80032f4 <vTaskPlaceOnEventList+0x60>)
 80032e6:	3104      	adds	r1, #4
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80032e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80032ec:	f000 bdd6 	b.w	8003e9c <vListInsertEnd>
 80032f0:	200009e0 	.word	0x200009e0
 80032f4:	20000a44 	.word	0x20000a44

080032f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
 80032f8:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
 80032fa:	b1f0      	cbz	r0, 800333a <vTaskPlaceOnEventListRestricted+0x42>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032fc:	4c10      	ldr	r4, [pc, #64]	; (8003340 <vTaskPlaceOnEventListRestricted+0x48>)
 80032fe:	460d      	mov	r5, r1
 8003300:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003304:	3118      	adds	r1, #24
 8003306:	f000 fdc9 	bl	8003e9c <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called with the scheduler locked so interrupts will not
		access the lists at the same time. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800330a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800330e:	3004      	adds	r0, #4
 8003310:	f000 fdec 	bl	8003eec <uxListRemove>
 8003314:	b950      	cbnz	r0, 800332c <vTaskPlaceOnEventListRestricted+0x34>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003316:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800331a:	2201      	movs	r2, #1
 800331c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800331e:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 8003322:	408a      	lsls	r2, r1
 8003324:	ea23 0302 	bic.w	r3, r3, r2
 8003328:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 800332c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003330:	4428      	add	r0, r5
	}
 8003332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003336:	f7ff bd1d 	b.w	8002d74 <prvAddCurrentTaskToDelayedList>

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
 800333a:	f001 fa41 	bl	80047c0 <ulPortSetInterruptMask>
 800333e:	e7fe      	b.n	800333e <vTaskPlaceOnEventListRestricted+0x46>
 8003340:	200009e0 	.word	0x200009e0

08003344 <xTaskRemoveFromEventList>:
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003344:	68c3      	ldr	r3, [r0, #12]

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003346:	b570      	push	{r4, r5, r6, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003348:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800334a:	b36d      	cbz	r5, 80033a8 <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800334c:	f105 0618 	add.w	r6, r5, #24

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003350:	4c17      	ldr	r4, [pc, #92]	; (80033b0 <xTaskRemoveFromEventList+0x6c>)

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003352:	4630      	mov	r0, r6
 8003354:	f000 fdca 	bl	8003eec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003358:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 800335c:	b9f3      	cbnz	r3, 800339c <xTaskRemoveFromEventList+0x58>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800335e:	1d2e      	adds	r6, r5, #4
 8003360:	4630      	mov	r0, r6
 8003362:	f000 fdc3 	bl	8003eec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003366:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003368:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 800336c:	2201      	movs	r2, #1
 800336e:	4082      	lsls	r2, r0
 8003370:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003374:	4313      	orrs	r3, r2
 8003376:	4631      	mov	r1, r6
 8003378:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800337c:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 8003380:	f000 fd8c 	bl	8003e9c <vListInsertEnd>
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003384:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003388:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800338a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338c:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <xTaskRemoveFromEventList+0x6c>)
 800338e:	4291      	cmp	r1, r2
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003390:	bf86      	itte	hi
 8003392:	2001      	movhi	r0, #1
 8003394:	f8c3 00e0 	strhi.w	r0, [r3, #224]	; 0xe0
	}
	else
	{
		xReturn = pdFALSE;
 8003398:	2000      	movls	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 800339a:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800339c:	4631      	mov	r1, r6
 800339e:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80033a2:	f000 fd7b 	bl	8003e9c <vListInsertEnd>
 80033a6:	e7ed      	b.n	8003384 <xTaskRemoveFromEventList+0x40>
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
	configASSERT( pxUnblockedTCB );
 80033a8:	f001 fa0a 	bl	80047c0 <ulPortSetInterruptMask>
 80033ac:	e7fe      	b.n	80033ac <xTaskRemoveFromEventList+0x68>
 80033ae:	bf00      	nop
 80033b0:	200009e0 	.word	0x200009e0

080033b4 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80033b4:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 80033b6:	b138      	cbz	r0, 80033c8 <vTaskSetTimeOutState+0x14>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <vTaskSetTimeOutState+0x1c>)
 80033ba:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
	pxTimeOut->xTimeOnEntering = xTickCount;
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c2:	e880 000c 	stmia.w	r0, {r2, r3}
 80033c6:	bd08      	pop	{r3, pc}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
 80033c8:	f001 f9fa 	bl	80047c0 <ulPortSetInterruptMask>
 80033cc:	e7fe      	b.n	80033cc <vTaskSetTimeOutState+0x18>
 80033ce:	bf00      	nop
 80033d0:	200009e0 	.word	0x200009e0

080033d4 <xTaskCheckForTimeOut>:
	pxTimeOut->xTimeOnEntering = xTickCount;
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80033d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80033d6:	b380      	cbz	r0, 800343a <xTaskCheckForTimeOut+0x66>
 80033d8:	460e      	mov	r6, r1
	configASSERT( pxTicksToWait );
 80033da:	b359      	cbz	r1, 8003434 <xTaskCheckForTimeOut+0x60>
 80033dc:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
 80033de:	f001 fa05 	bl	80047ec <vPortEnterCritical>

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 80033e2:	6832      	ldr	r2, [r6, #0]
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80033e4:	4816      	ldr	r0, [pc, #88]	; (8003440 <xTaskCheckForTimeOut+0x6c>)

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 80033e6:	1c53      	adds	r3, r2, #1
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80033e8:	f8d0 5090 	ldr.w	r5, [r0, #144]	; 0x90

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 80033ec:	d01d      	beq.n	800342a <xTaskCheckForTimeOut+0x56>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80033ee:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 80033f2:	6821      	ldr	r1, [r4, #0]
 80033f4:	4299      	cmp	r1, r3
 80033f6:	6863      	ldr	r3, [r4, #4]
 80033f8:	d001      	beq.n	80033fe <xTaskCheckForTimeOut+0x2a>
 80033fa:	429d      	cmp	r5, r3
 80033fc:	d210      	bcs.n	8003420 <xTaskCheckForTimeOut+0x4c>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 80033fe:	1ae9      	subs	r1, r5, r3
 8003400:	428a      	cmp	r2, r1
 8003402:	d90d      	bls.n	8003420 <xTaskCheckForTimeOut+0x4c>
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003404:	f8d0 70d8 	ldr.w	r7, [r0, #216]	; 0xd8
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8003408:	1b52      	subs	r2, r2, r5

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
	pxTimeOut->xTimeOnEntering = xTickCount;
 800340a:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800340e:	4413      	add	r3, r2
 8003410:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
 8003412:	2500      	movs	r5, #0
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003414:	6027      	str	r7, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003416:	6061      	str	r1, [r4, #4]
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8003418:	f001 fa06 	bl	8004828 <vPortExitCritical>

	return xReturn;
}
 800341c:	4628      	mov	r0, r5
 800341e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8003420:	2501      	movs	r5, #1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8003422:	f001 fa01 	bl	8004828 <vPortExitCritical>

	return xReturn;
}
 8003426:	4628      	mov	r0, r5
 8003428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
 800342a:	2500      	movs	r5, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 800342c:	f001 f9fc 	bl	8004828 <vPortExitCritical>

	return xReturn;
}
 8003430:	4628      	mov	r0, r5
 8003432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );
 8003434:	f001 f9c4 	bl	80047c0 <ulPortSetInterruptMask>
 8003438:	e7fe      	b.n	8003438 <xTaskCheckForTimeOut+0x64>

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800343a:	f001 f9c1 	bl	80047c0 <ulPortSetInterruptMask>
 800343e:	e7fe      	b.n	800343e <xTaskCheckForTimeOut+0x6a>
 8003440:	200009e0 	.word	0x200009e0

08003444 <vTaskMissedYield>:
}
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 8003444:	4b02      	ldr	r3, [pc, #8]	; (8003450 <vTaskMissedYield+0xc>)
 8003446:	2201      	movs	r2, #1
 8003448:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	200009e0 	.word	0x200009e0

08003454 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003454:	4b06      	ldr	r3, [pc, #24]	; (8003470 <xTaskGetSchedulerState+0x1c>)
 8003456:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800345a:	b132      	cbz	r2, 800346a <xTaskGetSchedulerState+0x16>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800345c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003460:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003462:	bf0c      	ite	eq
 8003464:	2002      	moveq	r0, #2
 8003466:	2000      	movne	r0, #0
 8003468:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800346a:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	200009e0 	.word	0x200009e0

08003474 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8003474:	2800      	cmp	r0, #0
 8003476:	d047      	beq.n	8003508 <vTaskPriorityInherit+0x94>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800347a:	4c24      	ldr	r4, [pc, #144]	; (800350c <vTaskPriorityInherit+0x98>)
 800347c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800347e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003482:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003484:	4293      	cmp	r3, r2
 8003486:	d214      	bcs.n	80034b2 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003488:	6982      	ldr	r2, [r0, #24]
 800348a:	2a00      	cmp	r2, #0
 800348c:	db05      	blt.n	800349a <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800348e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003492:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003494:	f1c2 0205 	rsb	r2, r2, #5
 8003498:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800349a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800349e:	6942      	ldr	r2, [r0, #20]
 80034a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80034a4:	429a      	cmp	r2, r3
 80034a6:	4d19      	ldr	r5, [pc, #100]	; (800350c <vTaskPriorityInherit+0x98>)
 80034a8:	d004      	beq.n	80034b4 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80034aa:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	62c3      	str	r3, [r0, #44]	; 0x2c
 80034b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80034b4:	1d07      	adds	r7, r0, #4
 80034b6:	4606      	mov	r6, r0
 80034b8:	4638      	mov	r0, r7
 80034ba:	f000 fd17 	bl	8003eec <uxListRemove>
 80034be:	b970      	cbnz	r0, 80034de <vTaskPriorityInherit+0x6a>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80034c0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80034c2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80034c6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80034ca:	b942      	cbnz	r2, 80034de <vTaskPriorityInherit+0x6a>
 80034cc:	f8d5 20d0 	ldr.w	r2, [r5, #208]	; 0xd0
 80034d0:	2101      	movs	r1, #1
 80034d2:	fa01 f303 	lsl.w	r3, r1, r3
 80034d6:	ea22 0303 	bic.w	r3, r2, r3
 80034da:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80034de:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
					prvAddTaskToReadyList( pxTCB );
 80034e2:	2501      	movs	r5, #1
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80034e6:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
 80034ea:	409d      	lsls	r5, r3
 80034ec:	eb03 0083 	add.w	r0, r3, r3, lsl #2
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80034f0:	62f3      	str	r3, [r6, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80034f2:	ea45 0302 	orr.w	r3, r5, r2
 80034f6:	4639      	mov	r1, r7
 80034f8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80034fc:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003500:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
 8003504:	f000 bcca 	b.w	8003e9c <vListInsertEnd>
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	200009e0 	.word	0x200009e0

08003510 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 8003510:	b148      	cbz	r0, 8003526 <xTaskPriorityDisinherit+0x16>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003514:	4d21      	ldr	r5, [pc, #132]	; (800359c <xTaskPriorityDisinherit+0x8c>)
 8003516:	4604      	mov	r4, r0
 8003518:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800351c:	4298      	cmp	r0, r3
 800351e:	d004      	beq.n	800352a <xTaskPriorityDisinherit+0x1a>
 8003520:	f001 f94e 	bl	80047c0 <ulPortSetInterruptMask>
 8003524:	e7fe      	b.n	8003524 <xTaskPriorityDisinherit+0x14>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 8003526:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8003528:	4770      	bx	lr
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
 800352a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800352c:	b143      	cbz	r3, 8003540 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800352e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003530:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8003532:	3b01      	subs	r3, #1

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003534:	4291      	cmp	r1, r2
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8003536:	6503      	str	r3, [r0, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003538:	d000      	beq.n	800353c <xTaskPriorityDisinherit+0x2c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800353a:	b123      	cbz	r3, 8003546 <xTaskPriorityDisinherit+0x36>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 800353c:	2000      	movs	r0, #0
 800353e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
 8003540:	f001 f93e 	bl	80047c0 <ulPortSetInterruptMask>
 8003544:	e7fe      	b.n	8003544 <xTaskPriorityDisinherit+0x34>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8003546:	1d07      	adds	r7, r0, #4
 8003548:	4638      	mov	r0, r7
 800354a:	f000 fccf 	bl	8003eec <uxListRemove>
 800354e:	b968      	cbnz	r0, 800356c <xTaskPriorityDisinherit+0x5c>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003550:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003552:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8003556:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800355a:	b93b      	cbnz	r3, 800356c <xTaskPriorityDisinherit+0x5c>
 800355c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
 8003560:	2201      	movs	r2, #1
 8003562:	4082      	lsls	r2, r0
 8003564:	ea23 0302 	bic.w	r3, r3, r2
 8003568:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800356c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
 800356e:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
 8003572:	2601      	movs	r6, #1
 8003574:	fa06 fe00 	lsl.w	lr, r6, r0
					pxTCB->uxPriority = pxTCB->uxBasePriority;

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003578:	f1c0 0205 	rsb	r2, r0, #5
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800357c:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
 800357e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003582:	ea4e 0303 	orr.w	r3, lr, r3
 8003586:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800358a:	4639      	mov	r1, r7
					pxTCB->uxPriority = pxTCB->uxBasePriority;

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800358c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800358e:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
 8003592:	f000 fc83 	bl	8003e9c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003596:	4630      	mov	r0, r6
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8003598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800359a:	bf00      	nop
 800359c:	200009e0 	.word	0x200009e0

080035a0 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80035a0:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <pvTaskIncrementMutexHeldCount+0x18>)
 80035a2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80035a6:	b122      	cbz	r2, 80035b2 <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80035a8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80035ac:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80035ae:	3201      	adds	r2, #1
 80035b0:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 80035b2:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
	}
 80035b6:	4770      	bx	lr
 80035b8:	200009e0 	.word	0x200009e0

080035bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 80035c0:	f04f 0800 	mov.w	r8, #0
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035c4:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80035c6:	4645      	mov	r5, r8
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035c8:	4f6a      	ldr	r7, [pc, #424]	; (8003774 <HAL_GPIO_Init+0x1b8>)
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80035ca:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 800378c <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80035ce:	4e6a      	ldr	r6, [pc, #424]	; (8003778 <HAL_GPIO_Init+0x1bc>)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80035d0:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 8003790 <HAL_GPIO_Init+0x1d4>
 80035d4:	e002      	b.n	80035dc <HAL_GPIO_Init+0x20>
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80035d6:	3501      	adds	r5, #1
 80035d8:	2d10      	cmp	r5, #16
 80035da:	d07c      	beq.n	80036d6 <HAL_GPIO_Init+0x11a>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80035dc:	2301      	movs	r3, #1
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 80035de:	680a      	ldr	r2, [r1, #0]

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80035e0:	40ab      	lsls	r3, r5
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 80035e2:	ea33 0202 	bics.w	r2, r3, r2
 80035e6:	d1f6      	bne.n	80035d6 <HAL_GPIO_Init+0x1a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035e8:	684a      	ldr	r2, [r1, #4]
 80035ea:	2a12      	cmp	r2, #18
 80035ec:	f000 8099 	beq.w	8003722 <HAL_GPIO_Init+0x166>
 80035f0:	f200 8082 	bhi.w	80036f8 <HAL_GPIO_Init+0x13c>
 80035f4:	2a02      	cmp	r2, #2
 80035f6:	f000 809b 	beq.w	8003730 <HAL_GPIO_Init+0x174>
 80035fa:	d977      	bls.n	80036ec <HAL_GPIO_Init+0x130>
 80035fc:	2a03      	cmp	r2, #3
 80035fe:	f000 8094 	beq.w	800372a <HAL_GPIO_Init+0x16e>
 8003602:	2a11      	cmp	r2, #17
 8003604:	d102      	bne.n	800360c <HAL_GPIO_Init+0x50>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003606:	68ca      	ldr	r2, [r1, #12]
 8003608:	f102 0804 	add.w	r8, r2, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800360c:	2bff      	cmp	r3, #255	; 0xff
 800360e:	d865      	bhi.n	80036dc <HAL_GPIO_Init+0x120>
 8003610:	4681      	mov	r9, r0
 8003612:	6802      	ldr	r2, [r0, #0]
 8003614:	4692      	mov	sl, r2
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8003616:	00aa      	lsls	r2, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8003618:	240f      	movs	r4, #15
 800361a:	fa04 fb02 	lsl.w	fp, r4, r2
 800361e:	ea2a 0a0b 	bic.w	sl, sl, fp
 8003622:	fa08 f202 	lsl.w	r2, r8, r2
 8003626:	ea4a 0202 	orr.w	r2, sl, r2
 800362a:	f8c9 2000 	str.w	r2, [r9]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800362e:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8003632:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8003636:	d0ce      	beq.n	80035d6 <HAL_GPIO_Init+0x1a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	f025 0903 	bic.w	r9, r5, #3
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	61ba      	str	r2, [r7, #24]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 800364a:	f002 0201 	and.w	r2, r2, #1
 800364e:	9203      	str	r2, [sp, #12]
 8003650:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003654:	f005 0203 	and.w	r2, r5, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003658:	f8dd b00c 	ldr.w	fp, [sp, #12]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800365c:	0092      	lsls	r2, r2, #2
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
 800365e:	f8d9 b008 	ldr.w	fp, [r9, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003662:	4094      	lsls	r4, r2
 8003664:	ea2b 0404 	bic.w	r4, fp, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003668:	4570      	cmp	r0, lr
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800366a:	9401      	str	r4, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800366c:	d075      	beq.n	800375a <HAL_GPIO_Init+0x19e>
 800366e:	4560      	cmp	r0, ip
 8003670:	d075      	beq.n	800375e <HAL_GPIO_Init+0x1a2>
 8003672:	4c42      	ldr	r4, [pc, #264]	; (800377c <HAL_GPIO_Init+0x1c0>)
 8003674:	42a0      	cmp	r0, r4
 8003676:	d077      	beq.n	8003768 <HAL_GPIO_Init+0x1ac>
 8003678:	4c41      	ldr	r4, [pc, #260]	; (8003780 <HAL_GPIO_Init+0x1c4>)
 800367a:	42a0      	cmp	r0, r4
 800367c:	bf0c      	ite	eq
 800367e:	f04f 0b03 	moveq.w	fp, #3
 8003682:	f04f 0b04 	movne.w	fp, #4
 8003686:	fa0b f202 	lsl.w	r2, fp, r2
 800368a:	9c01      	ldr	r4, [sp, #4]
        AFIO->EXTICR[position >> 2] = temp;
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800368c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003690:	ea44 0402 	orr.w	r4, r4, r2
        AFIO->EXTICR[position >> 2] = temp;
 8003694:	f8c9 4008 	str.w	r4, [r9, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8003698:	6832      	ldr	r2, [r6, #0]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800369a:	f105 0501 	add.w	r5, r5, #1
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800369e:	bf14      	ite	ne
 80036a0:	431a      	orrne	r2, r3
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80036a2:	439a      	biceq	r2, r3
 80036a4:	6032      	str	r2, [r6, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80036a6:	6872      	ldr	r2, [r6, #4]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036a8:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80036ac:	bf14      	ite	ne
 80036ae:	431a      	orrne	r2, r3
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80036b0:	439a      	biceq	r2, r3
 80036b2:	6072      	str	r2, [r6, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80036b4:	68b2      	ldr	r2, [r6, #8]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036b6:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80036ba:	bf14      	ite	ne
 80036bc:	431a      	orrne	r2, r3
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80036be:	439a      	biceq	r2, r3
 80036c0:	60b2      	str	r2, [r6, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80036c2:	68f2      	ldr	r2, [r6, #12]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036c4:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80036c8:	bf14      	ite	ne
 80036ca:	4313      	orrne	r3, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80036cc:	ea22 0303 	biceq.w	r3, r2, r3
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80036d0:	2d10      	cmp	r5, #16
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80036d2:	60f3      	str	r3, [r6, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80036d4:	d182      	bne.n	80035dc <HAL_GPIO_Init+0x20>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 80036d6:	b005      	add	sp, #20
 80036d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036dc:	6844      	ldr	r4, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80036de:	f1a5 0208 	sub.w	r2, r5, #8
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036e2:	46a2      	mov	sl, r4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80036e4:	0092      	lsls	r2, r2, #2
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036e6:	f100 0904 	add.w	r9, r0, #4
 80036ea:	e795      	b.n	8003618 <HAL_GPIO_Init+0x5c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80036ec:	b1a2      	cbz	r2, 8003718 <HAL_GPIO_Init+0x15c>
 80036ee:	2a01      	cmp	r2, #1
 80036f0:	d18c      	bne.n	800360c <HAL_GPIO_Init+0x50>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036f2:	f8d1 800c 	ldr.w	r8, [r1, #12]
          break;
 80036f6:	e789      	b.n	800360c <HAL_GPIO_Init+0x50>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80036f8:	4c22      	ldr	r4, [pc, #136]	; (8003784 <HAL_GPIO_Init+0x1c8>)
 80036fa:	42a2      	cmp	r2, r4
 80036fc:	d00c      	beq.n	8003718 <HAL_GPIO_Init+0x15c>
 80036fe:	d91b      	bls.n	8003738 <HAL_GPIO_Init+0x17c>
 8003700:	4c21      	ldr	r4, [pc, #132]	; (8003788 <HAL_GPIO_Init+0x1cc>)
 8003702:	42a2      	cmp	r2, r4
 8003704:	d008      	beq.n	8003718 <HAL_GPIO_Init+0x15c>
 8003706:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 800370a:	42a2      	cmp	r2, r4
 800370c:	d004      	beq.n	8003718 <HAL_GPIO_Init+0x15c>
 800370e:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
 8003712:	42a2      	cmp	r2, r4
 8003714:	f47f af7a 	bne.w	800360c <HAL_GPIO_Init+0x50>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8003718:	688a      	ldr	r2, [r1, #8]
 800371a:	b9ba      	cbnz	r2, 800374c <HAL_GPIO_Init+0x190>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800371c:	f04f 0804 	mov.w	r8, #4
 8003720:	e774      	b.n	800360c <HAL_GPIO_Init+0x50>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003722:	68ca      	ldr	r2, [r1, #12]
 8003724:	f102 080c 	add.w	r8, r2, #12
          break;
 8003728:	e770      	b.n	800360c <HAL_GPIO_Init+0x50>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800372a:	f04f 0800 	mov.w	r8, #0
 800372e:	e76d      	b.n	800360c <HAL_GPIO_Init+0x50>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003730:	68ca      	ldr	r2, [r1, #12]
 8003732:	f102 0808 	add.w	r8, r2, #8
          break;
 8003736:	e769      	b.n	800360c <HAL_GPIO_Init+0x50>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003738:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
 800373c:	42a2      	cmp	r2, r4
 800373e:	d0eb      	beq.n	8003718 <HAL_GPIO_Init+0x15c>
 8003740:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8003744:	42a2      	cmp	r2, r4
 8003746:	f47f af61 	bne.w	800360c <HAL_GPIO_Init+0x50>
 800374a:	e7e5      	b.n	8003718 <HAL_GPIO_Init+0x15c>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800374c:	2a01      	cmp	r2, #1
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 800374e:	bf0c      	ite	eq
 8003750:	6103      	streq	r3, [r0, #16]
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8003752:	6143      	strne	r3, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003754:	f04f 0808 	mov.w	r8, #8
 8003758:	e758      	b.n	800360c <HAL_GPIO_Init+0x50>
 800375a:	2200      	movs	r2, #0
 800375c:	e795      	b.n	800368a <HAL_GPIO_Init+0xce>
 800375e:	f04f 0b01 	mov.w	fp, #1
 8003762:	fa0b f202 	lsl.w	r2, fp, r2
 8003766:	e790      	b.n	800368a <HAL_GPIO_Init+0xce>
 8003768:	f04f 0b02 	mov.w	fp, #2
 800376c:	fa0b f202 	lsl.w	r2, fp, r2
 8003770:	e78b      	b.n	800368a <HAL_GPIO_Init+0xce>
 8003772:	bf00      	nop
 8003774:	40021000 	.word	0x40021000
 8003778:	40010400 	.word	0x40010400
 800377c:	40011000 	.word	0x40011000
 8003780:	40011400 	.word	0x40011400
 8003784:	10210000 	.word	0x10210000
 8003788:	10310000 	.word	0x10310000
 800378c:	40010800 	.word	0x40010800
 8003790:	40010c00 	.word	0x40010c00

08003794 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003794:	b902      	cbnz	r2, 8003798 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003796:	0409      	lsls	r1, r1, #16
 8003798:	6101      	str	r1, [r0, #16]
 800379a:	4770      	bx	lr

0800379c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800379c:	68c3      	ldr	r3, [r0, #12]
 800379e:	4059      	eors	r1, r3
 80037a0:	60c1      	str	r1, [r0, #12]
 80037a2:	4770      	bx	lr

080037a4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80037a4:	b318      	cbz	r0, 80037ee <HAL_DMA_Init+0x4a>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 80037a6:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80037aa:	b430      	push	{r4, r5}
 80037ac:	4603      	mov	r3, r0
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 80037ae:	b90a      	cbnz	r2, 80037b4 <HAL_DMA_Init+0x10>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 80037b0:	f880 2020 	strb.w	r2, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037b4:	1d18      	adds	r0, r3, #4
 80037b6:	c815      	ldmia	r0, {r0, r2, r4}
 80037b8:	6919      	ldr	r1, [r3, #16]
 80037ba:	4302      	orrs	r2, r0
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037bc:	681d      	ldr	r5, [r3, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037be:	4314      	orrs	r4, r2
 80037c0:	695a      	ldr	r2, [r3, #20]
 80037c2:	ea44 0001 	orr.w	r0, r4, r1
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037c6:	6829      	ldr	r1, [r5, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037c8:	699c      	ldr	r4, [r3, #24]
 80037ca:	4302      	orrs	r2, r0
 80037cc:	69d8      	ldr	r0, [r3, #28]
 80037ce:	4314      	orrs	r4, r2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80037d0:	f421 527f 	bic.w	r2, r1, #16320	; 0x3fc0
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037d4:	4320      	orrs	r0, r4

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80037d6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037da:	4302      	orrs	r2, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037dc:	2100      	movs	r1, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037de:	2401      	movs	r4, #1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80037e0:	602a      	str	r2, [r5, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  
  return HAL_OK;
 80037e2:	4608      	mov	r0, r1
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037e4:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037e8:	6359      	str	r1, [r3, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  
  return HAL_OK;
}
 80037ea:	bc30      	pop	{r4, r5}
 80037ec:	4770      	bx	lr
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80037ee:	2001      	movs	r0, #1
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop

080037f4 <HAL_DMA_IRQHandler>:
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80037f4:	6803      	ldr	r3, [r0, #0]
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037f6:	b570      	push	{r4, r5, r6, lr}
 80037f8:	4604      	mov	r4, r0
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80037fa:	48ad      	ldr	r0, [pc, #692]	; (8003ab0 <HAL_DMA_IRQHandler+0x2bc>)
 80037fc:	49ad      	ldr	r1, [pc, #692]	; (8003ab4 <HAL_DMA_IRQHandler+0x2c0>)
 80037fe:	4283      	cmp	r3, r0
 8003800:	461a      	mov	r2, r3
 8003802:	680d      	ldr	r5, [r1, #0]
 8003804:	d038      	beq.n	8003878 <HAL_DMA_IRQHandler+0x84>
 8003806:	3014      	adds	r0, #20
 8003808:	4283      	cmp	r3, r0
 800380a:	f000 80d6 	beq.w	80039ba <HAL_DMA_IRQHandler+0x1c6>
 800380e:	3014      	adds	r0, #20
 8003810:	4283      	cmp	r3, r0
 8003812:	f000 80df 	beq.w	80039d4 <HAL_DMA_IRQHandler+0x1e0>
 8003816:	3014      	adds	r0, #20
 8003818:	4283      	cmp	r3, r0
 800381a:	f000 8103 	beq.w	8003a24 <HAL_DMA_IRQHandler+0x230>
 800381e:	3014      	adds	r0, #20
 8003820:	4283      	cmp	r3, r0
 8003822:	f000 80f2 	beq.w	8003a0a <HAL_DMA_IRQHandler+0x216>
 8003826:	3014      	adds	r0, #20
 8003828:	4283      	cmp	r3, r0
 800382a:	f000 8120 	beq.w	8003a6e <HAL_DMA_IRQHandler+0x27a>
 800382e:	012e      	lsls	r6, r5, #4
 8003830:	f140 81a3 	bpl.w	8003b7a <HAL_DMA_IRQHandler+0x386>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003834:	6819      	ldr	r1, [r3, #0]
 8003836:	070e      	lsls	r6, r1, #28
 8003838:	d56b      	bpl.n	8003912 <HAL_DMA_IRQHandler+0x11e>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800383a:	6819      	ldr	r1, [r3, #0]
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800383c:	489c      	ldr	r0, [pc, #624]	; (8003ab0 <HAL_DMA_IRQHandler+0x2bc>)
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800383e:	f021 0108 	bic.w	r1, r1, #8
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8003842:	4283      	cmp	r3, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8003844:	6019      	str	r1, [r3, #0]
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8003846:	d051      	beq.n	80038ec <HAL_DMA_IRQHandler+0xf8>
 8003848:	499b      	ldr	r1, [pc, #620]	; (8003ab8 <HAL_DMA_IRQHandler+0x2c4>)
 800384a:	428b      	cmp	r3, r1
 800384c:	f000 811e 	beq.w	8003a8c <HAL_DMA_IRQHandler+0x298>
 8003850:	3114      	adds	r1, #20
 8003852:	428b      	cmp	r3, r1
 8003854:	f000 814e 	beq.w	8003af4 <HAL_DMA_IRQHandler+0x300>
 8003858:	3114      	adds	r1, #20
 800385a:	428b      	cmp	r3, r1
 800385c:	f000 815e 	beq.w	8003b1c <HAL_DMA_IRQHandler+0x328>
 8003860:	3114      	adds	r1, #20
 8003862:	428b      	cmp	r3, r1
 8003864:	f000 8140 	beq.w	8003ae8 <HAL_DMA_IRQHandler+0x2f4>
 8003868:	3114      	adds	r1, #20
 800386a:	428b      	cmp	r3, r1
 800386c:	bf0c      	ite	eq
 800386e:	f44f 0100 	moveq.w	r1, #8388608	; 0x800000
 8003872:	f04f 6100 	movne.w	r1, #134217728	; 0x8000000
 8003876:	e03a      	b.n	80038ee <HAL_DMA_IRQHandler+0xfa>
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8003878:	0728      	lsls	r0, r5, #28
 800387a:	d4db      	bmi.n	8003834 <HAL_DMA_IRQHandler+0x40>
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800387c:	6809      	ldr	r1, [r1, #0]
 800387e:	074d      	lsls	r5, r1, #29
 8003880:	f140 80be 	bpl.w	8003a00 <HAL_DMA_IRQHandler+0x20c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	0756      	lsls	r6, r2, #29
 8003888:	f140 80ba 	bpl.w	8003a00 <HAL_DMA_IRQHandler+0x20c>
    { 
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	0690      	lsls	r0, r2, #26
 8003890:	f100 80d9 	bmi.w	8003a46 <HAL_DMA_IRQHandler+0x252>
 8003894:	4a86      	ldr	r2, [pc, #536]	; (8003ab0 <HAL_DMA_IRQHandler+0x2bc>)
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003896:	6819      	ldr	r1, [r3, #0]
 8003898:	f021 0104 	bic.w	r1, r1, #4
 800389c:	6019      	str	r1, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800389e:	4984      	ldr	r1, [pc, #528]	; (8003ab0 <HAL_DMA_IRQHandler+0x2bc>)
 80038a0:	428a      	cmp	r2, r1
 80038a2:	f000 80d0 	beq.w	8003a46 <HAL_DMA_IRQHandler+0x252>
 80038a6:	4984      	ldr	r1, [pc, #528]	; (8003ab8 <HAL_DMA_IRQHandler+0x2c4>)
 80038a8:	428a      	cmp	r2, r1
 80038aa:	f000 80f1 	beq.w	8003a90 <HAL_DMA_IRQHandler+0x29c>
 80038ae:	3114      	adds	r1, #20
 80038b0:	428a      	cmp	r2, r1
 80038b2:	f000 8122 	beq.w	8003afa <HAL_DMA_IRQHandler+0x306>
 80038b6:	3114      	adds	r1, #20
 80038b8:	428a      	cmp	r2, r1
 80038ba:	f000 8132 	beq.w	8003b22 <HAL_DMA_IRQHandler+0x32e>
 80038be:	3114      	adds	r1, #20
 80038c0:	428a      	cmp	r2, r1
 80038c2:	f000 8103 	beq.w	8003acc <HAL_DMA_IRQHandler+0x2d8>
 80038c6:	3114      	adds	r1, #20
 80038c8:	428a      	cmp	r2, r1
 80038ca:	f000 8138 	beq.w	8003b3e <HAL_DMA_IRQHandler+0x34a>
 80038ce:	4879      	ldr	r0, [pc, #484]	; (8003ab4 <HAL_DMA_IRQHandler+0x2c0>)

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;

      if(hdma->XferHalfCpltCallback != NULL)
 80038d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80038d2:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80038d6:	2511      	movs	r5, #17
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80038d8:	6046      	str	r6, [r0, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80038da:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 80038de:	2900      	cmp	r1, #0
 80038e0:	f040 80b9 	bne.w	8003a56 <HAL_DMA_IRQHandler+0x262>
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80038e4:	6800      	ldr	r0, [r0, #0]
 80038e6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038ea:	e031      	b.n	8003950 <HAL_DMA_IRQHandler+0x15c>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80038ec:	2108      	movs	r1, #8
 80038ee:	4871      	ldr	r0, [pc, #452]	; (8003ab4 <HAL_DMA_IRQHandler+0x2c0>)
      hdma->State = HAL_DMA_STATE_ERROR;
      
      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
      
      if (hdma->XferErrorCallback != NULL)
 80038f0:	6b25      	ldr	r5, [r4, #48]	; 0x30
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80038f2:	6041      	str	r1, [r0, #4]
      
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80038f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80038f6:	2604      	movs	r6, #4
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
      
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80038f8:	f041 0101 	orr.w	r1, r1, #1
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
      
      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 80038fc:	2000      	movs	r0, #0
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
      
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80038fe:	6361      	str	r1, [r4, #52]	; 0x34
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003900:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
      
      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 8003904:	f884 0020 	strb.w	r0, [r4, #32]
      
      if (hdma->XferErrorCallback != NULL)
 8003908:	b11d      	cbz	r5, 8003912 <HAL_DMA_IRQHandler+0x11e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800390a:	4620      	mov	r0, r4
 800390c:	47a8      	blx	r5
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	461a      	mov	r2, r3
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8003912:	4867      	ldr	r0, [pc, #412]	; (8003ab0 <HAL_DMA_IRQHandler+0x2bc>)
 8003914:	4967      	ldr	r1, [pc, #412]	; (8003ab4 <HAL_DMA_IRQHandler+0x2c0>)
 8003916:	4283      	cmp	r3, r0
 8003918:	6809      	ldr	r1, [r1, #0]
 800391a:	d0b0      	beq.n	800387e <HAL_DMA_IRQHandler+0x8a>
 800391c:	3014      	adds	r0, #20
 800391e:	4283      	cmp	r3, r0
 8003920:	d04f      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x1ce>
 8003922:	3014      	adds	r0, #20
 8003924:	4283      	cmp	r3, r0
 8003926:	d059      	beq.n	80039dc <HAL_DMA_IRQHandler+0x1e8>
 8003928:	3014      	adds	r0, #20
 800392a:	4283      	cmp	r3, r0
 800392c:	d07e      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x238>
 800392e:	3014      	adds	r0, #20
 8003930:	4283      	cmp	r3, r0
 8003932:	d06e      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x21e>
 8003934:	3014      	adds	r0, #20
 8003936:	4283      	cmp	r3, r0
 8003938:	f000 809d 	beq.w	8003a76 <HAL_DMA_IRQHandler+0x282>
 800393c:	014e      	lsls	r6, r1, #5
 800393e:	d503      	bpl.n	8003948 <HAL_DMA_IRQHandler+0x154>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003940:	6819      	ldr	r1, [r3, #0]
 8003942:	074e      	lsls	r6, r1, #29
 8003944:	f100 8109 	bmi.w	8003b5a <HAL_DMA_IRQHandler+0x366>
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8003948:	485a      	ldr	r0, [pc, #360]	; (8003ab4 <HAL_DMA_IRQHandler+0x2c0>)
 800394a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800394e:	6800      	ldr	r0, [r0, #0]
 8003950:	4201      	tst	r1, r0
 8003952:	d03e      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x1de>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003954:	6819      	ldr	r1, [r3, #0]
 8003956:	0788      	lsls	r0, r1, #30
 8003958:	d53b      	bpl.n	80039d2 <HAL_DMA_IRQHandler+0x1de>
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800395a:	6819      	ldr	r1, [r3, #0]
 800395c:	0689      	lsls	r1, r1, #26
 800395e:	d403      	bmi.n	8003968 <HAL_DMA_IRQHandler+0x174>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8003960:	6819      	ldr	r1, [r3, #0]
 8003962:	f021 0102 	bic.w	r1, r1, #2
 8003966:	6019      	str	r1, [r3, #0]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003968:	4b51      	ldr	r3, [pc, #324]	; (8003ab0 <HAL_DMA_IRQHandler+0x2bc>)
 800396a:	429a      	cmp	r2, r3
 800396c:	d067      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x24a>
 800396e:	3314      	adds	r3, #20
 8003970:	429a      	cmp	r2, r3
 8003972:	d066      	beq.n	8003a42 <HAL_DMA_IRQHandler+0x24e>
 8003974:	3314      	adds	r3, #20
 8003976:	429a      	cmp	r2, r3
 8003978:	f000 8085 	beq.w	8003a86 <HAL_DMA_IRQHandler+0x292>
 800397c:	3314      	adds	r3, #20
 800397e:	429a      	cmp	r2, r3
 8003980:	f000 80b5 	beq.w	8003aee <HAL_DMA_IRQHandler+0x2fa>
 8003984:	3314      	adds	r3, #20
 8003986:	429a      	cmp	r2, r3
 8003988:	f000 80c5 	beq.w	8003b16 <HAL_DMA_IRQHandler+0x322>
 800398c:	3314      	adds	r3, #20
 800398e:	429a      	cmp	r2, r3
 8003990:	bf14      	ite	ne
 8003992:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8003996:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 800399a:	4946      	ldr	r1, [pc, #280]	; (8003ab4 <HAL_DMA_IRQHandler+0x2c0>)
      hdma->State = HAL_DMA_STATE_READY;
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
    
      if(hdma->XferCpltCallback != NULL)
 800399c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800399e:	604a      	str	r2, [r1, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 80039a0:	6b60      	ldr	r0, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039a2:	2101      	movs	r1, #1
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039a4:	2200      	movs	r2, #0
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 80039a6:	6360      	str	r0, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039a8:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039ac:	f884 2020 	strb.w	r2, [r4, #32]
    
      if(hdma->XferCpltCallback != NULL)
 80039b0:	b17b      	cbz	r3, 80039d2 <HAL_DMA_IRQHandler+0x1de>
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80039b2:	4620      	mov	r0, r4
      }
    }
  }
}
 80039b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_UNLOCK(hdma);
    
      if(hdma->XferCpltCallback != NULL)
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80039b8:	4718      	bx	r3
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80039ba:	062d      	lsls	r5, r5, #24
 80039bc:	f53f af3a 	bmi.w	8003834 <HAL_DMA_IRQHandler+0x40>
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80039c0:	6809      	ldr	r1, [r1, #0]
 80039c2:	064e      	lsls	r6, r1, #25
 80039c4:	d413      	bmi.n	80039ee <HAL_DMA_IRQHandler+0x1fa>
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80039c6:	493b      	ldr	r1, [pc, #236]	; (8003ab4 <HAL_DMA_IRQHandler+0x2c0>)
 80039c8:	4a3b      	ldr	r2, [pc, #236]	; (8003ab8 <HAL_DMA_IRQHandler+0x2c4>)
 80039ca:	6808      	ldr	r0, [r1, #0]
 80039cc:	2120      	movs	r1, #32
 80039ce:	4201      	tst	r1, r0
 80039d0:	d1c0      	bne.n	8003954 <HAL_DMA_IRQHandler+0x160>
 80039d2:	bd70      	pop	{r4, r5, r6, pc}
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80039d4:	0528      	lsls	r0, r5, #20
 80039d6:	f53f af2d 	bmi.w	8003834 <HAL_DMA_IRQHandler+0x40>
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80039da:	6809      	ldr	r1, [r1, #0]
 80039dc:	0549      	lsls	r1, r1, #21
 80039de:	f100 80eb 	bmi.w	8003bb8 <HAL_DMA_IRQHandler+0x3c4>
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80039e2:	4934      	ldr	r1, [pc, #208]	; (8003ab4 <HAL_DMA_IRQHandler+0x2c0>)
 80039e4:	4a35      	ldr	r2, [pc, #212]	; (8003abc <HAL_DMA_IRQHandler+0x2c8>)
 80039e6:	6808      	ldr	r0, [r1, #0]
 80039e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039ec:	e7b0      	b.n	8003950 <HAL_DMA_IRQHandler+0x15c>
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	0752      	lsls	r2, r2, #29
 80039f2:	d5e8      	bpl.n	80039c6 <HAL_DMA_IRQHandler+0x1d2>
 80039f4:	4a30      	ldr	r2, [pc, #192]	; (8003ab8 <HAL_DMA_IRQHandler+0x2c4>)
    { 
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80039f6:	6819      	ldr	r1, [r3, #0]
 80039f8:	0689      	lsls	r1, r1, #26
 80039fa:	f53f af54 	bmi.w	80038a6 <HAL_DMA_IRQHandler+0xb2>
 80039fe:	e74a      	b.n	8003896 <HAL_DMA_IRQHandler+0xa2>
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8003a00:	492c      	ldr	r1, [pc, #176]	; (8003ab4 <HAL_DMA_IRQHandler+0x2c0>)
 8003a02:	4a2b      	ldr	r2, [pc, #172]	; (8003ab0 <HAL_DMA_IRQHandler+0x2bc>)
 8003a04:	6808      	ldr	r0, [r1, #0]
 8003a06:	2102      	movs	r1, #2
 8003a08:	e7a2      	b.n	8003950 <HAL_DMA_IRQHandler+0x15c>
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8003a0a:	032d      	lsls	r5, r5, #12
 8003a0c:	f53f af12 	bmi.w	8003834 <HAL_DMA_IRQHandler+0x40>
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8003a10:	6809      	ldr	r1, [r1, #0]
 8003a12:	034d      	lsls	r5, r1, #13
 8003a14:	f100 80ab 	bmi.w	8003b6e <HAL_DMA_IRQHandler+0x37a>
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8003a18:	4926      	ldr	r1, [pc, #152]	; (8003ab4 <HAL_DMA_IRQHandler+0x2c0>)
 8003a1a:	4a29      	ldr	r2, [pc, #164]	; (8003ac0 <HAL_DMA_IRQHandler+0x2cc>)
 8003a1c:	6808      	ldr	r0, [r1, #0]
 8003a1e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8003a22:	e795      	b.n	8003950 <HAL_DMA_IRQHandler+0x15c>
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8003a24:	042e      	lsls	r6, r5, #16
 8003a26:	f53f af05 	bmi.w	8003834 <HAL_DMA_IRQHandler+0x40>
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8003a2a:	6809      	ldr	r1, [r1, #0]
 8003a2c:	044a      	lsls	r2, r1, #17
 8003a2e:	f100 80bd 	bmi.w	8003bac <HAL_DMA_IRQHandler+0x3b8>
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8003a32:	4920      	ldr	r1, [pc, #128]	; (8003ab4 <HAL_DMA_IRQHandler+0x2c0>)
 8003a34:	4a23      	ldr	r2, [pc, #140]	; (8003ac4 <HAL_DMA_IRQHandler+0x2d0>)
 8003a36:	6808      	ldr	r0, [r1, #0]
 8003a38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a3c:	e788      	b.n	8003950 <HAL_DMA_IRQHandler+0x15c>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003a3e:	2202      	movs	r2, #2
 8003a40:	e7ab      	b.n	800399a <HAL_DMA_IRQHandler+0x1a6>
 8003a42:	2220      	movs	r2, #32
 8003a44:	e7a9      	b.n	800399a <HAL_DMA_IRQHandler+0x1a6>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003a46:	4a1b      	ldr	r2, [pc, #108]	; (8003ab4 <HAL_DMA_IRQHandler+0x2c0>)

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;

      if(hdma->XferHalfCpltCallback != NULL)
 8003a48:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003a4a:	2504      	movs	r5, #4

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8003a4c:	2011      	movs	r0, #17
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003a4e:	6055      	str	r5, [r2, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8003a50:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 8003a54:	b341      	cbz	r1, 8003aa8 <HAL_DMA_IRQHandler+0x2b4>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003a56:	4620      	mov	r0, r4
 8003a58:	4788      	blx	r1
 8003a5a:	6823      	ldr	r3, [r4, #0]
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8003a5c:	4914      	ldr	r1, [pc, #80]	; (8003ab0 <HAL_DMA_IRQHandler+0x2bc>)
 8003a5e:	4815      	ldr	r0, [pc, #84]	; (8003ab4 <HAL_DMA_IRQHandler+0x2c0>)
 8003a60:	428b      	cmp	r3, r1
 8003a62:	461a      	mov	r2, r3
 8003a64:	6800      	ldr	r0, [r0, #0]
 8003a66:	f040 808a 	bne.w	8003b7e <HAL_DMA_IRQHandler+0x38a>
 8003a6a:	2102      	movs	r1, #2
 8003a6c:	e770      	b.n	8003950 <HAL_DMA_IRQHandler+0x15c>
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8003a6e:	0228      	lsls	r0, r5, #8
 8003a70:	f53f aee0 	bmi.w	8003834 <HAL_DMA_IRQHandler+0x40>
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8003a74:	6809      	ldr	r1, [r1, #0]
 8003a76:	0248      	lsls	r0, r1, #9
 8003a78:	d474      	bmi.n	8003b64 <HAL_DMA_IRQHandler+0x370>
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8003a7a:	490e      	ldr	r1, [pc, #56]	; (8003ab4 <HAL_DMA_IRQHandler+0x2c0>)
 8003a7c:	4a12      	ldr	r2, [pc, #72]	; (8003ac8 <HAL_DMA_IRQHandler+0x2d4>)
 8003a7e:	6808      	ldr	r0, [r1, #0]
 8003a80:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a84:	e764      	b.n	8003950 <HAL_DMA_IRQHandler+0x15c>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a8a:	e786      	b.n	800399a <HAL_DMA_IRQHandler+0x1a6>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8003a8c:	2180      	movs	r1, #128	; 0x80
 8003a8e:	e72e      	b.n	80038ee <HAL_DMA_IRQHandler+0xfa>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003a90:	4808      	ldr	r0, [pc, #32]	; (8003ab4 <HAL_DMA_IRQHandler+0x2c0>)

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;

      if(hdma->XferHalfCpltCallback != NULL)
 8003a92:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003a94:	2640      	movs	r6, #64	; 0x40

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8003a96:	2511      	movs	r5, #17
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003a98:	6046      	str	r6, [r0, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8003a9a:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 8003a9e:	2900      	cmp	r1, #0
 8003aa0:	d1d9      	bne.n	8003a56 <HAL_DMA_IRQHandler+0x262>
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8003aa2:	6800      	ldr	r0, [r0, #0]
 8003aa4:	2120      	movs	r1, #32
 8003aa6:	e753      	b.n	8003950 <HAL_DMA_IRQHandler+0x15c>
 8003aa8:	6810      	ldr	r0, [r2, #0]
 8003aaa:	4a01      	ldr	r2, [pc, #4]	; (8003ab0 <HAL_DMA_IRQHandler+0x2bc>)
 8003aac:	e7dd      	b.n	8003a6a <HAL_DMA_IRQHandler+0x276>
 8003aae:	bf00      	nop
 8003ab0:	40020008 	.word	0x40020008
 8003ab4:	40020000 	.word	0x40020000
 8003ab8:	4002001c 	.word	0x4002001c
 8003abc:	40020030 	.word	0x40020030
 8003ac0:	40020058 	.word	0x40020058
 8003ac4:	40020044 	.word	0x40020044
 8003ac8:	4002006c 	.word	0x4002006c
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003acc:	483f      	ldr	r0, [pc, #252]	; (8003bcc <HAL_DMA_IRQHandler+0x3d8>)

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;

      if(hdma->XferHalfCpltCallback != NULL)
 8003ace:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ad0:	f44f 2680 	mov.w	r6, #262144	; 0x40000

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8003ad4:	2511      	movs	r5, #17
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ad6:	6046      	str	r6, [r0, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8003ad8:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 8003adc:	2900      	cmp	r1, #0
 8003ade:	d1ba      	bne.n	8003a56 <HAL_DMA_IRQHandler+0x262>
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8003ae0:	6800      	ldr	r0, [r0, #0]
 8003ae2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8003ae6:	e733      	b.n	8003950 <HAL_DMA_IRQHandler+0x15c>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8003ae8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003aec:	e6ff      	b.n	80038ee <HAL_DMA_IRQHandler+0xfa>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003aee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003af2:	e752      	b.n	800399a <HAL_DMA_IRQHandler+0x1a6>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8003af4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003af8:	e6f9      	b.n	80038ee <HAL_DMA_IRQHandler+0xfa>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003afa:	4834      	ldr	r0, [pc, #208]	; (8003bcc <HAL_DMA_IRQHandler+0x3d8>)

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;

      if(hdma->XferHalfCpltCallback != NULL)
 8003afc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003afe:	f44f 6680 	mov.w	r6, #1024	; 0x400

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8003b02:	2511      	movs	r5, #17
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003b04:	6046      	str	r6, [r0, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8003b06:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 8003b0a:	2900      	cmp	r1, #0
 8003b0c:	d1a3      	bne.n	8003a56 <HAL_DMA_IRQHandler+0x262>
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8003b0e:	6800      	ldr	r0, [r0, #0]
 8003b10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b14:	e71c      	b.n	8003950 <HAL_DMA_IRQHandler+0x15c>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003b16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b1a:	e73e      	b.n	800399a <HAL_DMA_IRQHandler+0x1a6>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8003b1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b20:	e6e5      	b.n	80038ee <HAL_DMA_IRQHandler+0xfa>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003b22:	482a      	ldr	r0, [pc, #168]	; (8003bcc <HAL_DMA_IRQHandler+0x3d8>)

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;

      if(hdma->XferHalfCpltCallback != NULL)
 8003b24:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003b26:	f44f 4680 	mov.w	r6, #16384	; 0x4000

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8003b2a:	2511      	movs	r5, #17
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003b2c:	6046      	str	r6, [r0, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8003b2e:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 8003b32:	2900      	cmp	r1, #0
 8003b34:	d18f      	bne.n	8003a56 <HAL_DMA_IRQHandler+0x262>
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8003b36:	6800      	ldr	r0, [r0, #0]
 8003b38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b3c:	e708      	b.n	8003950 <HAL_DMA_IRQHandler+0x15c>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003b3e:	4823      	ldr	r0, [pc, #140]	; (8003bcc <HAL_DMA_IRQHandler+0x3d8>)

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;

      if(hdma->XferHalfCpltCallback != NULL)
 8003b40:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003b42:	f44f 0680 	mov.w	r6, #4194304	; 0x400000

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8003b46:	2511      	movs	r5, #17
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003b48:	6046      	str	r6, [r0, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8003b4a:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 8003b4e:	2900      	cmp	r1, #0
 8003b50:	d181      	bne.n	8003a56 <HAL_DMA_IRQHandler+0x262>
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8003b52:	6800      	ldr	r0, [r0, #0]
 8003b54:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b58:	e6fa      	b.n	8003950 <HAL_DMA_IRQHandler+0x15c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
    { 
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8003b5a:	6819      	ldr	r1, [r3, #0]
 8003b5c:	068d      	lsls	r5, r1, #26
 8003b5e:	f53f ae9e 	bmi.w	800389e <HAL_DMA_IRQHandler+0xaa>
 8003b62:	e698      	b.n	8003896 <HAL_DMA_IRQHandler+0xa2>
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	0751      	lsls	r1, r2, #29
 8003b68:	d587      	bpl.n	8003a7a <HAL_DMA_IRQHandler+0x286>
 8003b6a:	4a19      	ldr	r2, [pc, #100]	; (8003bd0 <HAL_DMA_IRQHandler+0x3dc>)
 8003b6c:	e743      	b.n	80039f6 <HAL_DMA_IRQHandler+0x202>
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	0755      	lsls	r5, r2, #29
 8003b72:	f57f af51 	bpl.w	8003a18 <HAL_DMA_IRQHandler+0x224>
 8003b76:	4a17      	ldr	r2, [pc, #92]	; (8003bd4 <HAL_DMA_IRQHandler+0x3e0>)
 8003b78:	e73d      	b.n	80039f6 <HAL_DMA_IRQHandler+0x202>
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8003b7a:	6809      	ldr	r1, [r1, #0]
 8003b7c:	e6de      	b.n	800393c <HAL_DMA_IRQHandler+0x148>
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8003b7e:	3114      	adds	r1, #20
 8003b80:	428b      	cmp	r3, r1
 8003b82:	f43f af23 	beq.w	80039cc <HAL_DMA_IRQHandler+0x1d8>
 8003b86:	3114      	adds	r1, #20
 8003b88:	428b      	cmp	r3, r1
 8003b8a:	f43f af2d 	beq.w	80039e8 <HAL_DMA_IRQHandler+0x1f4>
 8003b8e:	3114      	adds	r1, #20
 8003b90:	428b      	cmp	r3, r1
 8003b92:	f43f af51 	beq.w	8003a38 <HAL_DMA_IRQHandler+0x244>
 8003b96:	3114      	adds	r1, #20
 8003b98:	428b      	cmp	r3, r1
 8003b9a:	d013      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x3d0>
 8003b9c:	3114      	adds	r1, #20
 8003b9e:	428b      	cmp	r3, r1
 8003ba0:	bf14      	ite	ne
 8003ba2:	f04f 7100 	movne.w	r1, #33554432	; 0x2000000
 8003ba6:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
 8003baa:	e6d1      	b.n	8003950 <HAL_DMA_IRQHandler+0x15c>
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	0755      	lsls	r5, r2, #29
 8003bb0:	f57f af3f 	bpl.w	8003a32 <HAL_DMA_IRQHandler+0x23e>
 8003bb4:	4a08      	ldr	r2, [pc, #32]	; (8003bd8 <HAL_DMA_IRQHandler+0x3e4>)
 8003bb6:	e71e      	b.n	80039f6 <HAL_DMA_IRQHandler+0x202>
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	0750      	lsls	r0, r2, #29
 8003bbc:	f57f af11 	bpl.w	80039e2 <HAL_DMA_IRQHandler+0x1ee>
 8003bc0:	4a06      	ldr	r2, [pc, #24]	; (8003bdc <HAL_DMA_IRQHandler+0x3e8>)
 8003bc2:	e718      	b.n	80039f6 <HAL_DMA_IRQHandler+0x202>
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8003bc4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8003bc8:	e6c2      	b.n	8003950 <HAL_DMA_IRQHandler+0x15c>
 8003bca:	bf00      	nop
 8003bcc:	40020000 	.word	0x40020000
 8003bd0:	4002006c 	.word	0x4002006c
 8003bd4:	40020058 	.word	0x40020058
 8003bd8:	40020044 	.word	0x40020044
 8003bdc:	40020030 	.word	0x40020030

08003be0 <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8003be0:	2312      	movs	r3, #18
 8003be2:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8003be4:	4800      	ldr	r0, [pc, #0]	; (8003be8 <USBD_FS_DeviceDescriptor+0x8>)
 8003be6:	4770      	bx	lr
 8003be8:	2000043c 	.word	0x2000043c

08003bec <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8003bec:	2304      	movs	r3, #4
 8003bee:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8003bf0:	4800      	ldr	r0, [pc, #0]	; (8003bf4 <USBD_FS_LangIDStrDescriptor+0x8>)
 8003bf2:	4770      	bx	lr
 8003bf4:	20000450 	.word	0x20000450

08003bf8 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003bf8:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003bfa:	4c04      	ldr	r4, [pc, #16]	; (8003c0c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003bfc:	460a      	mov	r2, r1
 8003bfe:	4804      	ldr	r0, [pc, #16]	; (8003c10 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003c00:	4621      	mov	r1, r4
 8003c02:	f001 ff11 	bl	8005a28 <USBD_GetString>
  return USBD_StrDesc;
}
 8003c06:	4620      	mov	r0, r4
 8003c08:	bd10      	pop	{r4, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20001e7c 	.word	0x20001e7c
 8003c10:	08006188 	.word	0x08006188

08003c14 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003c14:	b510      	push	{r4, lr}
  if(speed == 0)
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003c16:	4c04      	ldr	r4, [pc, #16]	; (8003c28 <USBD_FS_ProductStrDescriptor+0x14>)
 8003c18:	460a      	mov	r2, r1
 8003c1a:	4804      	ldr	r0, [pc, #16]	; (8003c2c <USBD_FS_ProductStrDescriptor+0x18>)
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	f001 ff03 	bl	8005a28 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8003c22:	4620      	mov	r0, r4
 8003c24:	bd10      	pop	{r4, pc}
 8003c26:	bf00      	nop
 8003c28:	20001e7c 	.word	0x20001e7c
 8003c2c:	0800619c 	.word	0x0800619c

08003c30 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003c30:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8003c32:	4c04      	ldr	r4, [pc, #16]	; (8003c44 <USBD_FS_SerialStrDescriptor+0x14>)
 8003c34:	460a      	mov	r2, r1
 8003c36:	4804      	ldr	r0, [pc, #16]	; (8003c48 <USBD_FS_SerialStrDescriptor+0x18>)
 8003c38:	4621      	mov	r1, r4
 8003c3a:	f001 fef5 	bl	8005a28 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8003c3e:	4620      	mov	r0, r4
 8003c40:	bd10      	pop	{r4, pc}
 8003c42:	bf00      	nop
 8003c44:	20001e7c 	.word	0x20001e7c
 8003c48:	080061b4 	.word	0x080061b4

08003c4c <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003c4c:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003c4e:	4c04      	ldr	r4, [pc, #16]	; (8003c60 <USBD_FS_ConfigStrDescriptor+0x14>)
 8003c50:	460a      	mov	r2, r1
 8003c52:	4804      	ldr	r0, [pc, #16]	; (8003c64 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003c54:	4621      	mov	r1, r4
 8003c56:	f001 fee7 	bl	8005a28 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	bd10      	pop	{r4, pc}
 8003c5e:	bf00      	nop
 8003c60:	20001e7c 	.word	0x20001e7c
 8003c64:	080061c4 	.word	0x080061c4

08003c68 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003c68:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003c6a:	4c04      	ldr	r4, [pc, #16]	; (8003c7c <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003c6c:	460a      	mov	r2, r1
 8003c6e:	4804      	ldr	r0, [pc, #16]	; (8003c80 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003c70:	4621      	mov	r1, r4
 8003c72:	f001 fed9 	bl	8005a28 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 8003c76:	4620      	mov	r0, r4
 8003c78:	bd10      	pop	{r4, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20001e7c 	.word	0x20001e7c
 8003c80:	080061d0 	.word	0x080061d0

08003c84 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
  if(hpcd->Instance==USB)
 8003c84:	6802      	ldr	r2, [r0, #0]
 8003c86:	4b0e      	ldr	r3, [pc, #56]	; (8003cc0 <HAL_PCD_MspInit+0x3c>)
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d000      	beq.n	8003c8e <HAL_PCD_MspInit+0xa>
 8003c8c:	4770      	bx	lr
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __USB_CLK_ENABLE();
 8003c8e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8003c92:	69d8      	ldr	r0, [r3, #28]
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003c94:	b500      	push	{lr}
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __USB_CLK_ENABLE();
 8003c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003c9a:	61d8      	str	r0, [r3, #28]
 8003c9c:	69db      	ldr	r3, [r3, #28]
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003c9e:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __USB_CLK_ENABLE();
 8003ca0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2105      	movs	r1, #5
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __USB_CLK_ENABLE();
 8003ca8:	9301      	str	r3, [sp, #4]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8003caa:	2014      	movs	r0, #20
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __USB_CLK_ENABLE();
 8003cac:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8003cae:	f7fc fbc3 	bl	8000438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003cb2:	2014      	movs	r0, #20
 8003cb4:	f7fc fbf8 	bl	80004a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003cb8:	b003      	add	sp, #12
 8003cba:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cbe:	bf00      	nop
 8003cc0:	40005c00 	.word	0x40005c00

08003cc4 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8003cc4:	f500 717b 	add.w	r1, r0, #1004	; 0x3ec
 8003cc8:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003ccc:	f7fd bf2a 	b.w	8001b24 <USBD_LL_SetupStage>

08003cd0 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003cd0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003cd4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003cd8:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003cdc:	f7fd bf52 	b.w	8001b84 <USBD_LL_DataOutStage>

08003ce0 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003ce0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003ce4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ce6:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003cea:	f7fd bf81 	b.w	8001bf0 <USBD_LL_DataInStage>
 8003cee:	bf00      	nop

08003cf0 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 8003cf0:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003cf4:	f7fe b804 	b.w	8001d00 <USBD_LL_SOF>

08003cf8 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8003cf8:	b510      	push	{r4, lr}
 8003cfa:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed(hpcd->pData, speed);  
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003d02:	f7fd ffe7 	bl	8001cd4 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset(hpcd->pData);
 8003d06:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
}
 8003d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    break;    
  }
  USBD_LL_SetSpeed(hpcd->pData, speed);  
  
  /*Reset Device*/
  USBD_LL_Reset(hpcd->pData);
 8003d0e:	f7fd bfc1 	b.w	8001c94 <USBD_LL_Reset>
 8003d12:	bf00      	nop

08003d14 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003d14:	b510      	push	{r4, lr}
 8003d16:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend(hpcd->pData);
 8003d18:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003d1c:	f7fd ffde 	bl	8001cdc <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */  
  if (hpcd->Init.low_power_enable)
 8003d20:	69a3      	ldr	r3, [r4, #24]
 8003d22:	b123      	cbz	r3, 8003d2e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003d24:	4a02      	ldr	r2, [pc, #8]	; (8003d30 <HAL_PCD_SuspendCallback+0x1c>)
 8003d26:	6913      	ldr	r3, [r2, #16]
 8003d28:	f043 0306 	orr.w	r3, r3, #6
 8003d2c:	6113      	str	r3, [r2, #16]
 8003d2e:	bd10      	pop	{r4, pc}
 8003d30:	e000ed00 	.word	0xe000ed00

08003d34 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume(hpcd->pData);
 8003d34:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003d38:	f7fd bfda 	b.w	8001cf0 <USBD_LL_Resume>

08003d3c <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8003d3c:	b570      	push	{r4, r5, r6, lr}
 8003d3e:	4605      	mov	r5, r0
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 8003d40:	4b1c      	ldr	r3, [pc, #112]	; (8003db4 <USBD_LL_Init+0x78>)
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
 8003d42:	4e1d      	ldr	r6, [pc, #116]	; (8003db8 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003d44:	2400      	movs	r4, #0
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 8003d46:	f8c3 041c 	str.w	r0, [r3, #1052]	; 0x41c
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003d4a:	2108      	movs	r1, #8
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;
 8003d4c:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003d50:	2202      	movs	r2, #2
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
  HAL_PCD_Init(&hpcd_USB_FS);
 8003d52:	4618      	mov	r0, r3
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
 8003d54:	601e      	str	r6, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003d56:	6059      	str	r1, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003d58:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003d5a:	60dc      	str	r4, [r3, #12]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003d5c:	619c      	str	r4, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003d5e:	61dc      	str	r4, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003d60:	621c      	str	r4, [r3, #32]
  HAL_PCD_Init(&hpcd_USB_FS);
 8003d62:	f7fd fa71 	bl	8001248 <HAL_PCD_Init>

  HAL_PCDEx_PMAConfig(pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8003d66:	4622      	mov	r2, r4
 8003d68:	4621      	mov	r1, r4
 8003d6a:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8003d6e:	2318      	movs	r3, #24
 8003d70:	f001 fe80 	bl	8005a74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003d74:	4622      	mov	r2, r4
 8003d76:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8003d7a:	2358      	movs	r3, #88	; 0x58
 8003d7c:	2180      	movs	r1, #128	; 0x80
 8003d7e:	f001 fe79 	bl	8005a74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);  
 8003d82:	4622      	mov	r2, r4
 8003d84:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8003d88:	23c0      	movs	r3, #192	; 0xc0
 8003d8a:	2181      	movs	r1, #129	; 0x81
 8003d8c:	f001 fe72 	bl	8005a74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8003d90:	4622      	mov	r2, r4
 8003d92:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8003d96:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	f001 fe6a 	bl	8005a74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);  
 8003da0:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8003da4:	4622      	mov	r2, r4
 8003da6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003daa:	2182      	movs	r1, #130	; 0x82
 8003dac:	f001 fe62 	bl	8005a74 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8003db0:	4620      	mov	r0, r4
 8003db2:	bd70      	pop	{r4, r5, r6, pc}
 8003db4:	2000207c 	.word	0x2000207c
 8003db8:	40005c00 	.word	0x40005c00

08003dbc <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003dbc:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 8003dbe:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003dc2:	f7fd faaf 	bl	8001324 <HAL_PCD_Start>
  return USBD_OK; 
}
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	bd08      	pop	{r3, pc}
 8003dca:	bf00      	nop

08003dcc <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8003dcc:	b510      	push	{r4, lr}
 8003dce:	461c      	mov	r4, r3

  HAL_PCD_EP_Open(pdev->pData, 
 8003dd0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	4622      	mov	r2, r4
 8003dd8:	f7fd fad0 	bl	800137c <HAL_PCD_EP_Open>
                  ep_addr, 
                  ep_mps, 
                  ep_type);
  
  return USBD_OK; 
}
 8003ddc:	2000      	movs	r0, #0
 8003dde:	bd10      	pop	{r4, pc}

08003de0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003de0:	b508      	push	{r3, lr}
  
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003de2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003de6:	f7fd faef 	bl	80013c8 <HAL_PCD_EP_Close>
  return USBD_OK; 
}
 8003dea:	2000      	movs	r0, #0
 8003dec:	bd08      	pop	{r3, pc}
 8003dee:	bf00      	nop

08003df0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003df0:	b508      	push	{r3, lr}
  
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003df2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003df6:	f7fd fe0d 	bl	8001a14 <HAL_PCD_EP_SetStall>
  return USBD_OK; 
}
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	bd08      	pop	{r3, pc}
 8003dfe:	bf00      	nop

08003e00 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003e00:	b508      	push	{r3, lr}
  
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003e02:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003e06:	f7fd fe31 	bl	8001a6c <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	bd08      	pop	{r3, pc}
 8003e0e:	bf00      	nop

08003e10 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = pdev->pData; 
  
  if((ep_addr & 0x80) == 0x80)
 8003e10:	060a      	lsls	r2, r1, #24
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = pdev->pData; 
 8003e12:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
 8003e16:	d404      	bmi.n	8003e22 <USBD_LL_IsStallEP+0x12>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003e18:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8003e1c:	f893 020a 	ldrb.w	r0, [r3, #522]	; 0x20a
  }
}
 8003e20:	4770      	bx	lr
{
  PCD_HandleTypeDef *hpcd = pdev->pData; 
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003e22:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003e26:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8003e2a:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8003e2e:	4770      	bx	lr

08003e30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8003e30:	b508      	push	{r3, lr}
  
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003e32:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003e36:	f7fd fa8d 	bl	8001354 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	bd08      	pop	{r3, pc}
 8003e3e:	bf00      	nop

08003e40 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8003e40:	b508      	push	{r3, lr}

  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003e42:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003e46:	f7fd fb0f 	bl	8001468 <HAL_PCD_EP_Transmit>
  return USBD_OK;   
}
 8003e4a:	2000      	movs	r0, #0
 8003e4c:	bd08      	pop	{r3, pc}
 8003e4e:	bf00      	nop

08003e50 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8003e50:	b508      	push	{r3, lr}

  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003e52:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003e56:	f7fd fadb 	bl	8001410 <HAL_PCD_EP_Receive>
  return USBD_OK;   
}
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	bd08      	pop	{r3, pc}
 8003e5e:	bf00      	nop

08003e60 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8003e60:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8003e62:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003e66:	f7fd faf7 	bl	8001458 <HAL_PCD_EP_GetRxCount>
}
 8003e6a:	bd08      	pop	{r3, pc}

08003e6c <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];//On 32-bit boundary
  return mem;
}
 8003e6c:	4800      	ldr	r0, [pc, #0]	; (8003e70 <USBD_static_malloc+0x4>)
 8003e6e:	4770      	bx	lr
 8003e70:	20000ac4 	.word	0x20000ac4

08003e74 <USBD_static_free>:
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
  free(p);
 8003e74:	f001 bf22 	b.w	8005cbc <free>

08003e78 <HAL_PCDEx_SetConnectionState>:
* @param hpcd: PCD handle
* @param state: connection state (0 : disconnected / 1: connected) 
* @retval None
*/
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop

08003e7c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e7c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e80:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e84:	2200      	movs	r2, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e86:	6081      	str	r1, [r0, #8]
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e88:	e880 000c 	stmia.w	r0, {r2, r3}
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e8c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e8e:	6103      	str	r3, [r0, #16]
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop

08003e94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003e94:	2300      	movs	r3, #0
 8003e96:	6103      	str	r3, [r0, #16]
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop

08003e9c <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003e9c:	e890 000c 	ldmia.w	r0, {r2, r3}
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ea0:	b410      	push	{r4}

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ea2:	689c      	ldr	r4, [r3, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003ea4:	3201      	adds	r2, #1

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ea6:	608c      	str	r4, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ea8:	689c      	ldr	r4, [r3, #8]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003eaa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003eac:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003eae:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
 8003eb0:	bc10      	pop	{r4}

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003eb2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003eb4:	6002      	str	r2, [r0, #0]
}
 8003eb6:	4770      	bx	lr

08003eb8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003eb8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003eba:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ebc:	1c6b      	adds	r3, r5, #1
 8003ebe:	d011      	beq.n	8003ee4 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ec0:	f100 0208 	add.w	r2, r0, #8
 8003ec4:	e000      	b.n	8003ec8 <vListInsert+0x10>
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	6853      	ldr	r3, [r2, #4]
 8003eca:	681c      	ldr	r4, [r3, #0]
 8003ecc:	42a5      	cmp	r5, r4
 8003ece:	d2fa      	bcs.n	8003ec6 <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003ed0:	6804      	ldr	r4, [r0, #0]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ed2:	604b      	str	r3, [r1, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003ed4:	3401      	adds	r4, #1
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ed6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ed8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003eda:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003edc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003ede:	6004      	str	r4, [r0, #0]
}
 8003ee0:	bc30      	pop	{r4, r5}
 8003ee2:	4770      	bx	lr
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ee4:	6902      	ldr	r2, [r0, #16]
 8003ee6:	6853      	ldr	r3, [r2, #4]
 8003ee8:	e7f2      	b.n	8003ed0 <vListInsert+0x18>
 8003eea:	bf00      	nop

08003eec <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003eec:	6843      	ldr	r3, [r0, #4]
 8003eee:	6881      	ldr	r1, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003ef0:	6902      	ldr	r2, [r0, #16]
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ef2:	b410      	push	{r4}
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ef4:	6099      	str	r1, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ef6:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ef8:	6854      	ldr	r4, [r2, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003efa:	604b      	str	r3, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8003efc:	6813      	ldr	r3, [r2, #0]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003efe:	42a0      	cmp	r0, r4
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f00:	bf08      	it	eq
 8003f02:	6051      	streq	r1, [r2, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8003f04:	3b01      	subs	r3, #1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003f06:	2100      	movs	r1, #0
 8003f08:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8003f0a:	bc10      	pop	{r4}
 8003f0c:	4618      	mov	r0, r3
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8003f0e:	6013      	str	r3, [r2, #0]

	return pxList->uxNumberOfItems;
}
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop

08003f14 <_sbrk>:
caddr_t _sbrk ( int incr )
{
    static unsigned char *heap = NULL;
    unsigned char *prev_heap;

    if (heap == NULL) {
 8003f14:	4a04      	ldr	r2, [pc, #16]	; (8003f28 <_sbrk+0x14>)
 8003f16:	4905      	ldr	r1, [pc, #20]	; (8003f2c <_sbrk+0x18>)
 8003f18:	6813      	ldr	r3, [r2, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	bf08      	it	eq
 8003f1e:	460b      	moveq	r3, r1
        heap = (unsigned char *)&_end;
    }
    prev_heap = heap;

    heap += incr;
 8003f20:	4418      	add	r0, r3
 8003f22:	6010      	str	r0, [r2, #0]

    return (caddr_t) prev_heap;
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	4770      	bx	lr
 8003f28:	20000ce4 	.word	0x20000ce4
 8003f2c:	20002808 	.word	0x20002808

08003f30 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003f30:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <HAL_MspInit+0x40>)

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f32:	b500      	push	{lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003f34:	699a      	ldr	r2, [r3, #24]

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f36:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003f38:	f042 0201 	orr.w	r2, r2, #1
 8003f3c:	619a      	str	r2, [r3, #24]
 8003f3e:	699b      	ldr	r3, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f40:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	9301      	str	r3, [sp, #4]
 8003f48:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f4a:	f7fc fa63 	bl	8000414 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003f4e:	2200      	movs	r2, #0
 8003f50:	210f      	movs	r1, #15
 8003f52:	f04f 30ff 	mov.w	r0, #4294967295
 8003f56:	f7fc fa6f 	bl	8000438 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003f5a:	4a06      	ldr	r2, [pc, #24]	; (8003f74 <HAL_MspInit+0x44>)
 8003f5c:	6853      	ldr	r3, [r2, #4]
 8003f5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003f62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f66:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f68:	b003      	add	sp, #12
 8003f6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f6e:	bf00      	nop
 8003f70:	40021000 	.word	0x40021000
 8003f74:	40010000 	.word	0x40010000

08003f78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003f78:	4b19      	ldr	r3, [pc, #100]	; (8003fe0 <HAL_ADC_MspInit+0x68>)
 8003f7a:	6802      	ldr	r2, [r0, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d000      	beq.n	8003f82 <HAL_ADC_MspInit+0xa>
 8003f80:	4770      	bx	lr
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __ADC1_CLK_ENABLE();
 8003f82:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8003f86:	699a      	ldr	r2, [r3, #24]

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f88:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __ADC1_CLK_ENABLE();
 8003f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8e:	619a      	str	r2, [r3, #24]
 8003f90:	699b      	ldr	r3, [r3, #24]

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f92:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __ADC1_CLK_ENABLE();
 8003f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f98:	4604      	mov	r4, r0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f9a:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __ADC1_CLK_ENABLE();
 8003f9c:	9301      	str	r3, [sp, #4]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003f9e:	2707      	movs	r7, #7
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fa0:	2603      	movs	r6, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa2:	4810      	ldr	r0, [pc, #64]	; (8003fe4 <HAL_ADC_MspInit+0x6c>)

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
 8003fa4:	4d10      	ldr	r5, [pc, #64]	; (8003fe8 <HAL_ADC_MspInit+0x70>)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __ADC1_CLK_ENABLE();
 8003fa6:	9b01      	ldr	r3, [sp, #4]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003fa8:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003faa:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fac:	f7ff fb06 	bl	80035bc <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
 8003fb0:	4b0e      	ldr	r3, [pc, #56]	; (8003fec <HAL_ADC_MspInit+0x74>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003fb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003fb6:	2220      	movs	r2, #32
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
 8003fb8:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003fba:	2780      	movs	r7, #128	; 0x80
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fbc:	2300      	movs	r3, #0
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003fbe:	f44f 7680 	mov.w	r6, #256	; 0x100
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    HAL_DMA_Init(&hdma_adc1);
 8003fc2:	4628      	mov	r0, r5
    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003fc4:	60ef      	str	r7, [r5, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003fc6:	612e      	str	r6, [r5, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003fc8:	6169      	str	r1, [r5, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003fca:	61aa      	str	r2, [r5, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fcc:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fce:	60ab      	str	r3, [r5, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003fd0:	61eb      	str	r3, [r5, #28]
    HAL_DMA_Init(&hdma_adc1);
 8003fd2:	f7ff fbe7 	bl	80037a4 <HAL_DMA_Init>

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003fd6:	6225      	str	r5, [r4, #32]
 8003fd8:	626c      	str	r4, [r5, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003fda:	b007      	add	sp, #28
 8003fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40012400 	.word	0x40012400
 8003fe4:	40010800 	.word	0x40010800
 8003fe8:	20001df4 	.word	0x20001df4
 8003fec:	40020008 	.word	0x40020008

08003ff0 <HAL_CRC_MspInit>:
}

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{

  if(hcrc->Instance==CRC)
 8003ff0:	6802      	ldr	r2, [r0, #0]
 8003ff2:	4b09      	ldr	r3, [pc, #36]	; (8004018 <HAL_CRC_MspInit+0x28>)
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d000      	beq.n	8003ffa <HAL_CRC_MspInit+0xa>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003ff8:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __CRC_CLK_ENABLE();
 8003ffa:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8003ffe:	695a      	ldr	r2, [r3, #20]
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004000:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __CRC_CLK_ENABLE();
 8004002:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004006:	615a      	str	r2, [r3, #20]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400e:	9301      	str	r3, [sp, #4]
 8004010:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004012:	b002      	add	sp, #8
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40023000 	.word	0x40023000

0800401c <HAL_IWDG_MspInit>:
  /* USER CODE END CRC_MspDeInit 1 */

}

void HAL_IWDG_MspInit(IWDG_HandleTypeDef* hiwdg)
{
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop

08004020 <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 8004020:	6802      	ldr	r2, [r0, #0]
 8004022:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <HAL_RTC_MspInit+0x40>)
 8004024:	429a      	cmp	r2, r3
 8004026:	d000      	beq.n	800402a <HAL_RTC_MspInit+0xa>
 8004028:	4770      	bx	lr
{

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800402a:	b500      	push	{lr}
 800402c:	b083      	sub	sp, #12
  if(hrtc->Instance==RTC)
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800402e:	f7fc f987 	bl	8000340 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8004032:	4a0c      	ldr	r2, [pc, #48]	; (8004064 <HAL_RTC_MspInit+0x44>)
 8004034:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004038:	69d1      	ldr	r1, [r2, #28]
 800403a:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 800403e:	61d1      	str	r1, [r2, #28]
 8004040:	69d2      	ldr	r2, [r2, #28]
 8004042:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004046:	9201      	str	r2, [sp, #4]
 8004048:	9a01      	ldr	r2, [sp, #4]
 800404a:	fa93 f3a3 	rbit	r3, r3
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800404e:	fab3 f383 	clz	r3, r3
 8004052:	4a05      	ldr	r2, [pc, #20]	; (8004068 <HAL_RTC_MspInit+0x48>)
 8004054:	2101      	movs	r1, #1
 8004056:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800405a:	b003      	add	sp, #12
 800405c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004060:	40002800 	.word	0x40002800
 8004064:	40021000 	.word	0x40021000
 8004068:	42420400 	.word	0x42420400

0800406c <HAL_TIM_Base_MspInit>:
  /* USER CODE END RTC_MspDeInit 1 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800406c:	b500      	push	{lr}

  if(htim_base->Instance==TIM2)
 800406e:	6803      	ldr	r3, [r0, #0]
  /* USER CODE END RTC_MspDeInit 1 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004070:	b085      	sub	sp, #20

  if(htim_base->Instance==TIM2)
 8004072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004076:	d020      	beq.n	80040ba <HAL_TIM_Base_MspInit+0x4e>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8004078:	4a1a      	ldr	r2, [pc, #104]	; (80040e4 <HAL_TIM_Base_MspInit+0x78>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d012      	beq.n	80040a4 <HAL_TIM_Base_MspInit+0x38>
    __TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 800407e:	4a1a      	ldr	r2, [pc, #104]	; (80040e8 <HAL_TIM_Base_MspInit+0x7c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d002      	beq.n	800408a <HAL_TIM_Base_MspInit+0x1e>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004084:	b005      	add	sp, #20
 8004086:	f85d fb04 	ldr.w	pc, [sp], #4
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __TIM4_CLK_ENABLE();
 800408a:	4b18      	ldr	r3, [pc, #96]	; (80040ec <HAL_TIM_Base_MspInit+0x80>)
 800408c:	69da      	ldr	r2, [r3, #28]
 800408e:	f042 0204 	orr.w	r2, r2, #4
 8004092:	61da      	str	r2, [r3, #28]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	9303      	str	r3, [sp, #12]
 800409c:	9b03      	ldr	r3, [sp, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800409e:	b005      	add	sp, #20
 80040a0:	f85d fb04 	ldr.w	pc, [sp], #4
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __TIM3_CLK_ENABLE();
 80040a4:	4b11      	ldr	r3, [pc, #68]	; (80040ec <HAL_TIM_Base_MspInit+0x80>)
 80040a6:	69da      	ldr	r2, [r3, #28]
 80040a8:	f042 0202 	orr.w	r2, r2, #2
 80040ac:	61da      	str	r2, [r3, #28]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	9302      	str	r3, [sp, #8]
 80040b6:	9b02      	ldr	r3, [sp, #8]
 80040b8:	e7e4      	b.n	8004084 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __TIM2_CLK_ENABLE();
 80040ba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80040be:	69d8      	ldr	r0, [r3, #28]
  /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80040c0:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __TIM2_CLK_ENABLE();
 80040c2:	f040 0001 	orr.w	r0, r0, #1
 80040c6:	61d8      	str	r0, [r3, #28]
 80040c8:	69db      	ldr	r3, [r3, #28]
  /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80040ca:	2105      	movs	r1, #5
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __TIM2_CLK_ENABLE();
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	9301      	str	r3, [sp, #4]
  /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80040d2:	201c      	movs	r0, #28
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __TIM2_CLK_ENABLE();
 80040d4:	9b01      	ldr	r3, [sp, #4]
  /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80040d6:	f7fc f9af 	bl	8000438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80040da:	201c      	movs	r0, #28
 80040dc:	f7fc f9e4 	bl	80004a8 <HAL_NVIC_EnableIRQ>
 80040e0:	e7d0      	b.n	8004084 <HAL_TIM_Base_MspInit+0x18>
 80040e2:	bf00      	nop
 80040e4:	40000400 	.word	0x40000400
 80040e8:	40000800 	.word	0x40000800
 80040ec:	40021000 	.word	0x40021000

080040f0 <HAL_TIM_MspPostInit>:
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80040f0:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 80040f2:	6803      	ldr	r3, [r0, #0]
 80040f4:	4a12      	ldr	r2, [pc, #72]	; (8004140 <HAL_TIM_MspPostInit+0x50>)
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80040f6:	b085      	sub	sp, #20

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d010      	beq.n	800411e <HAL_TIM_MspPostInit+0x2e>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 80040fc:	4a11      	ldr	r2, [pc, #68]	; (8004144 <HAL_TIM_MspPostInit+0x54>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d002      	beq.n	8004108 <HAL_TIM_MspPostInit+0x18>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004102:	b005      	add	sp, #20
 8004104:	f85d fb04 	ldr.w	pc, [sp], #4
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004108:	2302      	movs	r3, #2
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800410a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800410e:	4669      	mov	r1, sp
 8004110:	480d      	ldr	r0, [pc, #52]	; (8004148 <HAL_TIM_MspPostInit+0x58>)
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004112:	e88d 000c 	stmia.w	sp, {r2, r3}
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8004116:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004118:	f7ff fa50 	bl	80035bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800411c:	e7f1      	b.n	8004102 <HAL_TIM_MspPostInit+0x12>
    PB0     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800411e:	2302      	movs	r3, #2
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 8004120:	2231      	movs	r2, #49	; 0x31
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004122:	4669      	mov	r1, sp
 8004124:	4808      	ldr	r0, [pc, #32]	; (8004148 <HAL_TIM_MspPostInit+0x58>)
    PB0     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004126:	e88d 000c 	stmia.w	sp, {r2, r3}
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800412a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800412c:	f7ff fa46 	bl	80035bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8004130:	4a06      	ldr	r2, [pc, #24]	; (800414c <HAL_TIM_MspPostInit+0x5c>)
 8004132:	6853      	ldr	r3, [r2, #4]
 8004134:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004138:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800413c:	6053      	str	r3, [r2, #4]
 800413e:	e7e0      	b.n	8004102 <HAL_TIM_MspPostInit+0x12>
 8004140:	40000400 	.word	0x40000400
 8004144:	40000800 	.word	0x40000800
 8004148:	40010c00 	.word	0x40010c00
 800414c:	40010000 	.word	0x40010000

08004150 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004150:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8004152:	f7fe ff03 	bl	8002f5c <vTaskStartScheduler>
  
  return osOK;
}
 8004156:	2000      	movs	r0, #0
 8004158:	bd08      	pop	{r3, pc}
 800415a:	bf00      	nop

0800415c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800415c:	4602      	mov	r2, r0
 800415e:	b570      	push	{r4, r5, r6, lr}
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8004160:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004164:	b086      	sub	sp, #24
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8004166:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8004168:	bf14      	ite	ne
 800416a:	1ce5      	addne	r5, r4, #3
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800416c:	2500      	moveq	r5, #0
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800416e:	2400      	movs	r4, #0
 8004170:	ae05      	add	r6, sp, #20
 8004172:	6840      	ldr	r0, [r0, #4]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004174:	460b      	mov	r3, r1
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004176:	6811      	ldr	r1, [r2, #0]
 8004178:	8a12      	ldrh	r2, [r2, #16]
 800417a:	9500      	str	r5, [sp, #0]
 800417c:	9403      	str	r4, [sp, #12]
 800417e:	9402      	str	r4, [sp, #8]
 8004180:	9601      	str	r6, [sp, #4]
 8004182:	f7fe fe19 	bl	8002db8 <xTaskGenericCreate>
 8004186:	2801      	cmp	r0, #1
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
 8004188:	bf14      	ite	ne
 800418a:	4620      	movne	r0, r4
  }
  
  return handle;
 800418c:	9805      	ldreq	r0, [sp, #20]
}
 800418e:	b006      	add	sp, #24
 8004190:	bd70      	pop	{r4, r5, r6, pc}
 8004192:	bf00      	nop

08004194 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004194:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004196:	2800      	cmp	r0, #0
 8004198:	bf08      	it	eq
 800419a:	2001      	moveq	r0, #1
 800419c:	f7ff f81c 	bl	80031d8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80041a0:	2000      	movs	r0, #0
 80041a2:	bd08      	pop	{r3, pc}

080041a4 <osMessageCreate>:
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
  (void) thread_id;
  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80041a4:	2200      	movs	r2, #0
 80041a6:	c803      	ldmia	r0, {r0, r1}
 80041a8:	f000 b8d6 	b.w	8004358 <xQueueGenericCreate>

080041ac <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80041ac:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80041ae:	f7ff f951 	bl	8003454 <xTaskGetSchedulerState>
 80041b2:	2801      	cmp	r0, #1
 80041b4:	d003      	beq.n	80041be <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80041b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80041ba:	f000 bb69 	b.w	8004890 <xPortSysTickHandler>
 80041be:	bd08      	pop	{r3, pc}

080041c0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80041c0:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041c2:	6c03      	ldr	r3, [r0, #64]	; 0x40

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80041c4:	4604      	mov	r4, r0
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041c6:	b93b      	cbnz	r3, 80041d8 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041c8:	6805      	ldr	r5, [r0, #0]
 80041ca:	2d00      	cmp	r5, #0
 80041cc:	d030      	beq.n	8004230 <prvCopyDataToQueue+0x70>
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 80041ce:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 80041d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80041d2:	3301      	adds	r3, #1
 80041d4:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 80041d6:	bd38      	pop	{r3, r4, r5, pc}
 80041d8:	4615      	mov	r5, r2
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80041da:	461a      	mov	r2, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80041dc:	b985      	cbnz	r5, 8004200 <prvCopyDataToQueue+0x40>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80041de:	6880      	ldr	r0, [r0, #8]
 80041e0:	f001 fd74 	bl	8005ccc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80041e4:	68a1      	ldr	r1, [r4, #8]
 80041e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041e8:	6862      	ldr	r2, [r4, #4]
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80041ea:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041ec:	4293      	cmp	r3, r2
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80041ee:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041f0:	d3ed      	bcc.n	80041ce <prvCopyDataToQueue+0xe>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041f2:	6823      	ldr	r3, [r4, #0]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 80041f4:	4628      	mov	r0, r5
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041f6:	60a3      	str	r3, [r4, #8]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 80041f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80041fa:	3301      	adds	r3, #1
 80041fc:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 80041fe:	bd38      	pop	{r3, r4, r5, pc}
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004200:	68c0      	ldr	r0, [r0, #12]
 8004202:	f001 fd63 	bl	8005ccc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004206:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004208:	68e2      	ldr	r2, [r4, #12]
 800420a:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800420c:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800420e:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004210:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004212:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004214:	d202      	bcs.n	800421c <prvCopyDataToQueue+0x5c>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004216:	6862      	ldr	r2, [r4, #4]
 8004218:	4413      	add	r3, r2
 800421a:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800421c:	2d02      	cmp	r5, #2
 800421e:	d1d6      	bne.n	80041ce <prvCopyDataToQueue+0xe>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004220:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0d3      	beq.n	80041ce <prvCopyDataToQueue+0xe>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8004226:	6ba3      	ldr	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 8004228:	2000      	movs	r0, #0
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 800422a:	3b01      	subs	r3, #1
 800422c:	63a3      	str	r3, [r4, #56]	; 0x38
 800422e:	e7cf      	b.n	80041d0 <prvCopyDataToQueue+0x10>
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004230:	6840      	ldr	r0, [r0, #4]
 8004232:	f7ff f96d 	bl	8003510 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8004236:	6065      	str	r5, [r4, #4]
 8004238:	e7ca      	b.n	80041d0 <prvCopyDataToQueue+0x10>
 800423a:	bf00      	nop

0800423c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800423c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800423e:	b172      	cbz	r2, 800425e <prvCopyDataFromQueue+0x22>
 8004240:	4603      	mov	r3, r0
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004242:	b410      	push	{r4}
 8004244:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004246:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004248:	685c      	ldr	r4, [r3, #4]

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800424a:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800424c:	42a1      	cmp	r1, r4

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800424e:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004250:	bf24      	itt	cs
 8004252:	6819      	ldrcs	r1, [r3, #0]
 8004254:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004256:	68d9      	ldr	r1, [r3, #12]
	}
}
 8004258:	bc10      	pop	{r4}
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800425a:	f001 bd37 	b.w	8005ccc <memcpy>
 800425e:	4770      	bx	lr

08004260 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004260:	b538      	push	{r3, r4, r5, lr}
 8004262:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004264:	f000 fac2 	bl	80047ec <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8004268:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800426a:	2b00      	cmp	r3, #0
 800426c:	dd14      	ble.n	8004298 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800426e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004270:	b193      	cbz	r3, 8004298 <prvUnlockQueue+0x38>
 8004272:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8004276:	e007      	b.n	8004288 <prvUnlockQueue+0x28>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8004278:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800427a:	3b01      	subs	r3, #1
 800427c:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800427e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004280:	2b00      	cmp	r3, #0
 8004282:	dd09      	ble.n	8004298 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004284:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004286:	b13b      	cbz	r3, 8004298 <prvUnlockQueue+0x38>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004288:	4628      	mov	r0, r5
 800428a:	f7ff f85b 	bl	8003344 <xTaskRemoveFromEventList>
 800428e:	2800      	cmp	r0, #0
 8004290:	d0f2      	beq.n	8004278 <prvUnlockQueue+0x18>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8004292:	f7ff f8d7 	bl	8003444 <vTaskMissedYield>
 8004296:	e7ef      	b.n	8004278 <prvUnlockQueue+0x18>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8004298:	f04f 33ff 	mov.w	r3, #4294967295
 800429c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800429e:	f000 fac3 	bl	8004828 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80042a2:	f000 faa3 	bl	80047ec <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80042a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	dd14      	ble.n	80042d6 <prvUnlockQueue+0x76>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042ac:	6923      	ldr	r3, [r4, #16]
 80042ae:	b193      	cbz	r3, 80042d6 <prvUnlockQueue+0x76>
 80042b0:	f104 0510 	add.w	r5, r4, #16
 80042b4:	e007      	b.n	80042c6 <prvUnlockQueue+0x66>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 80042b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80042b8:	3b01      	subs	r3, #1
 80042ba:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80042bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80042be:	2b00      	cmp	r3, #0
 80042c0:	dd09      	ble.n	80042d6 <prvUnlockQueue+0x76>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042c2:	6923      	ldr	r3, [r4, #16]
 80042c4:	b13b      	cbz	r3, 80042d6 <prvUnlockQueue+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042c6:	4628      	mov	r0, r5
 80042c8:	f7ff f83c 	bl	8003344 <xTaskRemoveFromEventList>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d0f2      	beq.n	80042b6 <prvUnlockQueue+0x56>
				{
					vTaskMissedYield();
 80042d0:	f7ff f8b8 	bl	8003444 <vTaskMissedYield>
 80042d4:	e7ef      	b.n	80042b6 <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 80042d6:	f04f 33ff 	mov.w	r3, #4294967295
 80042da:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80042dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 80042e0:	f000 baa2 	b.w	8004828 <vPortExitCritical>

080042e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80042e4:	b570      	push	{r4, r5, r6, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d033      	beq.n	8004352 <xQueueGenericReset+0x6e>
 80042ea:	4604      	mov	r4, r0
 80042ec:	460e      	mov	r6, r1

	taskENTER_CRITICAL();
 80042ee:	f000 fa7d 	bl	80047ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80042f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80042f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80042f6:	6820      	ldr	r0, [r4, #0]
 80042f8:	fb03 f302 	mul.w	r3, r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80042fc:	1a9a      	subs	r2, r3, r2
		pxQueue->xRxLock = queueUNLOCKED;
 80042fe:	f04f 35ff 	mov.w	r5, #4294967295
	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004302:	4402      	add	r2, r0

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004304:	4403      	add	r3, r0
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004306:	2100      	movs	r1, #0
 8004308:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800430a:	60e2      	str	r2, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800430c:	6465      	str	r5, [r4, #68]	; 0x44

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800430e:	6063      	str	r3, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004310:	60a0      	str	r0, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
		pxQueue->xTxLock = queueUNLOCKED;
 8004312:	64a5      	str	r5, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8004314:	b98e      	cbnz	r6, 800433a <xQueueGenericReset+0x56>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004316:	6923      	ldr	r3, [r4, #16]
 8004318:	b91b      	cbnz	r3, 8004322 <xQueueGenericReset+0x3e>
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
 800431a:	f000 fa85 	bl	8004828 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 800431e:	2001      	movs	r0, #1
 8004320:	bd70      	pop	{r4, r5, r6, pc}
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8004322:	f104 0010 	add.w	r0, r4, #16
 8004326:	f7ff f80d 	bl	8003344 <xTaskRemoveFromEventList>
 800432a:	2801      	cmp	r0, #1
 800432c:	d1f5      	bne.n	800431a <xQueueGenericReset+0x36>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800432e:	f000 fa3b 	bl	80047a8 <vPortYield>
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
 8004332:	f000 fa79 	bl	8004828 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8004336:	2001      	movs	r0, #1
 8004338:	bd70      	pop	{r4, r5, r6, pc}
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800433a:	f104 0010 	add.w	r0, r4, #16
 800433e:	f7ff fd9d 	bl	8003e7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004342:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004346:	f7ff fd99 	bl	8003e7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800434a:	f000 fa6d 	bl	8004828 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 800434e:	2001      	movs	r0, #1
 8004350:	bd70      	pop	{r4, r5, r6, pc}

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8004352:	f000 fa35 	bl	80047c0 <ulPortSetInterruptMask>
 8004356:	e7fe      	b.n	8004356 <xQueueGenericReset+0x72>

08004358 <xQueueGenericCreate>:
	return pdPASS;
}
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8004358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800435a:	b1b8      	cbz	r0, 800438c <xQueueGenericCreate+0x34>
 800435c:	460e      	mov	r6, r1
 800435e:	4617      	mov	r7, r2
 8004360:	4605      	mov	r5, r0

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004362:	b1b1      	cbz	r1, 8004392 <xQueueGenericCreate+0x3a>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004364:	fb01 f000 	mul.w	r0, r1, r0
 8004368:	3055      	adds	r0, #85	; 0x55
 800436a:	f001 fbe7 	bl	8005b3c <pvPortMalloc>

	if( pcAllocatedBuffer != NULL )
 800436e:	4604      	mov	r4, r0
 8004370:	b1b0      	cbz	r0, 80043a0 <xQueueGenericCreate+0x48>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area - adding the padding bytes to get a better alignment. */
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 8004372:	f100 0354 	add.w	r3, r0, #84	; 0x54
 8004376:	6003      	str	r3, [r0, #0]
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
 8004378:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800437a:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800437c:	2101      	movs	r1, #1
 800437e:	4620      	mov	r0, r4
 8004380:	f7ff ffb0 	bl	80042e4 <xQueueGenericReset>

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
 8004384:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
	}

	configASSERT( xReturn );

	return xReturn;
}
 8004388:	4620      	mov	r0, r4
 800438a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800438c:	f000 fa18 	bl	80047c0 <ulPortSetInterruptMask>
 8004390:	e7fe      	b.n	8004390 <xQueueGenericCreate+0x38>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004392:	2054      	movs	r0, #84	; 0x54
 8004394:	f001 fbd2 	bl	8005b3c <pvPortMalloc>

	if( pcAllocatedBuffer != NULL )
 8004398:	4604      	mov	r4, r0
 800439a:	b108      	cbz	r0, 80043a0 <xQueueGenericCreate+0x48>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800439c:	6024      	str	r4, [r4, #0]
 800439e:	e7eb      	b.n	8004378 <xQueueGenericCreate+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80043a0:	f000 fa0e 	bl	80047c0 <ulPortSetInterruptMask>
 80043a4:	e7fe      	b.n	80043a4 <xQueueGenericCreate+0x4c>
 80043a6:	bf00      	nop

080043a8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80043a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043ac:	b085      	sub	sp, #20
 80043ae:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d05f      	beq.n	8004474 <xQueueGenericSend+0xcc>
 80043b4:	4689      	mov	r9, r1
 80043b6:	461f      	mov	r7, r3
 80043b8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043ba:	2900      	cmp	r1, #0
 80043bc:	d07d      	beq.n	80044ba <xQueueGenericSend+0x112>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043be:	2f02      	cmp	r7, #2
 80043c0:	d03f      	beq.n	8004442 <xQueueGenericSend+0x9a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043c2:	f7ff f847 	bl	8003454 <xTaskGetSchedulerState>
 80043c6:	2800      	cmp	r0, #0
 80043c8:	d152      	bne.n	8004470 <xQueueGenericSend+0xc8>
 80043ca:	9e01      	ldr	r6, [sp, #4]
 80043cc:	2e00      	cmp	r6, #0
 80043ce:	d171      	bne.n	80044b4 <xQueueGenericSend+0x10c>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 80043d0:	f04f 0800 	mov.w	r8, #0
 80043d4:	e025      	b.n	8004422 <xQueueGenericSend+0x7a>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043d6:	f000 fa27 	bl	8004828 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043da:	f7fe fded 	bl	8002fb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043de:	f000 fa05 	bl	80047ec <vPortEnterCritical>
 80043e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80043e4:	3301      	adds	r3, #1
 80043e6:	bf08      	it	eq
 80043e8:	f8c4 8044 	streq.w	r8, [r4, #68]	; 0x44
 80043ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80043ee:	3301      	adds	r3, #1
 80043f0:	bf08      	it	eq
 80043f2:	f8c4 8048 	streq.w	r8, [r4, #72]	; 0x48
 80043f6:	f000 fa17 	bl	8004828 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043fa:	a901      	add	r1, sp, #4
 80043fc:	a802      	add	r0, sp, #8
 80043fe:	f7fe ffe9 	bl	80033d4 <xTaskCheckForTimeOut>
 8004402:	2800      	cmp	r0, #0
 8004404:	d139      	bne.n	800447a <xQueueGenericSend+0xd2>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004406:	f000 f9f1 	bl	80047ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800440a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800440c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800440e:	429a      	cmp	r2, r3
 8004410:	d01d      	beq.n	800444e <xQueueGenericSend+0xa6>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004412:	f000 fa09 	bl	8004828 <vPortExitCritical>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004416:	4620      	mov	r0, r4
 8004418:	f7ff ff22 	bl	8004260 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800441c:	f7fe fe6e 	bl	80030fc <xTaskResumeAll>
 8004420:	2601      	movs	r6, #1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004422:	f000 f9e3 	bl	80047ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004426:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004428:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800442a:	429a      	cmp	r2, r3
 800442c:	d334      	bcc.n	8004498 <xQueueGenericSend+0xf0>
 800442e:	2f02      	cmp	r7, #2
 8004430:	d032      	beq.n	8004498 <xQueueGenericSend+0xf0>
				taskEXIT_CRITICAL();
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004432:	9d01      	ldr	r5, [sp, #4]
 8004434:	b355      	cbz	r5, 800448c <xQueueGenericSend+0xe4>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
 8004436:	2e00      	cmp	r6, #0
 8004438:	d1cd      	bne.n	80043d6 <xQueueGenericSend+0x2e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800443a:	a802      	add	r0, sp, #8
 800443c:	f7fe ffba 	bl	80033b4 <vTaskSetTimeOutState>
 8004440:	e7c9      	b.n	80043d6 <xQueueGenericSend+0x2e>
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004442:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004444:	2b01      	cmp	r3, #1
 8004446:	d0bc      	beq.n	80043c2 <xQueueGenericSend+0x1a>
 8004448:	f000 f9ba 	bl	80047c0 <ulPortSetInterruptMask>
 800444c:	e7fe      	b.n	800444c <xQueueGenericSend+0xa4>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800444e:	f000 f9eb 	bl	8004828 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004452:	9901      	ldr	r1, [sp, #4]
 8004454:	f104 0010 	add.w	r0, r4, #16
 8004458:	f7fe ff1c 	bl	8003294 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800445c:	4620      	mov	r0, r4
 800445e:	f7ff feff 	bl	8004260 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004462:	f7fe fe4b 	bl	80030fc <xTaskResumeAll>
 8004466:	2800      	cmp	r0, #0
 8004468:	d1da      	bne.n	8004420 <xQueueGenericSend+0x78>
				{
					portYIELD_WITHIN_API();
 800446a:	f000 f99d 	bl	80047a8 <vPortYield>
 800446e:	e7d7      	b.n	8004420 <xQueueGenericSend+0x78>
 8004470:	2600      	movs	r6, #0
 8004472:	e7ad      	b.n	80043d0 <xQueueGenericSend+0x28>
{
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8004474:	f000 f9a4 	bl	80047c0 <ulPortSetInterruptMask>
 8004478:	e7fe      	b.n	8004478 <xQueueGenericSend+0xd0>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800447a:	4620      	mov	r0, r4
 800447c:	f7ff fef0 	bl	8004260 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004480:	f7fe fe3c 	bl	80030fc <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004484:	2000      	movs	r0, #0
		}
	}
}
 8004486:	b005      	add	sp, #20
 8004488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			{
				if( xTicksToWait == ( TickType_t ) 0 )
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800448c:	f000 f9cc 	bl	8004828 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004490:	4628      	mov	r0, r5
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
 8004492:	b005      	add	sp, #20
 8004494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004498:	463a      	mov	r2, r7
 800449a:	4649      	mov	r1, r9
 800449c:	4620      	mov	r0, r4
 800449e:	f7ff fe8f 	bl	80041c0 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044a4:	b983      	cbnz	r3, 80044c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80044a6:	b9a8      	cbnz	r0, 80044d4 <xQueueGenericSend+0x12c>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80044a8:	f000 f9be 	bl	8004828 <vPortExitCritical>
				return pdPASS;
 80044ac:	2001      	movs	r0, #1
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
 80044ae:	b005      	add	sp, #20
 80044b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044b4:	f000 f984 	bl	80047c0 <ulPortSetInterruptMask>
 80044b8:	e7fe      	b.n	80044b8 <xQueueGenericSend+0x110>
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f43f af7e 	beq.w	80043be <xQueueGenericSend+0x16>
 80044c2:	f000 f97d 	bl	80047c0 <ulPortSetInterruptMask>
 80044c6:	e7fe      	b.n	80044c6 <xQueueGenericSend+0x11e>
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 80044c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80044cc:	f7fe ff3a 	bl	8003344 <xTaskRemoveFromEventList>
 80044d0:	2801      	cmp	r0, #1
 80044d2:	d1e9      	bne.n	80044a8 <xQueueGenericSend+0x100>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80044d4:	f000 f968 	bl	80047a8 <vPortYield>
 80044d8:	e7e6      	b.n	80044a8 <xQueueGenericSend+0x100>
 80044da:	bf00      	nop

080044dc <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80044dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d036      	beq.n	8004552 <xQueueGenericSendFromISR+0x76>
 80044e4:	460d      	mov	r5, r1
 80044e6:	4617      	mov	r7, r2
 80044e8:	4698      	mov	r8, r3
 80044ea:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044ec:	2900      	cmp	r1, #0
 80044ee:	d046      	beq.n	800457e <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044f0:	f1b8 0f02 	cmp.w	r8, #2
 80044f4:	d00f      	beq.n	8004516 <xQueueGenericSendFromISR+0x3a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044f6:	f000 fa3b 	bl	8004970 <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044fa:	f000 f961 	bl	80047c0 <ulPortSetInterruptMask>
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004500:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004502:	4606      	mov	r6, r0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004504:	429a      	cmp	r2, r3
 8004506:	d812      	bhi.n	800452e <xQueueGenericSendFromISR+0x52>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004508:	2500      	movs	r5, #0
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800450a:	4630      	mov	r0, r6
 800450c:	f000 f988 	bl	8004820 <vPortClearInterruptMask>

	return xReturn;
}
 8004510:	4628      	mov	r0, r5
 8004512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004516:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004518:	2b01      	cmp	r3, #1
 800451a:	d002      	beq.n	8004522 <xQueueGenericSendFromISR+0x46>
 800451c:	f000 f950 	bl	80047c0 <ulPortSetInterruptMask>
 8004520:	e7fe      	b.n	8004520 <xQueueGenericSendFromISR+0x44>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004522:	f000 fa25 	bl	8004970 <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004526:	f000 f94b 	bl	80047c0 <ulPortSetInterruptMask>
 800452a:	4606      	mov	r6, r0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800452c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800452e:	4642      	mov	r2, r8
 8004530:	4629      	mov	r1, r5
 8004532:	4620      	mov	r0, r4
 8004534:	f7ff fe44 	bl	80041c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8004538:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800453a:	3301      	adds	r3, #1
 800453c:	d00c      	beq.n	8004558 <xQueueGenericSendFromISR+0x7c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 800453e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
 8004540:	2501      	movs	r5, #1
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8004542:	442b      	add	r3, r5
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004544:	4630      	mov	r0, r6
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8004546:	64a3      	str	r3, [r4, #72]	; 0x48
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004548:	f000 f96a 	bl	8004820 <vPortClearInterruptMask>

	return xReturn;
}
 800454c:	4628      	mov	r0, r5
 800454e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8004552:	f000 f935 	bl	80047c0 <ulPortSetInterruptMask>
 8004556:	e7fe      	b.n	8004556 <xQueueGenericSendFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004558:	6a63      	ldr	r3, [r4, #36]	; 0x24
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800455a:	2501      	movs	r5, #1
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0d4      	beq.n	800450a <xQueueGenericSendFromISR+0x2e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004560:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004564:	f7fe feee 	bl	8003344 <xTaskRemoveFromEventList>
 8004568:	2800      	cmp	r0, #0
 800456a:	d0ce      	beq.n	800450a <xQueueGenericSendFromISR+0x2e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800456c:	2f00      	cmp	r7, #0
 800456e:	d0cc      	beq.n	800450a <xQueueGenericSendFromISR+0x2e>
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004570:	4630      	mov	r0, r6
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004572:	603d      	str	r5, [r7, #0]
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004574:	f000 f954 	bl	8004820 <vPortClearInterruptMask>

	return xReturn;
}
 8004578:	4628      	mov	r0, r5
 800457a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800457e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0b5      	beq.n	80044f0 <xQueueGenericSendFromISR+0x14>
 8004584:	f000 f91c 	bl	80047c0 <ulPortSetInterruptMask>
 8004588:	e7fe      	b.n	8004588 <xQueueGenericSendFromISR+0xac>
 800458a:	bf00      	nop

0800458c <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 800458c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004590:	b085      	sub	sp, #20
 8004592:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8004594:	2800      	cmp	r0, #0
 8004596:	d052      	beq.n	800463e <xQueueGenericReceive+0xb2>
 8004598:	4688      	mov	r8, r1
 800459a:	4699      	mov	r9, r3
 800459c:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800459e:	2900      	cmp	r1, #0
 80045a0:	f000 8093 	beq.w	80046ca <xQueueGenericReceive+0x13e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045a4:	f7fe ff56 	bl	8003454 <xTaskGetSchedulerState>
 80045a8:	b920      	cbnz	r0, 80045b4 <xQueueGenericReceive+0x28>
 80045aa:	9e01      	ldr	r6, [sp, #4]
 80045ac:	b11e      	cbz	r6, 80045b6 <xQueueGenericReceive+0x2a>
 80045ae:	f000 f907 	bl	80047c0 <ulPortSetInterruptMask>
 80045b2:	e7fe      	b.n	80045b2 <xQueueGenericReceive+0x26>
 80045b4:	2600      	movs	r6, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 80045b6:	2700      	movs	r7, #0
 80045b8:	e007      	b.n	80045ca <xQueueGenericReceive+0x3e>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80045ba:	f000 f935 	bl	8004828 <vPortExitCritical>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80045be:	4620      	mov	r0, r4
 80045c0:	f7ff fe4e 	bl	8004260 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045c4:	f7fe fd9a 	bl	80030fc <xTaskResumeAll>
 80045c8:	2601      	movs	r6, #1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80045ca:	f000 f90f 	bl	80047ec <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d14e      	bne.n	8004672 <xQueueGenericReceive+0xe6>
				taskEXIT_CRITICAL();
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045d4:	9d01      	ldr	r5, [sp, #4]
 80045d6:	2d00      	cmp	r5, #0
 80045d8:	d045      	beq.n	8004666 <xQueueGenericReceive+0xda>
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
 80045da:	b366      	cbz	r6, 8004636 <xQueueGenericReceive+0xaa>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045dc:	f000 f924 	bl	8004828 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045e0:	f7fe fcea 	bl	8002fb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045e4:	f000 f902 	bl	80047ec <vPortEnterCritical>
 80045e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80045ea:	3301      	adds	r3, #1
 80045ec:	bf08      	it	eq
 80045ee:	6467      	streq	r7, [r4, #68]	; 0x44
 80045f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80045f2:	3301      	adds	r3, #1
 80045f4:	bf08      	it	eq
 80045f6:	64a7      	streq	r7, [r4, #72]	; 0x48
 80045f8:	f000 f916 	bl	8004828 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045fc:	a901      	add	r1, sp, #4
 80045fe:	a802      	add	r0, sp, #8
 8004600:	f7fe fee8 	bl	80033d4 <xTaskCheckForTimeOut>
 8004604:	bb30      	cbnz	r0, 8004654 <xQueueGenericReceive+0xc8>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004606:	f000 f8f1 	bl	80047ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800460a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1d4      	bne.n	80045ba <xQueueGenericReceive+0x2e>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004610:	f000 f90a 	bl	8004828 <vPortExitCritical>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004614:	6823      	ldr	r3, [r4, #0]
 8004616:	b1ab      	cbz	r3, 8004644 <xQueueGenericReceive+0xb8>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004618:	9901      	ldr	r1, [sp, #4]
 800461a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800461e:	f7fe fe39 	bl	8003294 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004622:	4620      	mov	r0, r4
 8004624:	f7ff fe1c 	bl	8004260 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004628:	f7fe fd68 	bl	80030fc <xTaskResumeAll>
 800462c:	2800      	cmp	r0, #0
 800462e:	d1cb      	bne.n	80045c8 <xQueueGenericReceive+0x3c>
				{
					portYIELD_WITHIN_API();
 8004630:	f000 f8ba 	bl	80047a8 <vPortYield>
 8004634:	e7c8      	b.n	80045c8 <xQueueGenericReceive+0x3c>
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8004636:	a802      	add	r0, sp, #8
 8004638:	f7fe febc 	bl	80033b4 <vTaskSetTimeOutState>
 800463c:	e7ce      	b.n	80045dc <xQueueGenericReceive+0x50>
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800463e:	f000 f8bf 	bl	80047c0 <ulPortSetInterruptMask>
 8004642:	e7fe      	b.n	8004642 <xQueueGenericReceive+0xb6>

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
					{
						taskENTER_CRITICAL();
 8004644:	f000 f8d2 	bl	80047ec <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004648:	6860      	ldr	r0, [r4, #4]
 800464a:	f7fe ff13 	bl	8003474 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800464e:	f000 f8eb 	bl	8004828 <vPortExitCritical>
 8004652:	e7e1      	b.n	8004618 <xQueueGenericReceive+0x8c>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8004654:	4620      	mov	r0, r4
 8004656:	f7ff fe03 	bl	8004260 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800465a:	f7fe fd4f 	bl	80030fc <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 800465e:	2000      	movs	r0, #0
		}
	}
}
 8004660:	b005      	add	sp, #20
 8004662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			{
				if( xTicksToWait == ( TickType_t ) 0 )
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004666:	f000 f8df 	bl	8004828 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800466a:	4628      	mov	r0, r5
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
 800466c:	b005      	add	sp, #20
 800466e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004672:	4641      	mov	r1, r8
 8004674:	4620      	mov	r0, r4
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8004676:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004678:	f7ff fde0 	bl	800423c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800467c:	f1b9 0f00 	cmp.w	r9, #0
 8004680:	d10f      	bne.n	80046a2 <xQueueGenericReceive+0x116>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8004682:	6ba3      	ldr	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004684:	6822      	ldr	r2, [r4, #0]
				if( xJustPeeking == pdFALSE )
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8004686:	3b01      	subs	r3, #1
 8004688:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800468a:	b912      	cbnz	r2, 8004692 <xQueueGenericReceive+0x106>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800468c:	f7fe ff88 	bl	80035a0 <pvTaskIncrementMutexHeldCount>
 8004690:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004692:	6923      	ldr	r3, [r4, #16]
 8004694:	b993      	cbnz	r3, 80046bc <xQueueGenericReceive+0x130>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8004696:	f000 f8c7 	bl	8004828 <vPortExitCritical>
				return pdPASS;
 800469a:	2001      	movs	r0, #1
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
 800469c:	b005      	add	sp, #20
 800469e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80046a4:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f5      	beq.n	8004696 <xQueueGenericReceive+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80046ae:	f7fe fe49 	bl	8003344 <xTaskRemoveFromEventList>
 80046b2:	2800      	cmp	r0, #0
 80046b4:	d0ef      	beq.n	8004696 <xQueueGenericReceive+0x10a>

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
						{
							queueYIELD_IF_USING_PREEMPTION();
 80046b6:	f000 f877 	bl	80047a8 <vPortYield>
 80046ba:	e7ec      	b.n	8004696 <xQueueGenericReceive+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80046bc:	f104 0010 	add.w	r0, r4, #16
 80046c0:	f7fe fe40 	bl	8003344 <xTaskRemoveFromEventList>
 80046c4:	2801      	cmp	r0, #1
 80046c6:	d1e6      	bne.n	8004696 <xQueueGenericReceive+0x10a>
 80046c8:	e7f5      	b.n	80046b6 <xQueueGenericReceive+0x12a>
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f43f af69 	beq.w	80045a4 <xQueueGenericReceive+0x18>
 80046d2:	f000 f875 	bl	80047c0 <ulPortSetInterruptMask>
 80046d6:	e7fe      	b.n	80046d6 <xQueueGenericReceive+0x14a>

080046d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80046d8:	b470      	push	{r4, r5, r6}
 80046da:	4a09      	ldr	r2, [pc, #36]	; (8004700 <vQueueAddToRegistry+0x28>)
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046dc:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80046de:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80046e2:	4e07      	ldr	r6, [pc, #28]	; (8004700 <vQueueAddToRegistry+0x28>)
 80046e4:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80046e8:	b124      	cbz	r4, 80046f4 <vQueueAddToRegistry+0x1c>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046ea:	3301      	adds	r3, #1
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d1f6      	bne.n	80046de <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80046f0:	bc70      	pop	{r4, r5, r6}
 80046f2:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80046f4:	f846 1033 	str.w	r1, [r6, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80046f8:	6068      	str	r0, [r5, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80046fa:	bc70      	pop	{r4, r5, r6}
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	2000249c 	.word	0x2000249c

08004704 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 8004704:	b538      	push	{r3, r4, r5, lr}
 8004706:	4604      	mov	r4, r0
 8004708:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800470a:	f000 f86f 	bl	80047ec <vPortEnterCritical>
 800470e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004710:	3301      	adds	r3, #1
 8004712:	bf04      	itt	eq
 8004714:	2300      	moveq	r3, #0
 8004716:	6463      	streq	r3, [r4, #68]	; 0x44
 8004718:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800471a:	3301      	adds	r3, #1
 800471c:	bf04      	itt	eq
 800471e:	2300      	moveq	r3, #0
 8004720:	64a3      	streq	r3, [r4, #72]	; 0x48
 8004722:	f000 f881 	bl	8004828 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004726:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004728:	b923      	cbnz	r3, 8004734 <vQueueWaitForMessageRestricted+0x30>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800472a:	4629      	mov	r1, r5
 800472c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004730:	f7fe fde2 	bl	80032f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004734:	4620      	mov	r0, r4
	}
 8004736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800473a:	f7ff bd91 	b.w	8004260 <prvUnlockQueue>
 800473e:	bf00      	nop

08004740 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004740:	4806      	ldr	r0, [pc, #24]	; (800475c <prvPortStartFirstTask+0x1c>)
 8004742:	6800      	ldr	r0, [r0, #0]
 8004744:	6800      	ldr	r0, [r0, #0]
 8004746:	f380 8808 	msr	MSP, r0
 800474a:	b662      	cpsie	i
 800474c:	b661      	cpsie	f
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	df00      	svc	0
 8004758:	bf00      	nop
 800475a:	0000      	.short	0x0000
 800475c:	e000ed08 	.word	0xe000ed08

08004760 <pxPortInitialiseStack>:
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004760:	4b07      	ldr	r3, [pc, #28]	; (8004780 <pxPortInitialiseStack+0x20>)

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004762:	b410      	push	{r4}
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004764:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
 8004768:	f840 4c04 	str.w	r4, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800476c:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004770:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004774:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8004778:	bc10      	pop	{r4}
 800477a:	3840      	subs	r0, #64	; 0x40
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	080047d1 	.word	0x080047d1

08004784 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004784:	4b07      	ldr	r3, [pc, #28]	; (80047a4 <pxCurrentTCBConst2>)
 8004786:	6819      	ldr	r1, [r3, #0]
 8004788:	6808      	ldr	r0, [r1, #0]
 800478a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800478e:	f380 8809 	msr	PSP, r0
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f04f 0000 	mov.w	r0, #0
 800479a:	f380 8811 	msr	BASEPRI, r0
 800479e:	f04e 0e0d 	orr.w	lr, lr, #13
 80047a2:	4770      	bx	lr

080047a4 <pxCurrentTCBConst2>:
 80047a4:	20000a6c 	.word	0x20000a6c

080047a8 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047a8:	4b04      	ldr	r3, [pc, #16]	; (80047bc <vPortYield+0x14>)
 80047aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ae:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 80047b0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	e000ed04 	.word	0xe000ed04

080047c0 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
 80047c0:	f3ef 8011 	mrs	r0, BASEPRI
 80047c4:	f04f 0150 	mov.w	r1, #80	; 0x50
 80047c8:	f381 8811 	msr	BASEPRI, r1
 80047cc:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
 80047ce:	2000      	movs	r0, #0

080047d0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047d0:	b508      	push	{r3, lr}
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80047d2:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <prvTaskExitError+0x18>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3301      	adds	r3, #1
 80047d8:	d002      	beq.n	80047e0 <prvTaskExitError+0x10>
 80047da:	f7ff fff1 	bl	80047c0 <ulPortSetInterruptMask>
 80047de:	e7fe      	b.n	80047de <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
 80047e0:	f7ff ffee 	bl	80047c0 <ulPortSetInterruptMask>
 80047e4:	e7fe      	b.n	80047e4 <prvTaskExitError+0x14>
 80047e6:	bf00      	nop
 80047e8:	20000470 	.word	0x20000470

080047ec <vPortEnterCritical>:
	__asm volatile( "isb" );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047ec:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
 80047ee:	f7ff ffe7 	bl	80047c0 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 80047f2:	4a09      	ldr	r2, [pc, #36]	; (8004818 <vPortEnterCritical+0x2c>)
 80047f4:	6813      	ldr	r3, [r2, #0]
 80047f6:	3301      	adds	r3, #1
 80047f8:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 80047fa:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80047fe:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004802:	2b01      	cmp	r3, #1
 8004804:	d000      	beq.n	8004808 <vPortEnterCritical+0x1c>
 8004806:	bd08      	pop	{r3, pc}
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004808:	4b04      	ldr	r3, [pc, #16]	; (800481c <vPortEnterCritical+0x30>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004810:	d0f9      	beq.n	8004806 <vPortEnterCritical+0x1a>
 8004812:	f7ff ffd5 	bl	80047c0 <ulPortSetInterruptMask>
 8004816:	e7fe      	b.n	8004816 <vPortEnterCritical+0x2a>
 8004818:	20000470 	.word	0x20000470
 800481c:	e000ed04 	.word	0xe000ed04

08004820 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
 8004820:	f380 8811 	msr	BASEPRI, r0
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop

08004828 <vPortExitCritical>:
	}
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004828:	b508      	push	{r3, lr}
	configASSERT( uxCriticalNesting );
 800482a:	4b07      	ldr	r3, [pc, #28]	; (8004848 <vPortExitCritical+0x20>)
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	b118      	cbz	r0, 8004838 <vPortExitCritical+0x10>
	uxCriticalNesting--;
 8004830:	3801      	subs	r0, #1
 8004832:	6018      	str	r0, [r3, #0]
	if( uxCriticalNesting == 0 )
 8004834:	b118      	cbz	r0, 800483e <vPortExitCritical+0x16>
 8004836:	bd08      	pop	{r3, pc}
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8004838:	f7ff ffc2 	bl	80047c0 <ulPortSetInterruptMask>
 800483c:	e7fe      	b.n	800483c <vPortExitCritical+0x14>
	uxCriticalNesting--;
	if( uxCriticalNesting == 0 )
	{
		portENABLE_INTERRUPTS();
	}
}
 800483e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
	if( uxCriticalNesting == 0 )
	{
		portENABLE_INTERRUPTS();
 8004842:	f7ff bfed 	b.w	8004820 <vPortClearInterruptMask>
 8004846:	bf00      	nop
 8004848:	20000470 	.word	0x20000470

0800484c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800484c:	f3ef 8009 	mrs	r0, PSP
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	4b0d      	ldr	r3, [pc, #52]	; (800488c <pxCurrentTCBConst>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800485c:	6010      	str	r0, [r2, #0]
 800485e:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004862:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004866:	f380 8811 	msr	BASEPRI, r0
 800486a:	f7fe fce7 	bl	800323c <vTaskSwitchContext>
 800486e:	f04f 0000 	mov.w	r0, #0
 8004872:	f380 8811 	msr	BASEPRI, r0
 8004876:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800487a:	6819      	ldr	r1, [r3, #0]
 800487c:	6808      	ldr	r0, [r1, #0]
 800487e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004882:	f380 8809 	msr	PSP, r0
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	4770      	bx	lr

0800488c <pxCurrentTCBConst>:
 800488c:	20000a6c 	.word	0x20000a6c

08004890 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004890:	b508      	push	{r3, lr}
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8004892:	f7ff ff95 	bl	80047c0 <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004896:	f7fe fb9f 	bl	8002fd8 <xTaskIncrementTick>
 800489a:	b118      	cbz	r0, 80048a4 <xPortSysTickHandler+0x14>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800489c:	4b04      	ldr	r3, [pc, #16]	; (80048b0 <xPortSysTickHandler+0x20>)
 800489e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a2:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 80048a4:	2000      	movs	r0, #0
}
 80048a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 80048aa:	f7ff bfb9 	b.w	8004820 <vPortClearInterruptMask>
 80048ae:	bf00      	nop
 80048b0:	e000ed04 	.word	0xe000ed04

080048b4 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048b4:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <vPortSetupTimerInterrupt+0x1c>)
 80048b6:	4a07      	ldr	r2, [pc, #28]	; (80048d4 <vPortSetupTimerInterrupt+0x20>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4807      	ldr	r0, [pc, #28]	; (80048d8 <vPortSetupTimerInterrupt+0x24>)
 80048bc:	fba2 2303 	umull	r2, r3, r2, r3
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048c0:	4a06      	ldr	r2, [pc, #24]	; (80048dc <vPortSetupTimerInterrupt+0x28>)
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048c2:	099b      	lsrs	r3, r3, #6
 80048c4:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048c6:	2107      	movs	r1, #7
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048c8:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048ca:	6011      	str	r1, [r2, #0]
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	20000000 	.word	0x20000000
 80048d4:	10624dd3 	.word	0x10624dd3
 80048d8:	e000e014 	.word	0xe000e014
 80048dc:	e000e010 	.word	0xe000e010

080048e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048e0:	b510      	push	{r4, lr}
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048e2:	4b1f      	ldr	r3, [pc, #124]	; (8004960 <xPortStartScheduler+0x80>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048e4:	b082      	sub	sp, #8
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048e6:	781a      	ldrb	r2, [r3, #0]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048e8:	21ff      	movs	r1, #255	; 0xff
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048ee:	7019      	strb	r1, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048f0:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048f2:	481c      	ldr	r0, [pc, #112]	; (8004964 <xPortStartScheduler+0x84>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048fa:	f89d 3003 	ldrb.w	r3, [sp, #3]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048fe:	f89d 1003 	ldrb.w	r1, [sp, #3]
		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004902:	2207      	movs	r2, #7

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004904:	f003 0350 	and.w	r3, r3, #80	; 0x50

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004908:	0609      	lsls	r1, r1, #24

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800490a:	7003      	strb	r3, [r0, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800490c:	6042      	str	r2, [r0, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800490e:	d50d      	bpl.n	800492c <xPortStartScheduler+0x4c>
 8004910:	2206      	movs	r2, #6
 8004912:	e000      	b.n	8004916 <xPortStartScheduler+0x36>
 8004914:	460a      	mov	r2, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004916:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800491a:	1e51      	subs	r1, r2, #1
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	b2db      	uxtb	r3, r3
 8004920:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004924:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004928:	061b      	lsls	r3, r3, #24
 800492a:	d4f3      	bmi.n	8004914 <xPortStartScheduler+0x34>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800492c:	9901      	ldr	r1, [sp, #4]
 800492e:	4c0c      	ldr	r4, [pc, #48]	; (8004960 <xPortStartScheduler+0x80>)
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004930:	4b0d      	ldr	r3, [pc, #52]	; (8004968 <xPortStartScheduler+0x88>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004932:	b2c9      	uxtb	r1, r1
 8004934:	7021      	strb	r1, [r4, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004936:	6819      	ldr	r1, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004938:	0212      	lsls	r2, r2, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800493a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800493e:	6019      	str	r1, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004940:	6819      	ldr	r1, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004942:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004946:	f041 4170 	orr.w	r1, r1, #4026531840	; 0xf0000000
 800494a:	6019      	str	r1, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800494c:	6042      	str	r2, [r0, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800494e:	f7ff ffb1 	bl	80048b4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004952:	4b06      	ldr	r3, [pc, #24]	; (800496c <xPortStartScheduler+0x8c>)
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004958:	f7ff fef2 	bl	8004740 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800495c:	f7ff ff38 	bl	80047d0 <prvTaskExitError>
 8004960:	e000e400 	.word	0xe000e400
 8004964:	20000ce8 	.word	0x20000ce8
 8004968:	e000ed20 	.word	0xe000ed20
 800496c:	20000470 	.word	0x20000470

08004970 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004970:	b508      	push	{r3, lr}
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8004972:	f3ef 8205 	mrs	r2, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004976:	2a0f      	cmp	r2, #15
 8004978:	d808      	bhi.n	800498c <vPortValidateInterruptPriority+0x1c>
 800497a:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <vPortValidateInterruptPriority+0x34>)
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800497c:	490a      	ldr	r1, [pc, #40]	; (80049a8 <vPortValidateInterruptPriority+0x38>)
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	680b      	ldr	r3, [r1, #0]
 8004982:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004986:	4293      	cmp	r3, r2
 8004988:	d809      	bhi.n	800499e <vPortValidateInterruptPriority+0x2e>
 800498a:	bd08      	pop	{r3, pc}

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800498c:	4907      	ldr	r1, [pc, #28]	; (80049ac <vPortValidateInterruptPriority+0x3c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800498e:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <vPortValidateInterruptPriority+0x34>)

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004990:	5c52      	ldrb	r2, [r2, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004992:	7819      	ldrb	r1, [r3, #0]
 8004994:	4291      	cmp	r1, r2
 8004996:	d9f1      	bls.n	800497c <vPortValidateInterruptPriority+0xc>
 8004998:	f7ff ff12 	bl	80047c0 <ulPortSetInterruptMask>
 800499c:	e7fe      	b.n	800499c <vPortValidateInterruptPriority+0x2c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800499e:	f7ff ff0f 	bl	80047c0 <ulPortSetInterruptMask>
 80049a2:	e7fe      	b.n	80049a2 <vPortValidateInterruptPriority+0x32>
 80049a4:	20000ce8 	.word	0x20000ce8
 80049a8:	e000ed0c 	.word	0xe000ed0c
 80049ac:	e000e3f0 	.word	0xe000e3f0

080049b0 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80049b0:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 80049b4:	b11b      	cbz	r3, 80049be <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 80049b6:	2000      	movs	r0, #0
 80049b8:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 80049bc:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 80049be:	2002      	movs	r0, #2
  }
}
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop

080049c4 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80049c4:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 80049c8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80049ca:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80049ce:	b15b      	cbz	r3, 80049e8 <USBD_CDC_EP0_RxReady+0x24>
 80049d0:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80049d4:	28ff      	cmp	r0, #255	; 0xff
 80049d6:	d007      	beq.n	80049e8 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80049de:	4621      	mov	r1, r4
 80049e0:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 80049e2:	23ff      	movs	r3, #255	; 0xff
 80049e4:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 80049e8:	2000      	movs	r0, #0
 80049ea:	bd10      	pop	{r4, pc}

080049ec <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80049ec:	2343      	movs	r3, #67	; 0x43
 80049ee:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80049f0:	4800      	ldr	r0, [pc, #0]	; (80049f4 <USBD_CDC_GetFSCfgDesc+0x8>)
 80049f2:	4770      	bx	lr
 80049f4:	20000474 	.word	0x20000474

080049f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80049f8:	2343      	movs	r3, #67	; 0x43
 80049fa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80049fc:	4800      	ldr	r0, [pc, #0]	; (8004a00 <USBD_CDC_GetHSCfgDesc+0x8>)
 80049fe:	4770      	bx	lr
 8004a00:	200004b8 	.word	0x200004b8

08004a04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8004a04:	2343      	movs	r3, #67	; 0x43
 8004a06:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004a08:	4800      	ldr	r0, [pc, #0]	; (8004a0c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8004a0a:	4770      	bx	lr
 8004a0c:	200004fc 	.word	0x200004fc

08004a10 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8004a10:	230a      	movs	r3, #10
 8004a12:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8004a14:	4800      	ldr	r0, [pc, #0]	; (8004a18 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8004a16:	4770      	bx	lr
 8004a18:	20000540 	.word	0x20000540

08004a1c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8004a1c:	b538      	push	{r3, r4, r5, lr}
 8004a1e:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004a20:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004a24:	f7ff fa1c 	bl	8003e60 <USBD_LL_GetRxDataSize>
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8004a28:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004a2c:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8004a30:	b14b      	cbz	r3, 8004a46 <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004a32:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8004a36:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8004a40:	4798      	blx	r3

    return USBD_OK;
 8004a42:	2000      	movs	r0, #0
 8004a44:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 8004a46:	2002      	movs	r0, #2
  }
}
 8004a48:	bd38      	pop	{r3, r4, r5, pc}
 8004a4a:	bf00      	nop

08004a4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8004a4c:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004a4e:	780b      	ldrb	r3, [r1, #0]
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8004a50:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004a52:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 8004a56:	d014      	beq.n	8004a82 <USBD_CDC_Setup+0x36>
 8004a58:	2a20      	cmp	r2, #32
 8004a5a:	d110      	bne.n	8004a7e <USBD_CDC_Setup+0x32>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8004a5c:	88ca      	ldrh	r2, [r1, #6]
 8004a5e:	4605      	mov	r5, r0
 8004a60:	b322      	cbz	r2, 8004aac <USBD_CDC_Setup+0x60>
    {
      if (req->bmRequest & 0x80)
 8004a62:	061b      	lsls	r3, r3, #24
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004a64:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
    {
      if (req->bmRequest & 0x80)
 8004a68:	d414      	bmi.n	8004a94 <USBD_CDC_Setup+0x48>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8004a6a:	784b      	ldrb	r3, [r1, #1]
        hcdc->CmdLength = req->wLength;
        
        USBD_CtlPrepareRx (pdev, 
 8004a6c:	4631      	mov	r1, r6
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8004a6e:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8004a72:	88e3      	ldrh	r3, [r4, #6]
 8004a74:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
 8004a78:	88e2      	ldrh	r2, [r4, #6]
 8004a7a:	f001 f8a9 	bl	8005bd0 <USBD_CtlPrepareRx>
 
  default: 
    break;
  }
  return USBD_OK;
}
 8004a7e:	2000      	movs	r0, #0
 8004a80:	bd70      	pop	{r4, r5, r6, pc}
                                                        0);
    }
    break;

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004a82:	784b      	ldrb	r3, [r1, #1]
 8004a84:	2b0a      	cmp	r3, #10
 8004a86:	d1fa      	bne.n	8004a7e <USBD_CDC_Setup+0x32>
    {      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 8004a88:	2201      	movs	r2, #1
 8004a8a:	490b      	ldr	r1, [pc, #44]	; (8004ab8 <USBD_CDC_Setup+0x6c>)
 8004a8c:	f001 f88a 	bl	8005ba4 <USBD_CtlSendData>
 
  default: 
    break;
  }
  return USBD_OK;
}
 8004a90:	2000      	movs	r0, #0
 8004a92:	bd70      	pop	{r4, r5, r6, pc}
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
    {
      if (req->bmRequest & 0x80)
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004a94:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8004a98:	4631      	mov	r1, r6
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	7860      	ldrb	r0, [r4, #1]
 8004a9e:	4798      	blx	r3
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 8004aa0:	88e2      	ldrh	r2, [r4, #6]
 8004aa2:	4631      	mov	r1, r6
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	f001 f87d 	bl	8005ba4 <USBD_CtlSendData>
 8004aaa:	e7e8      	b.n	8004a7e <USBD_CDC_Setup+0x32>
      }
      
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004aac:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8004ab0:	7848      	ldrb	r0, [r1, #1]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	4798      	blx	r3
 8004ab6:	e7e2      	b.n	8004a7e <USBD_CDC_Setup+0x32>
 8004ab8:	20000cf0 	.word	0x20000cf0

08004abc <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8004abc:	b510      	push	{r4, lr}
 8004abe:	4604      	mov	r4, r0
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8004ac0:	2181      	movs	r1, #129	; 0x81
 8004ac2:	f7ff f98d 	bl	8003de0 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f7ff f989 	bl	8003de0 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8004ace:	4620      	mov	r0, r4
 8004ad0:	2182      	movs	r1, #130	; 0x82
 8004ad2:	f7ff f985 	bl	8003de0 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8004ad6:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8004ada:	b153      	cbz	r3, 8004af2 <USBD_CDC_DeInit+0x36>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004adc:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004ae4:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8004ae8:	f7ff f9c4 	bl	8003e74 <USBD_static_free>
    pdev->pClassData = NULL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  }
  
  return ret;
}
 8004af2:	2000      	movs	r0, #0
 8004af4:	bd10      	pop	{r4, pc}
 8004af6:	bf00      	nop

08004af8 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8004af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004afa:	7c03      	ldrb	r3, [r0, #16]
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8004afc:	4604      	mov	r4, r0
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004afe:	bb73      	cbnz	r3, 8004b5e <USBD_CDC_Init+0x66>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b04:	2202      	movs	r2, #2
 8004b06:	2181      	movs	r1, #129	; 0x81
 8004b08:	f7ff f960 	bl	8003dcc <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8004b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b10:	2202      	movs	r2, #2
 8004b12:	2101      	movs	r1, #1
 8004b14:	4620      	mov	r0, r4
 8004b16:	f7ff f959 	bl	8003dcc <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8004b1a:	2308      	movs	r3, #8
 8004b1c:	2203      	movs	r2, #3
 8004b1e:	2182      	movs	r1, #130	; 0x82
 8004b20:	4620      	mov	r0, r4
 8004b22:	f7ff f953 	bl	8003dcc <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8004b26:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004b2a:	f7ff f99f 	bl	8003e6c <USBD_static_malloc>
 8004b2e:	4605      	mov	r5, r0
 8004b30:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8004b34:	b330      	cbz	r0, 8004b84 <USBD_CDC_Init+0x8c>
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004b36:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8004b3a:	2600      	movs	r6, #0
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004b40:	7c27      	ldrb	r7, [r4, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004b42:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8004b46:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004b4a:	4620      	mov	r0, r4
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
 8004b4c:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004b50:	b18f      	cbz	r7, 8004b76 <USBD_CDC_Init+0x7e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004b52:	2340      	movs	r3, #64	; 0x40
 8004b54:	2101      	movs	r1, #1
 8004b56:	f7ff f97b 	bl	8003e50 <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004b5e:	2340      	movs	r3, #64	; 0x40
 8004b60:	2202      	movs	r2, #2
 8004b62:	2181      	movs	r1, #129	; 0x81
 8004b64:	f7ff f932 	bl	8003dcc <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8004b68:	2340      	movs	r3, #64	; 0x40
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	4620      	mov	r0, r4
 8004b70:	f7ff f92c 	bl	8003dcc <USBD_LL_OpenEP>
 8004b74:	e7d1      	b.n	8004b1a <USBD_CDC_Init+0x22>
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	f7ff f968 	bl	8003e50 <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 8004b80:	4638      	mov	r0, r7
 8004b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
  
  if(pdev->pClassData == NULL)
  {
    ret = 1; 
 8004b84:	2001      	movs	r0, #1
    }
    
    
  }
  return ret;
}
 8004b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b88 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8004b88:	b119      	cbz	r1, 8004b92 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8004b8a:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8004b8e:	2000      	movs	r0, #0
 8004b90:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 8004b92:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;    
  }
  
  return ret;
}
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop

08004b98 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004b98:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8004b9c:	2000      	movs	r0, #0
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->TxBuffer = pbuff;
 8004b9e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8004ba2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
}
 8004ba6:	4770      	bx	lr

08004ba8 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8004ba8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8004bac:	2000      	movs	r0, #0
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8004bae:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  
  return USBD_OK;
}
 8004bb2:	4770      	bx	lr

08004bb4 <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004bb4:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8004bb8:	b18a      	cbz	r2, 8004bde <USBD_CDC_TransmitPacket+0x2a>
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8004bba:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if(pdev->pClassData != NULL)
  {
    if(hcdc->TxState == 0)
 8004bbc:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8004bc0:	b10c      	cbz	r4, 8004bc6 <USBD_CDC_TransmitPacket+0x12>
      
      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8004bc2:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004bc4:	bd10      	pop	{r4, pc}
  if(pdev->pClassData != NULL)
  {
    if(hcdc->TxState == 0)
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8004bcc:	2181      	movs	r1, #129	; 0x81
 8004bce:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8004bd2:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8004bd6:	f7ff f933 	bl	8003e40 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 8004bda:	4620      	mov	r0, r4
 8004bdc:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8004bde:	2002      	movs	r0, #2
  }
}
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop

08004be4 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004be4:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8004be8:	b18a      	cbz	r2, 8004c0e <USBD_CDC_ReceivePacket+0x2a>
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8004bea:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004bec:	7c04      	ldrb	r4, [r0, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004bee:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004bf2:	b12c      	cbz	r4, 8004c00 <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004bf4:	2340      	movs	r3, #64	; 0x40
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	f7ff f92a 	bl	8003e50 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	bd10      	pop	{r4, pc}
  if(pdev->pClassData != NULL)
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c04:	2101      	movs	r1, #1
 8004c06:	f7ff f923 	bl	8003e50 <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBD_FAIL;
 8004c0e:	2002      	movs	r0, #2
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop

08004c14 <RTC_WeekDayNum>:
{
  uint32_t year = 0, weekday = 0;

  year = 2000 + nYear;
  
  if(nMonth < 3)
 8004c14:	2902      	cmp	r1, #2
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004c16:	b530      	push	{r4, r5, lr}
  uint32_t year = 0, weekday = 0;

  year = 2000 + nYear;
  
  if(nMonth < 3)
 8004c18:	d924      	bls.n	8004c64 <RTC_WeekDayNum+0x50>
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + ((year-1)/4) - ((year-1)/100) + ((year-1)/400)) % 7;
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + (year/4) - (year/100) + (year/400) - 2 ) % 7; 
 8004c1a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8004c1e:	4d24      	ldr	r5, [pc, #144]	; (8004cb0 <RTC_WeekDayNum+0x9c>)
 8004c20:	4c24      	ldr	r4, [pc, #144]	; (8004cb4 <RTC_WeekDayNum+0xa0>)
 8004c22:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
  uint32_t year = 0, weekday = 0;

  year = 2000 + nYear;
 8004c26:	f500 63fa 	add.w	r3, r0, #2000	; 0x7d0
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + ((year-1)/4) - ((year-1)/100) + ((year-1)/400)) % 7;
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + (year/4) - (year/100) + (year/400) - 2 ) % 7; 
 8004c2a:	fba4 e403 	umull	lr, r4, r4, r3
 8004c2e:	fb85 e501 	smull	lr, r5, r5, r1
 8004c32:	f200 70d2 	addw	r0, r0, #2002	; 0x7d2
 8004c36:	eb00 0393 	add.w	r3, r0, r3, lsr #2
 8004c3a:	17c9      	asrs	r1, r1, #31
 8004c3c:	eb03 13d4 	add.w	r3, r3, r4, lsr #7
 8004c40:	ebc1 0165 	rsb	r1, r1, r5, asr #1
 8004c44:	eba3 1054 	sub.w	r0, r3, r4, lsr #5
 8004c48:	4411      	add	r1, r2
 8004c4a:	4a1b      	ldr	r2, [pc, #108]	; (8004cb8 <RTC_WeekDayNum+0xa4>)
 8004c4c:	4401      	add	r1, r0
 8004c4e:	fba1 2302 	umull	r2, r3, r1, r2
 8004c52:	1ac8      	subs	r0, r1, r3
 8004c54:	eb03 0050 	add.w	r0, r3, r0, lsr #1
 8004c58:	0880      	lsrs	r0, r0, #2
 8004c5a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004c5e:	1a08      	subs	r0, r1, r0
  }

  return (uint8_t)weekday;
}
 8004c60:	b2c0      	uxtb	r0, r0
 8004c62:	bd30      	pop	{r4, r5, pc}
  year = 2000 + nYear;
  
  if(nMonth < 3)
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + ((year-1)/4) - ((year-1)/100) + ((year-1)/400)) % 7;
 8004c64:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8004c68:	4b11      	ldr	r3, [pc, #68]	; (8004cb0 <RTC_WeekDayNum+0x9c>)
 8004c6a:	4d12      	ldr	r5, [pc, #72]	; (8004cb4 <RTC_WeekDayNum+0xa0>)
 8004c6c:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8004c70:	f200 74cf 	addw	r4, r0, #1999	; 0x7cf
 8004c74:	fba5 e504 	umull	lr, r5, r5, r4
 8004c78:	fb83 e301 	smull	lr, r3, r3, r1
 8004c7c:	f200 70d4 	addw	r0, r0, #2004	; 0x7d4
 8004c80:	17c9      	asrs	r1, r1, #31
 8004c82:	eb00 0494 	add.w	r4, r0, r4, lsr #2
 8004c86:	ebc1 0363 	rsb	r3, r1, r3, asr #1
 8004c8a:	eb04 14d5 	add.w	r4, r4, r5, lsr #7
 8004c8e:	1899      	adds	r1, r3, r2
 8004c90:	4809      	ldr	r0, [pc, #36]	; (8004cb8 <RTC_WeekDayNum+0xa4>)
 8004c92:	eba4 1255 	sub.w	r2, r4, r5, lsr #5
 8004c96:	440a      	add	r2, r1
 8004c98:	fba2 0100 	umull	r0, r1, r2, r0
 8004c9c:	1a50      	subs	r0, r2, r1
 8004c9e:	eb01 0050 	add.w	r0, r1, r0, lsr #1
 8004ca2:	0880      	lsrs	r0, r0, #2
 8004ca4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004ca8:	1a10      	subs	r0, r2, r0
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + (year/4) - (year/100) + (year/400) - 2 ) % 7; 
  }

  return (uint8_t)weekday;
}
 8004caa:	b2c0      	uxtb	r0, r0
 8004cac:	bd30      	pop	{r4, r5, pc}
 8004cae:	bf00      	nop
 8004cb0:	38e38e39 	.word	0x38e38e39
 8004cb4:	51eb851f 	.word	0x51eb851f
 8004cb8:	24924925 	.word	0x24924925

08004cbc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004cbc:	b538      	push	{r3, r4, r5, lr}
 8004cbe:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  
  tickstart = HAL_GetTick();
 8004cc0:	f7fb fb7a 	bl	80003b8 <HAL_GetTick>
 8004cc4:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004cc6:	e005      	b.n	8004cd4 <RTC_EnterInitMode+0x18>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004cc8:	f7fb fb76 	bl	80003b8 <HAL_GetTick>
 8004ccc:	1b40      	subs	r0, r0, r5
 8004cce:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004cd2:	d809      	bhi.n	8004ce8 <RTC_EnterInitMode+0x2c>
{
  uint32_t tickstart = 0;
  
  tickstart = HAL_GetTick();
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	0692      	lsls	r2, r2, #26
 8004cda:	d5f5      	bpl.n	8004cc8 <RTC_EnterInitMode+0xc>
      return HAL_TIMEOUT;
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cdc:	685a      	ldr	r2, [r3, #4]
  
  
  return HAL_OK;  
 8004cde:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ce0:	f042 0210 	orr.w	r2, r2, #16
 8004ce4:	605a      	str	r2, [r3, #4]
  
  
  return HAL_OK;  
 8004ce6:	bd38      	pop	{r3, r4, r5, pc}
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
    {       
      return HAL_TIMEOUT;
 8004ce8:	2003      	movs	r0, #3
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
  
  
  return HAL_OK;  
}
 8004cea:	bd38      	pop	{r3, r4, r5, pc}

08004cec <RTC_ExitInitMode>:
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cec:	6802      	ldr	r2, [r0, #0]
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 8004cee:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cf0:	6853      	ldr	r3, [r2, #4]
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 8004cf2:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cf4:	f023 0310 	bic.w	r3, r3, #16
 8004cf8:	6053      	str	r3, [r2, #4]
  
  tickstart = HAL_GetTick();
 8004cfa:	f7fb fb5d 	bl	80003b8 <HAL_GetTick>
 8004cfe:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004d00:	e005      	b.n	8004d0e <RTC_ExitInitMode+0x22>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004d02:	f7fb fb59 	bl	80003b8 <HAL_GetTick>
 8004d06:	1b40      	subs	r0, r0, r5
 8004d08:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004d0c:	d805      	bhi.n	8004d1a <RTC_ExitInitMode+0x2e>
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
  
  tickstart = HAL_GetTick();
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	069b      	lsls	r3, r3, #26
 8004d14:	d5f5      	bpl.n	8004d02 <RTC_ExitInitMode+0x16>
    {       
      return HAL_TIMEOUT;
    } 
  }
  
  return HAL_OK;  
 8004d16:	2000      	movs	r0, #0
 8004d18:	bd38      	pop	{r3, r4, r5, pc}
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
    {       
      return HAL_TIMEOUT;
 8004d1a:	2003      	movs	r0, #3
    } 
  }
  
  return HAL_OK;  
}
 8004d1c:	bd38      	pop	{r3, r4, r5, pc}
 8004d1e:	bf00      	nop

08004d20 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef* hrtc, uint32_t TimeCounter)
{
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	460c      	mov	r4, r1
 8004d24:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d26:	f7ff ffc9 	bl	8004cbc <RTC_EnterInitMode>
 8004d2a:	b108      	cbz	r0, 8004d30 <RTC_WriteTimeCounter+0x10>
  {
    status = HAL_ERROR;
 8004d2c:	2001      	movs	r0, #1
      status = HAL_ERROR;
    }
  }

  return status;
}
 8004d2e:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
  } 
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16));
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	0c22      	lsrs	r2, r4, #16
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004d34:	b2a4      	uxth	r4, r4
    status = HAL_ERROR;
  } 
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16));
 8004d36:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
    
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8004d38:	4628      	mov	r0, r5
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16));
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004d3a:	61dc      	str	r4, [r3, #28]
    
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8004d3c:	f7ff ffd6 	bl	8004cec <RTC_ExitInitMode>
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
  {
    status = HAL_ERROR;
 8004d40:	3000      	adds	r0, #0
 8004d42:	bf18      	it	ne
 8004d44:	2001      	movne	r0, #1
 8004d46:	bd38      	pop	{r3, r4, r5, pc}

08004d48 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef* hrtc, uint32_t AlarmCounter)
{
 8004d48:	b538      	push	{r3, r4, r5, lr}
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d4e:	f7ff ffb5 	bl	8004cbc <RTC_EnterInitMode>
 8004d52:	b108      	cbz	r0, 8004d58 <RTC_WriteAlarmCounter+0x10>
  {
    status = HAL_ERROR;
 8004d54:	2001      	movs	r0, #1
      status = HAL_ERROR;
    }
  }

  return status;
}
 8004d56:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
  } 
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16));
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	0c22      	lsrs	r2, r4, #16
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004d5c:	b2a4      	uxth	r4, r4
    status = HAL_ERROR;
  } 
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16));
 8004d5e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
    
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8004d60:	4628      	mov	r0, r5
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16));
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004d62:	625c      	str	r4, [r3, #36]	; 0x24
    
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8004d64:	f7ff ffc2 	bl	8004cec <RTC_ExitInitMode>
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
  {
    status = HAL_ERROR;
 8004d68:	3000      	adds	r0, #0
 8004d6a:	bf18      	it	ne
 8004d6c:	2001      	movne	r0, #1
 8004d6e:	bd38      	pop	{r3, r4, r5, pc}

08004d70 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d70:	b570      	push	{r4, r5, r6, lr}
  uint32_t counter_time = 0, counter_alarm = 0;
  
  /* Check input parameters */
  if((hrtc == NULL) || (sTime == NULL))
 8004d72:	2800      	cmp	r0, #0
 8004d74:	d06b      	beq.n	8004e4e <HAL_RTC_SetTime+0xde>
 8004d76:	2900      	cmp	r1, #0
 8004d78:	d069      	beq.n	8004e4e <HAL_RTC_SetTime+0xde>
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8004d7a:	7c03      	ldrb	r3, [r0, #16]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d033      	beq.n	8004de8 <HAL_RTC_SetTime+0x78>
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d80:	2302      	movs	r3, #2
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8004d82:	2401      	movs	r4, #1
 8004d84:	7404      	strb	r4, [r0, #16]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d86:	7443      	strb	r3, [r0, #17]
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600) + \
 8004d88:	784b      	ldrb	r3, [r1, #1]
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
  
  hrtc->State = HAL_RTC_STATE_BUSY;
  
  if(Format == RTC_FORMAT_BIN)
 8004d8a:	bb82      	cbnz	r2, 8004dee <HAL_RTC_SetTime+0x7e>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600) + \
 8004d8c:	780a      	ldrb	r2, [r1, #0]
 8004d8e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8004d92:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	fb04 3302 	mla	r3, r4, r2, r3
 8004d9c:	788c      	ldrb	r4, [r1, #2]
 8004d9e:	4606      	mov	r6, r0
 8004da0:	441c      	add	r4, r3
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60) + \
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004da2:	4621      	mov	r1, r4
 8004da4:	f7ff ffbc 	bl	8004d20 <RTC_WriteTimeCounter>
 8004da8:	4605      	mov	r5, r0
 8004daa:	2800      	cmp	r0, #0
 8004dac:	d148      	bne.n	8004e40 <HAL_RTC_SetTime+0xd0>
    return HAL_ERROR;
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004dae:	6833      	ldr	r3, [r6, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	f022 0205 	bic.w	r2, r2, #5
 8004db6:	605a      	str	r2, [r3, #4]
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0, low = 0;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004db8:	6a19      	ldr	r1, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16 ) | low);
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    
    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004dc2:	1c4b      	adds	r3, r1, #1
 8004dc4:	d00a      	beq.n	8004ddc <HAL_RTC_SetTime+0x6c>
    {
      if(counter_alarm < counter_time)
 8004dc6:	428c      	cmp	r4, r1
 8004dc8:	d908      	bls.n	8004ddc <HAL_RTC_SetTime+0x6c>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24 * 3600);
        
        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004dca:	f501 31a8 	add.w	r1, r1, #86016	; 0x15000
 8004dce:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	f7ff ffb8 	bl	8004d48 <RTC_WriteAlarmCounter>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	d13b      	bne.n	8004e54 <HAL_RTC_SetTime+0xe4>
          return HAL_ERROR;
        }
      }
    }
    
    hrtc->State = HAL_RTC_STATE_READY;
 8004ddc:	2201      	movs	r2, #1
  
   __HAL_UNLOCK(hrtc); 
 8004dde:	2300      	movs	r3, #0
          return HAL_ERROR;
        }
      }
    }
    
    hrtc->State = HAL_RTC_STATE_READY;
 8004de0:	7472      	strb	r2, [r6, #17]
  
   __HAL_UNLOCK(hrtc); 
 8004de2:	7433      	strb	r3, [r6, #16]
     
   return HAL_OK;
  }
}
 8004de4:	4628      	mov	r0, r5
 8004de6:	bd70      	pop	{r4, r5, r6, pc}
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8004de8:	2502      	movs	r5, #2
  
   __HAL_UNLOCK(hrtc); 
     
   return HAL_OK;
  }
}
 8004dea:	4628      	mov	r0, r5
 8004dec:	bd70      	pop	{r4, r5, r6, pc}
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600) + \
 8004dee:	780a      	ldrb	r2, [r1, #0]
 8004df0:	091c      	lsrs	r4, r3, #4
 8004df2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8004dfe:	0913      	lsrs	r3, r2, #4
 8004e00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004e04:	b2e4      	uxtb	r4, r4
 8004e06:	f002 020f 	and.w	r2, r2, #15
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60) + \
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
 8004e0a:	7889      	ldrb	r1, [r1, #2]
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600) + \
 8004e0c:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8004e10:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	00a3      	lsls	r3, r4, #2
 8004e18:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 8004e1c:	fb04 3302 	mla	r3, r4, r2, r3
 8004e20:	090c      	lsrs	r4, r1, #4
 8004e22:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004e26:	f001 010f 	and.w	r1, r1, #15
 8004e2a:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 8004e2e:	b2e4      	uxtb	r4, r4
 8004e30:	441c      	add	r4, r3
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60) + \
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004e32:	4621      	mov	r1, r4
 8004e34:	4606      	mov	r6, r0
 8004e36:	f7ff ff73 	bl	8004d20 <RTC_WriteTimeCounter>
 8004e3a:	4605      	mov	r5, r0
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d0b6      	beq.n	8004dae <HAL_RTC_SetTime+0x3e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004e40:	2204      	movs	r2, #4
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8004e42:	2300      	movs	r3, #0
    
    return HAL_ERROR;
 8004e44:	2501      	movs	r5, #1

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004e46:	7472      	strb	r2, [r6, #17]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8004e48:	7433      	strb	r3, [r6, #16]
  
   __HAL_UNLOCK(hrtc); 
     
   return HAL_OK;
  }
}
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t counter_time = 0, counter_alarm = 0;
  
  /* Check input parameters */
  if((hrtc == NULL) || (sTime == NULL))
  {
     return HAL_ERROR;
 8004e4e:	2501      	movs	r5, #1
  
   __HAL_UNLOCK(hrtc); 
     
   return HAL_OK;
  }
}
 8004e50:	4628      	mov	r0, r5
 8004e52:	bd70      	pop	{r4, r5, r6, pc}
        
        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004e54:	2304      	movs	r3, #4
          
          /* Process Unlocked */ 
          __HAL_UNLOCK(hrtc);
 8004e56:	7435      	strb	r5, [r6, #16]
        
        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004e58:	7473      	strb	r3, [r6, #17]
          
          /* Process Unlocked */ 
          __HAL_UNLOCK(hrtc);
          
          return HAL_ERROR;
 8004e5a:	2501      	movs	r5, #1
 8004e5c:	e7c5      	b.n	8004dea <HAL_RTC_SetTime+0x7a>
 8004e5e:	bf00      	nop

08004e60 <HAL_RTC_SetDate>:
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
  uint32_t counter_time = 0, counter_alarm = 0, hours = 0;
  
  /* Check input parameters */
  if((hrtc == NULL) || (sDate == NULL))
 8004e60:	2800      	cmp	r0, #0
 8004e62:	d04d      	beq.n	8004f00 <HAL_RTC_SetDate+0xa0>
 8004e64:	2900      	cmp	r1, #0
 8004e66:	d04b      	beq.n	8004f00 <HAL_RTC_SetDate+0xa0>
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 8004e68:	7c03      	ldrb	r3, [r0, #16]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d027      	beq.n	8004ebe <HAL_RTC_SetDate+0x5e>
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e6e:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
  
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8004e70:	2302      	movs	r3, #2
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 8004e72:	2401      	movs	r4, #1
 8004e74:	7404      	strb	r4, [r0, #16]
  
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8004e76:	7443      	strb	r3, [r0, #17]
  
  if(Format == RTC_FORMAT_BIN)
 8004e78:	bb1a      	cbnz	r2, 8004ec2 <HAL_RTC_SetDate+0x62>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004e7a:	78cb      	ldrb	r3, [r1, #3]
 8004e7c:	73c3      	strb	r3, [r0, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004e7e:	784e      	ldrb	r6, [r1, #1]
 8004e80:	7346      	strb	r6, [r0, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004e82:	788a      	ldrb	r2, [r1, #2]
 8004e84:	7382      	strb	r2, [r0, #14]
 8004e86:	4604      	mov	r4, r0
 8004e88:	460d      	mov	r5, r1
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	4631      	mov	r1, r6
 8004e8e:	f7ff fec1 	bl	8004c14 <RTC_WeekDayNum>
 8004e92:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004e94:	7028      	strb	r0, [r5, #0]
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0, high2 = 0, low = 0;
  uint32_t timecounter = 0;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004e96:	6821      	ldr	r1, [r4, #0]
 8004e98:	698b      	ldr	r3, [r1, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004e9a:	69ca      	ldr	r2, [r1, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004e9c:	6988      	ldr	r0, [r1, #24]

  if (high1 != high2)
 8004e9e:	b29e      	uxth	r6, r3
 8004ea0:	b285      	uxth	r5, r0
 8004ea2:	42ae      	cmp	r6, r5
 8004ea4:	d053      	beq.n	8004f4e <HAL_RTC_SetDate+0xee>
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16 ) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004ea6:	69cb      	ldr	r3, [r1, #28]
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600;
  if (hours > 24)
 8004eae:	4a2d      	ldr	r2, [pc, #180]	; (8004f64 <HAL_RTC_SetDate+0x104>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d827      	bhi.n	8004f04 <HAL_RTC_SetDate+0xa4>
    }
    

  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004eb4:	2301      	movs	r3, #1
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 8004eb6:	2000      	movs	r0, #0
    }
    

  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004eb8:	7463      	strb	r3, [r4, #17]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 8004eba:	7420      	strb	r0, [r4, #16]
  
  return HAL_OK;    
 8004ebc:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 8004ebe:	2002      	movs	r0, #2
 8004ec0:	4770      	bx	lr
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
    
    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004ec2:	78ca      	ldrb	r2, [r1, #3]
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  return (tmp + (Value & (uint8_t)0x0F));
 8004ec4:	0913      	lsrs	r3, r2, #4
 8004ec6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004eca:	f002 020f 	and.w	r2, r2, #15
 8004ece:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8004ed2:	b2db      	uxtb	r3, r3
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
    
    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004ed4:	73c3      	strb	r3, [r0, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004ed6:	784a      	ldrb	r2, [r1, #1]
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  return (tmp + (Value & (uint8_t)0x0F));
 8004ed8:	0916      	lsrs	r6, r2, #4
 8004eda:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8004ede:	f002 020f 	and.w	r2, r2, #15
 8004ee2:	eb02 0646 	add.w	r6, r2, r6, lsl #1
 8004ee6:	b2f6      	uxtb	r6, r6
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
    
    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004ee8:	7346      	strb	r6, [r0, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004eea:	788c      	ldrb	r4, [r1, #2]
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  return (tmp + (Value & (uint8_t)0x0F));
 8004eec:	0922      	lsrs	r2, r4, #4
 8004eee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004ef2:	f004 040f 	and.w	r4, r4, #15
 8004ef6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8004efa:	b2d2      	uxtb	r2, r2
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
    
    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004efc:	7382      	strb	r2, [r0, #14]
 8004efe:	e7c2      	b.n	8004e86 <HAL_RTC_SetDate+0x26>
  uint32_t counter_time = 0, counter_alarm = 0, hours = 0;
  
  /* Check input parameters */
  if((hrtc == NULL) || (sDate == NULL))
  {
     return HAL_ERROR;
 8004f00:	2001      	movs	r0, #1
 8004f02:	4770      	bx	lr
  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600;
  if (hours > 24)
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24) * 24 * 3600);
 8004f04:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <HAL_RTC_SetDate+0x108>)
 8004f06:	4d19      	ldr	r5, [pc, #100]	; (8004f6c <HAL_RTC_SetDate+0x10c>)
 8004f08:	fba2 1203 	umull	r1, r2, r2, r3
 8004f0c:	0c12      	lsrs	r2, r2, #16
 8004f0e:	fb05 3512 	mls	r5, r5, r2, r3
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004f12:	4620      	mov	r0, r4
 8004f14:	4629      	mov	r1, r5
 8004f16:	f7ff ff03 	bl	8004d20 <RTC_WriteTimeCounter>
 8004f1a:	4606      	mov	r6, r0
 8004f1c:	b9d8      	cbnz	r0, 8004f56 <HAL_RTC_SetDate+0xf6>
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0, low = 0;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	6a19      	ldr	r1, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16 ) | low);
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004f2a:	1c4b      	adds	r3, r1, #1
 8004f2c:	d0c2      	beq.n	8004eb4 <HAL_RTC_SetDate+0x54>
    {
      if(counter_alarm < counter_time)
 8004f2e:	428d      	cmp	r5, r1
 8004f30:	d9c0      	bls.n	8004eb4 <HAL_RTC_SetDate+0x54>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24 * 3600);
        
        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004f32:	f501 31a8 	add.w	r1, r1, #86016	; 0x15000
 8004f36:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	f7ff ff04 	bl	8004d48 <RTC_WriteAlarmCounter>
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d0b7      	beq.n	8004eb4 <HAL_RTC_SetDate+0x54>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004f44:	2304      	movs	r3, #4
          
          /* Process Unlocked */ 
          __HAL_UNLOCK(hrtc);
 8004f46:	7426      	strb	r6, [r4, #16]
        
        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004f48:	7463      	strb	r3, [r4, #17]
          
          /* Process Unlocked */ 
          __HAL_UNLOCK(hrtc);
          
          return HAL_ERROR;
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	bd70      	pop	{r4, r5, r6, pc}
    timecounter = (((uint32_t) high2 << 16 ) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16 ) | low);
 8004f4e:	b292      	uxth	r2, r2
 8004f50:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8004f54:	e7ab      	b.n	8004eae <HAL_RTC_SetDate+0x4e>
    counter_time -= ((hours / 24) * 24 * 3600);
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004f56:	2204      	movs	r2, #4
      
      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 8004f58:	2300      	movs	r3, #0
    counter_time -= ((hours / 24) * 24 * 3600);
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004f5a:	7462      	strb	r2, [r4, #17]
      
      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 8004f5c:	7423      	strb	r3, [r4, #16]
      
      return HAL_ERROR;
 8004f5e:	2001      	movs	r0, #1
 8004f60:	bd70      	pop	{r4, r5, r6, pc}
 8004f62:	bf00      	nop
 8004f64:	00015f8f 	.word	0x00015f8f
 8004f68:	c22e4507 	.word	0xc22e4507
 8004f6c:	00015180 	.word	0x00015180

08004f70 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;
  
  /* Check input parameters */
  if(hrtc == NULL)
 8004f70:	b1c0      	cbz	r0, 8004fa4 <HAL_RTC_WaitForSynchro+0x34>
  {
     return HAL_ERROR;
  }
  
  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004f72:	6802      	ldr	r2, [r0, #0]
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004f74:	b538      	push	{r3, r4, r5, lr}
  {
     return HAL_ERROR;
  }
  
  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004f76:	6853      	ldr	r3, [r2, #4]
 8004f78:	4604      	mov	r4, r0
 8004f7a:	f023 0308 	bic.w	r3, r3, #8
 8004f7e:	6053      	str	r3, [r2, #4]
  
  tickstart = HAL_GetTick();
 8004f80:	f7fb fa1a 	bl	80003b8 <HAL_GetTick>
 8004f84:	4605      	mov	r5, r0
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004f86:	e005      	b.n	8004f94 <HAL_RTC_WaitForSynchro+0x24>
  {
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8004f88:	f7fb fa16 	bl	80003b8 <HAL_GetTick>
 8004f8c:	1b40      	subs	r0, r0, r5
 8004f8e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004f92:	d805      	bhi.n	8004fa0 <HAL_RTC_WaitForSynchro+0x30>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
  
  tickstart = HAL_GetTick();
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	071b      	lsls	r3, r3, #28
 8004f9a:	d5f5      	bpl.n	8004f88 <HAL_RTC_WaitForSynchro+0x18>
    {       
      return HAL_TIMEOUT;
    } 
  }
  
  return HAL_OK;
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	bd38      	pop	{r3, r4, r5, pc}
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
  {
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
    {       
      return HAL_TIMEOUT;
 8004fa0:	2003      	movs	r0, #3
    } 
  }
  
  return HAL_OK;
}
 8004fa2:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t tickstart = 0;
  
  /* Check input parameters */
  if(hrtc == NULL)
  {
     return HAL_ERROR;
 8004fa4:	2001      	movs	r0, #1
      return HAL_TIMEOUT;
    } 
  }
  
  return HAL_OK;
}
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_RTC_Init>:
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  uint32_t prescaler = 0;
  /* Check input parameters */
  if(hrtc == NULL)
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	d04d      	beq.n	8005048 <HAL_RTC_Init+0xa0>
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004fac:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004fae:	7c43      	ldrb	r3, [r0, #17]
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d03a      	beq.n	8005030 <HAL_RTC_Init+0x88>
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8004fba:	2302      	movs	r3, #2
 8004fbc:	7463      	strb	r3, [r4, #17]
       
  /* Waiting for synchro */
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	f7ff ffd6 	bl	8004f70 <HAL_RTC_WaitForSynchro>
 8004fc4:	b118      	cbz	r0, 8004fce <HAL_RTC_Init+0x26>
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
    {       
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004fc6:	2304      	movs	r3, #4
 8004fc8:	7463      	strb	r3, [r4, #17]
      
      return HAL_ERROR;
 8004fca:	2001      	movs	r0, #1
 8004fcc:	bd38      	pop	{r3, r4, r5, pc}
    
    return HAL_ERROR;
  } 

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004fce:	4620      	mov	r0, r4
 8004fd0:	f7ff fe74 	bl	8004cbc <RTC_EnterInitMode>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	d1f6      	bne.n	8004fc6 <HAL_RTC_Init+0x1e>
    return HAL_ERROR;
  } 
  else
  { 
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004fd8:	6823      	ldr	r3, [r4, #0]
    
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004fda:	68a2      	ldr	r2, [r4, #8]
    return HAL_ERROR;
  } 
  else
  { 
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004fdc:	6859      	ldr	r1, [r3, #4]
 8004fde:	f021 0107 	bic.w	r1, r1, #7
 8004fe2:	6059      	str	r1, [r3, #4]
    
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004fe4:	b122      	cbz	r2, 8004ff0 <HAL_RTC_Init+0x48>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004fe6:	4819      	ldr	r0, [pc, #100]	; (800504c <HAL_RTC_Init+0xa4>)
 8004fe8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004fea:	f021 0101 	bic.w	r1, r1, #1
 8004fee:	6301      	str	r1, [r0, #48]	; 0x30
    }
    
    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004ff0:	4816      	ldr	r0, [pc, #88]	; (800504c <HAL_RTC_Init+0xa4>)
 8004ff2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004ff4:	f421 7160 	bic.w	r1, r1, #896	; 0x380
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	62c2      	str	r2, [r0, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004ffc:	6860      	ldr	r0, [r4, #4]
 8004ffe:	1c42      	adds	r2, r0, #1
 8005000:	d01a      	beq.n	8005038 <HAL_RTC_Init+0x90>
        prescaler = prescaler - 1;
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16));
 8005002:	6899      	ldr	r1, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8005004:	b285      	uxth	r5, r0
        prescaler = prescaler - 1;
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16));
 8005006:	f021 010f 	bic.w	r1, r1, #15
 800500a:	ea41 4010 	orr.w	r0, r1, r0, lsr #16
 800500e:	6098      	str	r0, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8005010:	68da      	ldr	r2, [r3, #12]
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8005012:	4620      	mov	r0, r4
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16));
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8005014:	0c12      	lsrs	r2, r2, #16
 8005016:	0412      	lsls	r2, r2, #16
 8005018:	432a      	orrs	r2, r5
 800501a:	60da      	str	r2, [r3, #12]
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 800501c:	f7ff fe66 	bl	8004cec <RTC_ExitInitMode>
 8005020:	2800      	cmp	r0, #0
 8005022:	d1d0      	bne.n	8004fc6 <HAL_RTC_Init+0x1e>
      return HAL_ERROR;
    }
    
    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00;
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005024:	2301      	movs	r3, #1
      
      return HAL_ERROR;
    }
    
    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00;
 8005026:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005028:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01;
 800502a:	73a3      	strb	r3, [r4, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800502c:	7463      	strb	r3, [r4, #17]
    
    return HAL_OK;
 800502e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005030:	7402      	strb	r2, [r0, #16]
    
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005032:	f7fe fff5 	bl	8004020 <HAL_RTC_MspInit>
 8005036:	e7c0      	b.n	8004fba <HAL_RTC_Init+0x12>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005038:	2001      	movs	r0, #1
 800503a:	f7fb f8f3 	bl	8000224 <HAL_RCCEx_GetPeriphCLKFreq>

      /* Check that RTC clock is enabled*/
      if (prescaler == 0)
 800503e:	2800      	cmp	r0, #0
 8005040:	d0c1      	beq.n	8004fc6 <HAL_RTC_Init+0x1e>
 8005042:	6823      	ldr	r3, [r4, #0]
        return HAL_ERROR;
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1;
 8005044:	3801      	subs	r0, #1
 8005046:	e7dc      	b.n	8005002 <HAL_RTC_Init+0x5a>
{
  uint32_t prescaler = 0;
  /* Check input parameters */
  if(hrtc == NULL)
  {
     return HAL_ERROR;
 8005048:	2001      	movs	r0, #1
 800504a:	4770      	bx	lr
 800504c:	40006c00 	.word	0x40006c00

08005050 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005050:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005052:	688a      	ldr	r2, [r1, #8]
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005054:	f023 0301 	bic.w	r3, r3, #1
 8005058:	6203      	str	r3, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800505a:	b4f0      	push	{r4, r5, r6, r7}

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505c:	6a03      	ldr	r3, [r0, #32]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800505e:	4e11      	ldr	r6, [pc, #68]	; (80050a4 <TIM_OC1_SetConfig+0x54>)
  TIMx->CCER &= ~TIM_CCER_CC1E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005060:	6847      	ldr	r7, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005062:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005064:	680c      	ldr	r4, [r1, #0]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005066:	f023 0302 	bic.w	r3, r3, #2
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800506a:	f025 0573 	bic.w	r5, r5, #115	; 0x73
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800506e:	42b0      	cmp	r0, r6
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005070:	ea43 0302 	orr.w	r3, r3, r2

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005074:	ea44 0405 	orr.w	r4, r4, r5
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005078:	d006      	beq.n	8005088 <TIM_OC1_SetConfig+0x38>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800507a:	684a      	ldr	r2, [r1, #4]
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800507c:	6047      	str	r7, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800507e:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005080:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005082:	bcf0      	pop	{r4, r5, r6, r7}

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005084:	6203      	str	r3, [r0, #32]
}
 8005086:	4770      	bx	lr
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005088:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800508a:	694e      	ldr	r6, [r1, #20]
 800508c:	698a      	ldr	r2, [r1, #24]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800508e:	f023 0308 	bic.w	r3, r3, #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005092:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005096:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005098:	4332      	orrs	r2, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800509a:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800509e:	4317      	orrs	r7, r2
 80050a0:	e7eb      	b.n	800507a <TIM_OC1_SetConfig+0x2a>
 80050a2:	bf00      	nop
 80050a4:	40012c00 	.word	0x40012c00

080050a8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050a8:	6a02      	ldr	r2, [r0, #32]
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050aa:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 80050b0:	688e      	ldr	r6, [r1, #8]
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050b2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b4:	6a03      	ldr	r3, [r0, #32]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050b6:	4d12      	ldr	r5, [pc, #72]	; (8005100 <TIM_OC3_SetConfig+0x58>)
  TIMx->CCER &= ~TIM_CCER_CC3E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b8:	6847      	ldr	r7, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ba:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050bc:	680a      	ldr	r2, [r1, #0]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050c2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050c6:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 80050c8:	ea43 2306 	orr.w	r3, r3, r6, lsl #8

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050cc:	ea42 0204 	orr.w	r2, r2, r4
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050d0:	d006      	beq.n	80050e0 <TIM_OC3_SetConfig+0x38>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050d2:	6849      	ldr	r1, [r1, #4]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d4:	6047      	str	r7, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050d6:	61c2      	str	r2, [r0, #28]
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80050d8:	bcf0      	pop	{r4, r5, r6, r7}

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050da:	63c1      	str	r1, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050dc:	6203      	str	r3, [r0, #32]
}
 80050de:	4770      	bx	lr
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80050e0:	68ce      	ldr	r6, [r1, #12]

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80050e2:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050e4:	f427 5740 	bic.w	r7, r7, #12288	; 0x3000
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80050ec:	698c      	ldr	r4, [r1, #24]
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80050ee:	ea43 2306 	orr.w	r3, r3, r6, lsl #8

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80050f2:	ea47 1505 	orr.w	r5, r7, r5, lsl #4
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80050fa:	ea45 1704 	orr.w	r7, r5, r4, lsl #4
 80050fe:	e7e8      	b.n	80050d2 <TIM_OC3_SetConfig+0x2a>
 8005100:	40012c00 	.word	0x40012c00

08005104 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005104:	6a02      	ldr	r2, [r0, #32]
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005106:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005108:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 800510c:	688f      	ldr	r7, [r1, #8]
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800510e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005110:	6a03      	ldr	r3, [r0, #32]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005112:	4e0d      	ldr	r6, [pc, #52]	; (8005148 <TIM_OC4_SetConfig+0x44>)
  TIMx->CCER &= ~TIM_CCER_CC4E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005114:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005116:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8005118:	680c      	ldr	r4, [r1, #0]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800511a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800511e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005122:	42b0      	cmp	r0, r6
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8005124:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8005128:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800512c:	d006      	beq.n	800513c <TIM_OC4_SetConfig+0x38>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800512e:	6849      	ldr	r1, [r1, #4]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005130:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005132:	61c2      	str	r2, [r0, #28]
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005134:	bcf0      	pop	{r4, r5, r6, r7}

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005136:	6401      	str	r1, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005138:	6203      	str	r3, [r0, #32]
}
 800513a:	4770      	bx	lr
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800513c:	694c      	ldr	r4, [r1, #20]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800513e:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8005142:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
 8005146:	e7f2      	b.n	800512e <TIM_OC4_SetConfig+0x2a>
 8005148:	40012c00 	.word	0x40012c00

0800514c <HAL_TIM_PWM_MspInit>:
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop

08005150 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005150:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8005154:	2b01      	cmp	r3, #1
 8005156:	d040      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x8a>

  htim->State = HAL_TIM_STATE_BUSY;
 8005158:	2202      	movs	r2, #2

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800515a:	6803      	ldr	r3, [r0, #0]
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 800515c:	b470      	push	{r4, r5, r6}
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);

  htim->State = HAL_TIM_STATE_BUSY;
 800515e:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005162:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8005164:	680c      	ldr	r4, [r1, #0]
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005166:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800516a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 800516e:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8005170:	2c40      	cmp	r4, #64	; 0x40
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005172:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
 8005176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005178:	d073      	beq.n	8005262 <HAL_TIM_ConfigClockSource+0x112>
 800517a:	d918      	bls.n	80051ae <HAL_TIM_ConfigClockSource+0x5e>
 800517c:	2c70      	cmp	r4, #112	; 0x70
 800517e:	d060      	beq.n	8005242 <HAL_TIM_ConfigClockSource+0xf2>
 8005180:	d92d      	bls.n	80051de <HAL_TIM_ConfigClockSource+0x8e>
 8005182:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8005186:	d057      	beq.n	8005238 <HAL_TIM_ConfigClockSource+0xe8>
 8005188:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 800518c:	d11c      	bne.n	80051c8 <HAL_TIM_ConfigClockSource+0x78>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 800518e:	689c      	ldr	r4, [r3, #8]
 8005190:	688d      	ldr	r5, [r1, #8]
 8005192:	684a      	ldr	r2, [r1, #4]
 8005194:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8005198:	68c9      	ldr	r1, [r1, #12]
 800519a:	432a      	orrs	r2, r5
 800519c:	4322      	orrs	r2, r4
 800519e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051a2:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051aa:	609a      	str	r2, [r3, #8]
    }
    break;
 80051ac:	e00c      	b.n	80051c8 <HAL_TIM_ConfigClockSource+0x78>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 80051ae:	2c10      	cmp	r4, #16
 80051b0:	d032      	beq.n	8005218 <HAL_TIM_ConfigClockSource+0xc8>
 80051b2:	d938      	bls.n	8005226 <HAL_TIM_ConfigClockSource+0xd6>
 80051b4:	2c20      	cmp	r4, #32
 80051b6:	d06c      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x142>
 80051b8:	2c30      	cmp	r4, #48	; 0x30
 80051ba:	d105      	bne.n	80051c8 <HAL_TIM_ConfigClockSource+0x78>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80051bc:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80051be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80051c2:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80051c6:	609a      	str	r2, [r3, #8]
  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80051c8:	2300      	movs	r3, #0
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 80051ca:	2201      	movs	r2, #1
 80051cc:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80051d0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
}
 80051d4:	bc70      	pop	{r4, r5, r6}
  }
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
 80051d6:	4618      	mov	r0, r3
}
 80051d8:	4770      	bx	lr
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051da:	2002      	movs	r0, #2
 80051dc:	4770      	bx	lr
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 80051de:	2c50      	cmp	r4, #80	; 0x50
 80051e0:	d05e      	beq.n	80052a0 <HAL_TIM_ConfigClockSource+0x150>
 80051e2:	2c60      	cmp	r4, #96	; 0x60
 80051e4:	d1f0      	bne.n	80051c8 <HAL_TIM_ConfigClockSource+0x78>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051e6:	6a1c      	ldr	r4, [r3, #32]

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051e8:	684d      	ldr	r5, [r1, #4]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ea:	f024 0410 	bic.w	r4, r4, #16

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051ee:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051f0:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051f2:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80051f4:	6a1a      	ldr	r2, [r3, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051f6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 80051fe:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12);
 8005202:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005206:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8005208:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800520a:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800520c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8005210:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8005214:	609a      	str	r2, [r3, #8]
 8005216:	e7d7      	b.n	80051c8 <HAL_TIM_ConfigClockSource+0x78>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8005218:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800521a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800521e:	f042 0217 	orr.w	r2, r2, #23
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8005222:	609a      	str	r2, [r3, #8]
 8005224:	e7d0      	b.n	80051c8 <HAL_TIM_ConfigClockSource+0x78>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8005226:	2c00      	cmp	r4, #0
 8005228:	d1ce      	bne.n	80051c8 <HAL_TIM_ConfigClockSource+0x78>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800522a:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800522c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8005230:	f042 0207 	orr.w	r2, r2, #7
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8005234:	609a      	str	r2, [r3, #8]
 8005236:	e7c7      	b.n	80051c8 <HAL_TIM_ConfigClockSource+0x78>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	f022 0207 	bic.w	r2, r2, #7
 800523e:	609a      	str	r2, [r3, #8]
    }
    break;
 8005240:	e7c2      	b.n	80051c8 <HAL_TIM_ConfigClockSource+0x78>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8005242:	689c      	ldr	r4, [r3, #8]
 8005244:	688d      	ldr	r5, [r1, #8]
 8005246:	684a      	ldr	r2, [r1, #4]
 8005248:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800524c:	68c9      	ldr	r1, [r1, #12]
 800524e:	432a      	orrs	r2, r5
 8005250:	4322      	orrs	r2, r4
 8005252:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005256:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8005258:	689a      	ldr	r2, [r3, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800525a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800525e:	609a      	str	r2, [r3, #8]
    }
    break;
 8005260:	e7b2      	b.n	80051c8 <HAL_TIM_ConfigClockSource+0x78>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005262:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005264:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005266:	684e      	ldr	r6, [r1, #4]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005268:	f024 0401 	bic.w	r4, r4, #1

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800526c:	68cd      	ldr	r5, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800526e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005270:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005272:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005276:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 800527a:	4332      	orrs	r2, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 800527c:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005280:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8005282:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8005284:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8005286:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800528a:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800528e:	609a      	str	r2, [r3, #8]
 8005290:	e79a      	b.n	80051c8 <HAL_TIM_ConfigClockSource+0x78>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8005292:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8005294:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8005298:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800529c:	609a      	str	r2, [r3, #8]
 800529e:	e793      	b.n	80051c8 <HAL_TIM_ConfigClockSource+0x78>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052a0:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a2:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a4:	684e      	ldr	r6, [r1, #4]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a6:	f024 0401 	bic.w	r4, r4, #1

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052aa:	68cd      	ldr	r5, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ac:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ae:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052b0:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052b4:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 80052b8:	4332      	orrs	r2, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 80052ba:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052be:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80052c0:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80052c2:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80052c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80052c8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80052cc:	609a      	str	r2, [r3, #8]
 80052ce:	e77b      	b.n	80051c8 <HAL_TIM_ConfigClockSource+0x78>

080052d0 <HAL_TIM_PeriodElapsedCallback>:
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop

080052d4 <HAL_TIM_OC_DelayElapsedCallback>:
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop

080052d8 <HAL_TIM_IC_CaptureCallback>:
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop

080052dc <HAL_TIM_PWM_PulseFinishedCallback>:
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop

080052e0 <HAL_TIM_TriggerCallback>:
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop

080052e4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052e4:	6803      	ldr	r3, [r0, #0]
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052e6:	b510      	push	{r4, lr}
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052e8:	691a      	ldr	r2, [r3, #16]
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052ea:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052ec:	0791      	lsls	r1, r2, #30
 80052ee:	d502      	bpl.n	80052f6 <HAL_TIM_IRQHandler+0x12>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	0792      	lsls	r2, r2, #30
 80052f4:	d462      	bmi.n	80053bc <HAL_TIM_IRQHandler+0xd8>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	0750      	lsls	r0, r2, #29
 80052fa:	d502      	bpl.n	8005302 <HAL_TIM_IRQHandler+0x1e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	0751      	lsls	r1, r2, #29
 8005300:	d449      	bmi.n	8005396 <HAL_TIM_IRQHandler+0xb2>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005302:	691a      	ldr	r2, [r3, #16]
 8005304:	0712      	lsls	r2, r2, #28
 8005306:	d502      	bpl.n	800530e <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	0710      	lsls	r0, r2, #28
 800530c:	d431      	bmi.n	8005372 <HAL_TIM_IRQHandler+0x8e>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800530e:	691a      	ldr	r2, [r3, #16]
 8005310:	06d2      	lsls	r2, r2, #27
 8005312:	d502      	bpl.n	800531a <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	06d0      	lsls	r0, r2, #27
 8005318:	d418      	bmi.n	800534c <HAL_TIM_IRQHandler+0x68>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800531a:	691a      	ldr	r2, [r3, #16]
 800531c:	07d1      	lsls	r1, r2, #31
 800531e:	d502      	bpl.n	8005326 <HAL_TIM_IRQHandler+0x42>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	07d2      	lsls	r2, r2, #31
 8005324:	d46b      	bmi.n	80053fe <HAL_TIM_IRQHandler+0x11a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
      HAL_TIM_PeriodElapsedCallback(htim);
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005326:	691a      	ldr	r2, [r3, #16]
 8005328:	0610      	lsls	r0, r2, #24
 800532a:	d502      	bpl.n	8005332 <HAL_TIM_IRQHandler+0x4e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	0611      	lsls	r1, r2, #24
 8005330:	d46d      	bmi.n	800540e <HAL_TIM_IRQHandler+0x12a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
      HAL_TIMEx_BreakCallback(htim);
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	0652      	lsls	r2, r2, #25
 8005336:	d502      	bpl.n	800533e <HAL_TIM_IRQHandler+0x5a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	0650      	lsls	r0, r2, #25
 800533c:	d457      	bmi.n	80053ee <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
      HAL_TIM_TriggerCallback(htim);
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800533e:	691a      	ldr	r2, [r3, #16]
 8005340:	0691      	lsls	r1, r2, #26
 8005342:	d502      	bpl.n	800534a <HAL_TIM_IRQHandler+0x66>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	0692      	lsls	r2, r2, #26
 8005348:	d449      	bmi.n	80053de <HAL_TIM_IRQHandler+0xfa>
 800534a:	bd10      	pop	{r4, pc}
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800534c:	f06f 0210 	mvn.w	r2, #16
 8005350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8005352:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005354:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8005356:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800535a:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800535c:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800535e:	d161      	bne.n	8005424 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_IC_CaptureCallback(htim);
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005360:	f7ff ffb8 	bl	80052d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005364:	4620      	mov	r0, r4
 8005366:	f7ff ffb9 	bl	80052dc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536a:	2200      	movs	r2, #0
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	7622      	strb	r2, [r4, #24]
 8005370:	e7d3      	b.n	800531a <HAL_TIM_IRQHandler+0x36>
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005372:	f06f 0208 	mvn.w	r2, #8
 8005376:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8005378:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800537a:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800537c:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800537e:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8005380:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8005382:	d155      	bne.n	8005430 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_IC_CaptureCallback(htim);
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005384:	f7ff ffa6 	bl	80052d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005388:	4620      	mov	r0, r4
 800538a:	f7ff ffa7 	bl	80052dc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538e:	2200      	movs	r2, #0
 8005390:	6823      	ldr	r3, [r4, #0]
 8005392:	7622      	strb	r2, [r4, #24]
 8005394:	e7bb      	b.n	800530e <HAL_TIM_IRQHandler+0x2a>
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005396:	f06f 0204 	mvn.w	r2, #4
 800539a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800539c:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800539e:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80053a0:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053a4:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80053a6:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80053a8:	d13f      	bne.n	800542a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053aa:	f7ff ff93 	bl	80052d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ae:	4620      	mov	r0, r4
 80053b0:	f7ff ff94 	bl	80052dc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b4:	2200      	movs	r2, #0
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	7622      	strb	r2, [r4, #24]
 80053ba:	e7a2      	b.n	8005302 <HAL_TIM_IRQHandler+0x1e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053bc:	f06f 0202 	mvn.w	r2, #2
 80053c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80053c2:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053c4:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80053c6:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053c8:	7602      	strb	r2, [r0, #24]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80053ca:	d128      	bne.n	800541e <HAL_TIM_IRQHandler+0x13a>
          HAL_TIM_IC_CaptureCallback(htim);
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053cc:	f7ff ff82 	bl	80052d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d0:	4620      	mov	r0, r4
 80053d2:	f7ff ff83 	bl	80052dc <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d6:	2200      	movs	r2, #0
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	7622      	strb	r2, [r4, #24]
 80053dc:	e78b      	b.n	80052f6 <HAL_TIM_IRQHandler+0x12>
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053de:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80053e2:	4620      	mov	r0, r4
    }
  }
}
 80053e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053e8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80053ea:	f000 bc63 	b.w	8005cb4 <HAL_TIMEx_CommutationCallback>
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053f2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80053f4:	4620      	mov	r0, r4
 80053f6:	f7ff ff73 	bl	80052e0 <HAL_TIM_TriggerCallback>
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	e79f      	b.n	800533e <HAL_TIM_IRQHandler+0x5a>
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053fe:	f06f 0201 	mvn.w	r2, #1
 8005402:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005404:	4620      	mov	r0, r4
 8005406:	f7ff ff63 	bl	80052d0 <HAL_TIM_PeriodElapsedCallback>
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	e78b      	b.n	8005326 <HAL_TIM_IRQHandler+0x42>
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800540e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005412:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005414:	4620      	mov	r0, r4
 8005416:	f000 fc4f 	bl	8005cb8 <HAL_TIMEx_BreakCallback>
 800541a:	6823      	ldr	r3, [r4, #0]
 800541c:	e789      	b.n	8005332 <HAL_TIM_IRQHandler+0x4e>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800541e:	f7ff ff5b 	bl	80052d8 <HAL_TIM_IC_CaptureCallback>
 8005422:	e7d8      	b.n	80053d6 <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8005424:	f7ff ff58 	bl	80052d8 <HAL_TIM_IC_CaptureCallback>
 8005428:	e79f      	b.n	800536a <HAL_TIM_IRQHandler+0x86>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800542a:	f7ff ff55 	bl	80052d8 <HAL_TIM_IC_CaptureCallback>
 800542e:	e7c1      	b.n	80053b4 <HAL_TIM_IRQHandler+0xd0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8005430:	f7ff ff52 	bl	80052d8 <HAL_TIM_IC_CaptureCallback>
 8005434:	e7ab      	b.n	800538e <HAL_TIM_IRQHandler+0xaa>
 8005436:	bf00      	nop

08005438 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005438:	4a1d      	ldr	r2, [pc, #116]	; (80054b0 <TIM_Base_SetConfig+0x78>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 800543a:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800543c:	4290      	cmp	r0, r2
 800543e:	d025      	beq.n	800548c <TIM_Base_SetConfig+0x54>
 8005440:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005444:	b410      	push	{r4}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005446:	d010      	beq.n	800546a <TIM_Base_SetConfig+0x32>
 8005448:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800544c:	4290      	cmp	r0, r2
 800544e:	d00c      	beq.n	800546a <TIM_Base_SetConfig+0x32>
 8005450:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005454:	4290      	cmp	r0, r2
 8005456:	d008      	beq.n	800546a <TIM_Base_SetConfig+0x32>
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005458:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800545a:	680a      	ldr	r2, [r1, #0]
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 800545c:	6003      	str	r3, [r0, #0]
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800545e:	2301      	movs	r3, #1
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005460:	62c4      	str	r4, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005462:	6282      	str	r2, [r0, #40]	; 0x28
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
}
 8005464:	bc10      	pop	{r4}
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8005466:	6143      	str	r3, [r0, #20]
}
 8005468:	4770      	bx	lr
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800546a:	684a      	ldr	r2, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800546c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005470:	4313      	orrs	r3, r2

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005472:	68ca      	ldr	r2, [r1, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005478:	688c      	ldr	r4, [r1, #8]

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800547a:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800547c:	6809      	ldr	r1, [r1, #0]
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 800547e:	6003      	str	r3, [r0, #0]
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8005480:	2301      	movs	r3, #1
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005482:	62c4      	str	r4, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005484:	6281      	str	r1, [r0, #40]	; 0x28
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
}
 8005486:	bc10      	pop	{r4}
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8005488:	6143      	str	r3, [r0, #20]
}
 800548a:	4770      	bx	lr
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800548c:	684a      	ldr	r2, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800548e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005492:	4313      	orrs	r3, r2

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005494:	68ca      	ldr	r2, [r1, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800549a:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 800549c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800549e:	688b      	ldr	r3, [r1, #8]
 80054a0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80054a2:	680b      	ldr	r3, [r1, #0]
 80054a4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054a6:	690b      	ldr	r3, [r1, #16]
 80054a8:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80054aa:	2301      	movs	r3, #1
 80054ac:	6143      	str	r3, [r0, #20]
 80054ae:	4770      	bx	lr
 80054b0:	40012c00 	.word	0x40012c00

080054b4 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80054b4:	b1b8      	cbz	r0, 80054e6 <HAL_TIM_Base_Init+0x32>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80054b6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054ba:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80054bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80054c0:	4604      	mov	r4, r0
 80054c2:	b15b      	cbz	r3, 80054dc <HAL_TIM_Base_Init+0x28>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80054c4:	2302      	movs	r3, #2
 80054c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ca:	6820      	ldr	r0, [r4, #0]
 80054cc:	1d21      	adds	r1, r4, #4
 80054ce:	f7ff ffb3 	bl	8005438 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80054d2:	2301      	movs	r3, #1
 80054d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 80054d8:	2000      	movs	r0, #0
 80054da:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054dc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054e0:	f7fe fdc4 	bl	800406c <HAL_TIM_Base_MspInit>
 80054e4:	e7ee      	b.n	80054c4 <HAL_TIM_Base_Init+0x10>
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 80054e6:	2001      	movs	r0, #1
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop

080054ec <HAL_TIM_PWM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80054ec:	b1b8      	cbz	r0, 800551e <HAL_TIM_PWM_Init+0x32>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80054ee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054f2:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80054f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80054f8:	4604      	mov	r4, r0
 80054fa:	b15b      	cbz	r3, 8005514 <HAL_TIM_PWM_Init+0x28>
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80054fc:	2302      	movs	r3, #2
 80054fe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005502:	6820      	ldr	r0, [r4, #0]
 8005504:	1d21      	adds	r1, r4, #4
 8005506:	f7ff ff97 	bl	8005438 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800550a:	2301      	movs	r3, #1
 800550c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8005510:	2000      	movs	r0, #0
 8005512:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005514:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005518:	f7ff fe18 	bl	800514c <HAL_TIM_PWM_MspInit>
 800551c:	e7ee      	b.n	80054fc <HAL_TIM_PWM_Init+0x10>
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 800551e:	2001      	movs	r0, #1
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop

08005524 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005524:	6a02      	ldr	r2, [r0, #32]
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005526:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005528:	f022 0210 	bic.w	r2, r2, #16
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 800552c:	688e      	ldr	r6, [r1, #8]
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800552e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005530:	6a03      	ldr	r3, [r0, #32]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005532:	4d12      	ldr	r5, [pc, #72]	; (800557c <TIM_OC2_SetConfig+0x58>)
  TIMx->CCER &= ~TIM_CCER_CC2E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005534:	6847      	ldr	r7, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005536:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8005538:	680c      	ldr	r4, [r1, #0]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800553a:	f023 0320 	bic.w	r3, r3, #32
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800553e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005542:	42a8      	cmp	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8005544:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8005548:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800554c:	d006      	beq.n	800555c <TIM_OC2_SetConfig+0x38>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800554e:	6849      	ldr	r1, [r1, #4]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005550:	6047      	str	r7, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005552:	6182      	str	r2, [r0, #24]
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005554:	bcf0      	pop	{r4, r5, r6, r7}

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005556:	6381      	str	r1, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005558:	6203      	str	r3, [r0, #32]
}
 800555a:	4770      	bx	lr
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800555c:	68ce      	ldr	r6, [r1, #12]

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800555e:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005560:	f427 6740 	bic.w	r7, r7, #3072	; 0xc00
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8005568:	698c      	ldr	r4, [r1, #24]
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800556a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800556e:	ea47 0585 	orr.w	r5, r7, r5, lsl #2
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8005576:	ea45 0784 	orr.w	r7, r5, r4, lsl #2
 800557a:	e7e8      	b.n	800554e <TIM_OC2_SetConfig+0x2a>
 800557c:	40012c00 	.word	0x40012c00

08005580 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8005580:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005582:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8005586:	2b01      	cmp	r3, #1
 8005588:	d02b      	beq.n	80055e2 <HAL_TIM_PWM_ConfigChannel+0x62>
 800558a:	460d      	mov	r5, r1
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 800558c:	2302      	movs	r3, #2
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
  __HAL_LOCK(htim);
 800558e:	2101      	movs	r1, #1
 8005590:	4604      	mov	r4, r0
 8005592:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8005596:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  switch (Channel)
 800559a:	2a0c      	cmp	r2, #12
 800559c:	d81a      	bhi.n	80055d4 <HAL_TIM_PWM_ConfigChannel+0x54>
 800559e:	e8df f002 	tbb	[pc, r2]
 80055a2:	1935      	.short	0x1935
 80055a4:	19071919 	.word	0x19071919
 80055a8:	19471919 	.word	0x19471919
 80055ac:	1919      	.short	0x1919
 80055ae:	22          	.byte	0x22
 80055af:	00          	.byte	0x00

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055b0:	4629      	mov	r1, r5
 80055b2:	6800      	ldr	r0, [r0, #0]
 80055b4:	f7ff ffb6 	bl	8005524 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055b8:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80055ba:	6928      	ldr	r0, [r5, #16]
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055bc:	6999      	ldr	r1, [r3, #24]
 80055be:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80055c2:	6199      	str	r1, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055c4:	6999      	ldr	r1, [r3, #24]
 80055c6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80055ca:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80055d2:	619a      	str	r2, [r3, #24]

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 80055d4:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80055d6:	2000      	movs	r0, #0

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 80055d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80055dc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
 80055e0:	bd38      	pop	{r3, r4, r5, pc}
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
  __HAL_LOCK(htim);
 80055e2:	2002      	movs	r0, #2
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 80055e4:	bd38      	pop	{r3, r4, r5, pc}

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055e6:	4629      	mov	r1, r5
 80055e8:	6800      	ldr	r0, [r0, #0]
 80055ea:	f7ff fd8b 	bl	8005104 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055ee:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80055f0:	6928      	ldr	r0, [r5, #16]
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055f2:	69d9      	ldr	r1, [r3, #28]
 80055f4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80055f8:	61d9      	str	r1, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055fa:	69d9      	ldr	r1, [r3, #28]
 80055fc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005600:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8005602:	69da      	ldr	r2, [r3, #28]
 8005604:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005608:	61da      	str	r2, [r3, #28]
    }
    break;
 800560a:	e7e3      	b.n	80055d4 <HAL_TIM_PWM_ConfigChannel+0x54>
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800560c:	4629      	mov	r1, r5
 800560e:	6800      	ldr	r0, [r0, #0]
 8005610:	f7ff fd1e 	bl	8005050 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005614:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005616:	692a      	ldr	r2, [r5, #16]
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005618:	6999      	ldr	r1, [r3, #24]
 800561a:	f041 0108 	orr.w	r1, r1, #8
 800561e:	6199      	str	r1, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005620:	6999      	ldr	r1, [r3, #24]
 8005622:	f021 0104 	bic.w	r1, r1, #4
 8005626:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005628:	6999      	ldr	r1, [r3, #24]
 800562a:	430a      	orrs	r2, r1
 800562c:	619a      	str	r2, [r3, #24]
    }
    break;
 800562e:	e7d1      	b.n	80055d4 <HAL_TIM_PWM_ConfigChannel+0x54>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005630:	4629      	mov	r1, r5
 8005632:	6800      	ldr	r0, [r0, #0]
 8005634:	f7ff fd38 	bl	80050a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005638:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800563a:	692a      	ldr	r2, [r5, #16]
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800563c:	69d9      	ldr	r1, [r3, #28]
 800563e:	f041 0108 	orr.w	r1, r1, #8
 8005642:	61d9      	str	r1, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005644:	69d9      	ldr	r1, [r3, #28]
 8005646:	f021 0104 	bic.w	r1, r1, #4
 800564a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800564c:	69d9      	ldr	r1, [r3, #28]
 800564e:	430a      	orrs	r2, r1
 8005650:	61da      	str	r2, [r3, #28]
    }
    break;
 8005652:	e7bf      	b.n	80055d4 <HAL_TIM_PWM_ConfigChannel+0x54>

08005654 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005654:	b530      	push	{r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8005656:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005658:	b083      	sub	sp, #12
 800565a:	460d      	mov	r5, r1
 800565c:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 800565e:	2b09      	cmp	r3, #9
 8005660:	d80b      	bhi.n	800567a <USBD_StdDevReq+0x26>
 8005662:	e8df f003 	tbb	[pc, r3]
 8005666:	4935      	.short	0x4935
 8005668:	050a590a 	.word	0x050a590a
 800566c:	157d0a66 	.word	0x157d0a66
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8005670:	888b      	ldrh	r3, [r1, #4]
 8005672:	b913      	cbnz	r3, 800567a <USBD_StdDevReq+0x26>
 8005674:	88cb      	ldrh	r3, [r1, #6]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d07f      	beq.n	800577a <USBD_StdDevReq+0x126>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800567a:	2180      	movs	r1, #128	; 0x80
 800567c:	4620      	mov	r0, r4
 800567e:	f7fe fbb7 	bl	8003df0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8005682:	4620      	mov	r0, r4
 8005684:	2100      	movs	r1, #0
 8005686:	f7fe fbb3 	bl	8003df0 <USBD_LL_StallEP>
    USBD_CtlError(pdev , req);
    break;
  }
  
  return ret;
}
 800568a:	2000      	movs	r0, #0
 800568c:	b003      	add	sp, #12
 800568e:	bd30      	pop	{r4, r5, pc}
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8005690:	7889      	ldrb	r1, [r1, #2]
 8005692:	4d97      	ldr	r5, [pc, #604]	; (80058f0 <USBD_StdDevReq+0x29c>)
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8005694:	2901      	cmp	r1, #1
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8005696:	7029      	strb	r1, [r5, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8005698:	d8ef      	bhi.n	800567a <USBD_StdDevReq+0x26>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
 800569a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800569e:	2b02      	cmp	r3, #2
 80056a0:	f000 8089 	beq.w	80057b6 <USBD_StdDevReq+0x162>
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	d1e8      	bne.n	800567a <USBD_StdDevReq+0x26>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 80056a8:	2900      	cmp	r1, #0
 80056aa:	f000 8116 	beq.w	80058da <USBD_StdDevReq+0x286>
        pdev->dev_config = cfgidx;          
        USBD_ClrClassConfig(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 80056ae:	6841      	ldr	r1, [r0, #4]
 80056b0:	2901      	cmp	r1, #1
 80056b2:	d009      	beq.n	80056c8 <USBD_StdDevReq+0x74>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80056b4:	b2c9      	uxtb	r1, r1
 80056b6:	f7fc fa2d 	bl	8001b14 <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 80056ba:	7829      	ldrb	r1, [r5, #0]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80056bc:	4620      	mov	r0, r4
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 80056be:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80056c0:	f7fc fa1e 	bl	8001b00 <USBD_SetClassConfig>
 80056c4:	2802      	cmp	r0, #2
 80056c6:	d0d8      	beq.n	800567a <USBD_StdDevReq+0x26>
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
    {
      pdev->dev_remote_wakeup = 0; 
      pdev->pClass->Setup (pdev, req);   
      USBD_CtlSendStatus(pdev);
 80056c8:	4620      	mov	r0, r4
 80056ca:	f000 fa99 	bl	8005c00 <USBD_CtlSendStatus>
 80056ce:	e7dc      	b.n	800568a <USBD_StdDevReq+0x36>
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
  
    
  switch (pdev->dev_state) 
 80056d0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80056d4:	2201      	movs	r2, #1
 80056d6:	3b02      	subs	r3, #2
 80056d8:	4293      	cmp	r3, r2
 80056da:	f04f 0103 	mov.w	r1, #3
 80056de:	d8cc      	bhi.n	800567a <USBD_StdDevReq+0x26>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 80056e0:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80056e4:	60c2      	str	r2, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 80056e6:	b103      	cbz	r3, 80056ea <USBD_StdDevReq+0x96>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80056e8:	60c1      	str	r1, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 80056ea:	2202      	movs	r2, #2
 80056ec:	f104 010c 	add.w	r1, r4, #12
 80056f0:	4620      	mov	r0, r4
 80056f2:	f000 fa57 	bl	8005ba4 <USBD_CtlSendData>
 80056f6:	e7c8      	b.n	800568a <USBD_StdDevReq+0x36>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 80056f8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80056fc:	3b02      	subs	r3, #2
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d8bb      	bhi.n	800567a <USBD_StdDevReq+0x26>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8005702:	884b      	ldrh	r3, [r1, #2]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d1c0      	bne.n	800568a <USBD_StdDevReq+0x36>
    {
      pdev->dev_remote_wakeup = 0; 
      pdev->pClass->Setup (pdev, req);   
 8005708:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
    {
      pdev->dev_remote_wakeup = 0; 
 800570c:	2200      	movs	r2, #0
      pdev->pClass->Setup (pdev, req);   
 800570e:	689b      	ldr	r3, [r3, #8]
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
    {
      pdev->dev_remote_wakeup = 0; 
 8005710:	f8c0 2204 	str.w	r2, [r0, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8005714:	4798      	blx	r3
 8005716:	e7d7      	b.n	80056c8 <USBD_StdDevReq+0x74>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005718:	884b      	ldrh	r3, [r1, #2]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d1b5      	bne.n	800568a <USBD_StdDevReq+0x36>
  {
    pdev->dev_remote_wakeup = 1;  
    pdev->pClass->Setup (pdev, req);   
 800571e:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
  {
    pdev->dev_remote_wakeup = 1;  
 8005722:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8005726:	6893      	ldr	r3, [r2, #8]
 8005728:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 800572a:	4620      	mov	r0, r4
 800572c:	f000 fa68 	bl	8005c00 <USBD_CtlSendStatus>
 8005730:	e7ab      	b.n	800568a <USBD_StdDevReq+0x36>
 8005732:	884a      	ldrh	r2, [r1, #2]
{
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8005734:	0a13      	lsrs	r3, r2, #8
 8005736:	3b01      	subs	r3, #1
 8005738:	2b06      	cmp	r3, #6
 800573a:	d89e      	bhi.n	800567a <USBD_StdDevReq+0x26>
 800573c:	a101      	add	r1, pc, #4	; (adr r1, 8005744 <USBD_StdDevReq+0xf0>)
 800573e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005742:	bf00      	nop
 8005744:	08005827 	.word	0x08005827
 8005748:	08005849 	.word	0x08005849
 800574c:	08005837 	.word	0x08005837
 8005750:	0800567b 	.word	0x0800567b
 8005754:	0800567b 	.word	0x0800567b
 8005758:	08005811 	.word	0x08005811
 800575c:	080057d1 	.word	0x080057d1
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{

  if (req->wLength != 1) 
 8005760:	88ca      	ldrh	r2, [r1, #6]
 8005762:	2a01      	cmp	r2, #1
 8005764:	d189      	bne.n	800567a <USBD_StdDevReq+0x26>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 8005766:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800576a:	2b02      	cmp	r3, #2
 800576c:	d01c      	beq.n	80057a8 <USBD_StdDevReq+0x154>
 800576e:	2b03      	cmp	r3, #3
 8005770:	d183      	bne.n	800567a <USBD_StdDevReq+0x26>
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 8005772:	1d01      	adds	r1, r0, #4
 8005774:	f000 fa16 	bl	8005ba4 <USBD_CtlSendData>
 8005778:	e787      	b.n	800568a <USBD_StdDevReq+0x36>
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800577a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800577e:	788d      	ldrb	r5, [r1, #2]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005780:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8005782:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005786:	f43f af78 	beq.w	800567a <USBD_StdDevReq+0x26>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 800578a:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800578e:	4629      	mov	r1, r5
 8005790:	f7fe fb4e 	bl	8003e30 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8005794:	4620      	mov	r0, r4
 8005796:	f000 fa33 	bl	8005c00 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800579a:	2d00      	cmp	r5, #0
 800579c:	f000 8090 	beq.w	80058c0 <USBD_StdDevReq+0x26c>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80057a0:	2302      	movs	r3, #2
 80057a2:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 80057a6:	e770      	b.n	800568a <USBD_StdDevReq+0x36>
  else 
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 80057a8:	4601      	mov	r1, r0
 80057aa:	2300      	movs	r3, #0
 80057ac:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 80057b0:	f000 f9f8 	bl	8005ba4 <USBD_CtlSendData>
 80057b4:	e769      	b.n	800568a <USBD_StdDevReq+0x36>
  else 
  {
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80057b6:	2900      	cmp	r1, #0
 80057b8:	d086      	beq.n	80056c8 <USBD_StdDevReq+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80057ba:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80057bc:	2303      	movs	r3, #3
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80057be:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80057c0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80057c4:	f7fc f99c 	bl	8001b00 <USBD_SetClassConfig>
 80057c8:	2802      	cmp	r0, #2
 80057ca:	f47f af7d 	bne.w	80056c8 <USBD_StdDevReq+0x74>
 80057ce:	e754      	b.n	800567a <USBD_StdDevReq+0x26>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80057d0:	7c03      	ldrb	r3, [r0, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f47f af51 	bne.w	800567a <USBD_StdDevReq+0x26>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80057d8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80057dc:	f10d 0006 	add.w	r0, sp, #6
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80057e4:	2307      	movs	r3, #7
 80057e6:	7043      	strb	r3, [r0, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 80057e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f43f af4c 	beq.w	800568a <USBD_StdDevReq+0x36>
 80057f2:	88ea      	ldrh	r2, [r5, #6]
 80057f4:	2a00      	cmp	r2, #0
 80057f6:	f43f af48 	beq.w	800568a <USBD_StdDevReq+0x36>
  {
    
    len = MIN(len , req->wLength);
 80057fa:	4293      	cmp	r3, r2
 80057fc:	bf28      	it	cs
 80057fe:	4613      	movcs	r3, r2
    
    USBD_CtlSendData (pdev, 
 8005800:	4601      	mov	r1, r0
 8005802:	461a      	mov	r2, r3
 8005804:	4620      	mov	r0, r4
  }
  
  if((len != 0)&& (req->wLength != 0))
  {
    
    len = MIN(len , req->wLength);
 8005806:	f8ad 3006 	strh.w	r3, [sp, #6]
    
    USBD_CtlSendData (pdev, 
 800580a:	f000 f9cb 	bl	8005ba4 <USBD_CtlSendData>
 800580e:	e73c      	b.n	800568a <USBD_StdDevReq+0x36>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8005810:	7c03      	ldrb	r3, [r0, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	f47f af31 	bne.w	800567a <USBD_StdDevReq+0x26>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005818:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800581c:	f10d 0006 	add.w	r0, sp, #6
 8005820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005822:	4798      	blx	r3
 8005824:	e7e0      	b.n	80057e8 <USBD_StdDevReq+0x194>
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005826:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800582a:	f10d 0106 	add.w	r1, sp, #6
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	7c00      	ldrb	r0, [r0, #16]
 8005832:	4798      	blx	r3
 8005834:	e7d8      	b.n	80057e8 <USBD_StdDevReq+0x194>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	2a05      	cmp	r2, #5
 800583a:	f63f af1e 	bhi.w	800567a <USBD_StdDevReq+0x26>
 800583e:	e8df f002 	tbb	[pc, r2]
 8005842:	1f27      	.short	0x1f27
 8005844:	2f370f17 	.word	0x2f370f17
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8005848:	7c03      	ldrb	r3, [r0, #16]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d13c      	bne.n	80058c8 <USBD_StdDevReq+0x274>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800584e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005852:	f10d 0006 	add.w	r0, sp, #6
 8005856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005858:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800585a:	2302      	movs	r3, #2
 800585c:	7043      	strb	r3, [r0, #1]
 800585e:	e7c3      	b.n	80057e8 <USBD_StdDevReq+0x194>
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005860:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005864:	f10d 0106 	add.w	r1, sp, #6
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	7c00      	ldrb	r0, [r0, #16]
 800586c:	4798      	blx	r3
 800586e:	e7bb      	b.n	80057e8 <USBD_StdDevReq+0x194>
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005870:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005874:	f10d 0106 	add.w	r1, sp, #6
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	7c00      	ldrb	r0, [r0, #16]
 800587c:	4798      	blx	r3
 800587e:	e7b3      	b.n	80057e8 <USBD_StdDevReq+0x194>
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005880:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005884:	f10d 0106 	add.w	r1, sp, #6
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	7c00      	ldrb	r0, [r0, #16]
 800588c:	4798      	blx	r3
 800588e:	e7ab      	b.n	80057e8 <USBD_StdDevReq+0x194>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8005890:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005894:	f10d 0106 	add.w	r1, sp, #6
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	7c00      	ldrb	r0, [r0, #16]
 800589c:	4798      	blx	r3
 800589e:	e7a3      	b.n	80057e8 <USBD_StdDevReq+0x194>
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80058a0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80058a4:	f10d 0106 	add.w	r1, sp, #6
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	7c00      	ldrb	r0, [r0, #16]
 80058ac:	4798      	blx	r3
 80058ae:	e79b      	b.n	80057e8 <USBD_StdDevReq+0x194>
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80058b0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80058b4:	f10d 0106 	add.w	r1, sp, #6
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	7c00      	ldrb	r0, [r0, #16]
 80058bc:	4798      	blx	r3
 80058be:	e793      	b.n	80057e8 <USBD_StdDevReq+0x194>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80058c0:	2301      	movs	r3, #1
 80058c2:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 80058c6:	e6e0      	b.n	800568a <USBD_StdDevReq+0x36>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80058c8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80058cc:	f10d 0006 	add.w	r0, sp, #6
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80058d4:	2302      	movs	r3, #2
 80058d6:	7043      	strb	r3, [r0, #1]
 80058d8:	e786      	b.n	80057e8 <USBD_StdDevReq+0x194>
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80058da:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 80058dc:	6041      	str	r1, [r0, #4]
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80058de:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
        USBD_ClrClassConfig(pdev , cfgidx);
 80058e2:	f7fc f917 	bl	8001b14 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80058e6:	4620      	mov	r0, r4
 80058e8:	f000 f98a 	bl	8005c00 <USBD_CtlSendStatus>
 80058ec:	e6cd      	b.n	800568a <USBD_StdDevReq+0x36>
 80058ee:	bf00      	nop
 80058f0:	20000cf1 	.word	0x20000cf1

080058f4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80058f4:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 80058f6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80058fa:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d103      	bne.n	8005908 <USBD_StdItfReq+0x14>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8005900:	790b      	ldrb	r3, [r1, #4]
 8005902:	460d      	mov	r5, r1
 8005904:	2b01      	cmp	r3, #1
 8005906:	d908      	bls.n	800591a <USBD_StdItfReq+0x26>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8005908:	2180      	movs	r1, #128	; 0x80
 800590a:	f7fe fa71 	bl	8003df0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800590e:	4620      	mov	r0, r4
 8005910:	2100      	movs	r1, #0
 8005912:	f7fe fa6d 	bl	8003df0 <USBD_LL_StallEP>
  default:
     USBD_CtlError(pdev , req);
    break;
  }
  return USBD_OK;
}
 8005916:	2000      	movs	r0, #0
 8005918:	bd38      	pop	{r3, r4, r5, pc}
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
    {
      pdev->pClass->Setup (pdev, req); 
 800591a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8005922:	88eb      	ldrh	r3, [r5, #6]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1f6      	bne.n	8005916 <USBD_StdItfReq+0x22>
      {
         USBD_CtlSendStatus(pdev);
 8005928:	4620      	mov	r0, r4
 800592a:	f000 f969 	bl	8005c00 <USBD_CtlSendStatus>
 800592e:	e7f2      	b.n	8005916 <USBD_StdItfReq+0x22>

08005930 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005930:	b570      	push	{r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8005932:	780b      	ldrb	r3, [r1, #0]
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8005934:	888a      	ldrh	r2, [r1, #4]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8005936:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800593a:	2b20      	cmp	r3, #32
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800593c:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800593e:	d057      	beq.n	80059f0 <USBD_StdEPReq+0xc0>
    pdev->pClass->Setup (pdev, req);
    
    return USBD_OK;
  }
  
  switch (req->bRequest) 
 8005940:	784b      	ldrb	r3, [r1, #1]
 8005942:	460c      	mov	r4, r1
 8005944:	2b01      	cmp	r3, #1
 8005946:	b2d6      	uxtb	r6, r2
 8005948:	d034      	beq.n	80059b4 <USBD_StdEPReq+0x84>
 800594a:	d319      	bcc.n	8005980 <USBD_StdEPReq+0x50>
 800594c:	2b03      	cmp	r3, #3
 800594e:	d115      	bne.n	800597c <USBD_StdEPReq+0x4c>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 8005950:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005954:	2b02      	cmp	r3, #2
 8005956:	d031      	beq.n	80059bc <USBD_StdEPReq+0x8c>
 8005958:	2b03      	cmp	r3, #3
 800595a:	d140      	bne.n	80059de <USBD_StdEPReq+0xae>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 800595c:	884b      	ldrh	r3, [r1, #2]
 800595e:	b923      	cbnz	r3, 800596a <USBD_StdEPReq+0x3a>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005960:	0673      	lsls	r3, r6, #25
 8005962:	d002      	beq.n	800596a <USBD_StdEPReq+0x3a>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 8005964:	4631      	mov	r1, r6
 8005966:	f7fe fa43 	bl	8003df0 <USBD_LL_StallEP>
      if (req->wValue == USB_FEATURE_EP_HALT)
      {
        if ((ep_addr & 0x7F) != 0x00) 
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
          pdev->pClass->Setup (pdev, req);
 800596a:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800596e:	4621      	mov	r1, r4
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	4628      	mov	r0, r5
 8005974:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005976:	4628      	mov	r0, r5
 8005978:	f000 f942 	bl	8005c00 <USBD_CtlSendStatus>
    
  default:
    break;
  }
  return ret;
}
 800597c:	2000      	movs	r0, #0
 800597e:	bd70      	pop	{r4, r5, r6, pc}
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 8005980:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005984:	2b02      	cmp	r3, #2
 8005986:	d019      	beq.n	80059bc <USBD_StdEPReq+0x8c>
 8005988:	2b03      	cmp	r3, #3
 800598a:	d128      	bne.n	80059de <USBD_StdEPReq+0xae>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800598c:	f006 047f 	and.w	r4, r6, #127	; 0x7f
 8005990:	0613      	lsls	r3, r2, #24
 8005992:	eb00 1404 	add.w	r4, r0, r4, lsl #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005996:	4631      	mov	r1, r6
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8005998:	bf4c      	ite	mi
 800599a:	3414      	addmi	r4, #20
 800599c:	f504 7482 	addpl.w	r4, r4, #260	; 0x104
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80059a0:	f7fe fa36 	bl	8003e10 <USBD_LL_IsStallEP>
 80059a4:	bb48      	cbnz	r0, 80059fa <USBD_StdEPReq+0xca>
      {
        pep->status = 0x0001;     
      }
      else
      {
        pep->status = 0x0000;  
 80059a6:	6020      	str	r0, [r4, #0]
      }
      
      USBD_CtlSendData (pdev,
 80059a8:	4621      	mov	r1, r4
 80059aa:	4628      	mov	r0, r5
 80059ac:	2202      	movs	r2, #2
 80059ae:	f000 f8f9 	bl	8005ba4 <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 80059b2:	e7e3      	b.n	800597c <USBD_StdEPReq+0x4c>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 80059b4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d105      	bne.n	80059c8 <USBD_StdEPReq+0x98>
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 80059bc:	0672      	lsls	r2, r6, #25
 80059be:	d0dd      	beq.n	800597c <USBD_StdEPReq+0x4c>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 80059c0:	4631      	mov	r1, r6
 80059c2:	f7fe fa15 	bl	8003df0 <USBD_LL_StallEP>
 80059c6:	e7d9      	b.n	800597c <USBD_StdEPReq+0x4c>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d108      	bne.n	80059de <USBD_StdEPReq+0xae>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80059cc:	884b      	ldrh	r3, [r1, #2]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1d4      	bne.n	800597c <USBD_StdEPReq+0x4c>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 80059d2:	0671      	lsls	r1, r6, #25
 80059d4:	d0cf      	beq.n	8005976 <USBD_StdEPReq+0x46>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80059d6:	4631      	mov	r1, r6
 80059d8:	f7fe fa12 	bl	8003e00 <USBD_LL_ClearStallEP>
 80059dc:	e7c5      	b.n	800596a <USBD_StdEPReq+0x3a>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 80059de:	2180      	movs	r1, #128	; 0x80
 80059e0:	f7fe fa06 	bl	8003df0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80059e4:	4628      	mov	r0, r5
 80059e6:	2100      	movs	r1, #0
 80059e8:	f7fe fa02 	bl	8003df0 <USBD_LL_StallEP>
    
  default:
    break;
  }
  return ret;
}
 80059ec:	2000      	movs	r0, #0
 80059ee:	bd70      	pop	{r4, r5, r6, pc}
  ep_addr  = LOBYTE(req->wIndex);   
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
  {
    pdev->pClass->Setup (pdev, req);
 80059f0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	4798      	blx	r3
    
    return USBD_OK;
 80059f8:	e7c0      	b.n	800597c <USBD_StdEPReq+0x4c>
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
      {
        pep->status = 0x0001;     
 80059fa:	2301      	movs	r3, #1
 80059fc:	6023      	str	r3, [r4, #0]
 80059fe:	e7d3      	b.n	80059a8 <USBD_StdEPReq+0x78>

08005a00 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 8005a00:	780b      	ldrb	r3, [r1, #0]
 8005a02:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8005a04:	784b      	ldrb	r3, [r1, #1]
 8005a06:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8005a08:	78ca      	ldrb	r2, [r1, #3]
 8005a0a:	788b      	ldrb	r3, [r1, #2]
 8005a0c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005a10:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8005a12:	794a      	ldrb	r2, [r1, #5]
 8005a14:	790b      	ldrb	r3, [r1, #4]
 8005a16:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005a1a:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005a1c:	79ca      	ldrb	r2, [r1, #7]
 8005a1e:	798b      	ldrb	r3, [r1, #6]
 8005a20:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005a24:	80c3      	strh	r3, [r0, #6]
 8005a26:	4770      	bx	lr

08005a28 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8005a28:	b300      	cbz	r0, 8005a6c <USBD_GetString+0x44>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8005a2a:	7803      	ldrb	r3, [r0, #0]
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005a2c:	b430      	push	{r4, r5}
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8005a2e:	b1f3      	cbz	r3, 8005a6e <USBD_GetString+0x46>
 8005a30:	4604      	mov	r4, r0
 8005a32:	2300      	movs	r3, #0
 8005a34:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    {
        len++;
 8005a38:	3301      	adds	r3, #1
 8005a3a:	b2db      	uxtb	r3, r3
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8005a3c:	2d00      	cmp	r5, #0
 8005a3e:	d1f9      	bne.n	8005a34 <USBD_GetString+0xc>
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	3302      	adds	r3, #2
 8005a44:	b2dc      	uxtb	r4, r3
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8005a46:	2503      	movs	r5, #3
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8005a48:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8005a4a:	700c      	strb	r4, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8005a4c:	704d      	strb	r5, [r1, #1]
    
    while (*desc != '\0') 
 8005a4e:	7804      	ldrb	r4, [r0, #0]
 8005a50:	b15c      	cbz	r4, 8005a6a <USBD_GetString+0x42>
 8005a52:	2302      	movs	r3, #2
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0x00;
 8005a54:	2500      	movs	r5, #0
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != '\0') 
    {
      unicode[idx++] = *desc++;
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0x00;
 8005a5c:	548d      	strb	r5, [r1, r2]
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != '\0') 
 8005a5e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0x00;
 8005a62:	3302      	adds	r3, #2
 8005a64:	b2db      	uxtb	r3, r3
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != '\0') 
 8005a66:	2c00      	cmp	r4, #0
 8005a68:	d1f5      	bne.n	8005a56 <USBD_GetString+0x2e>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0x00;
    }
  } 
}
 8005a6a:	bc30      	pop	{r4, r5}
 8005a6c:	4770      	bx	lr
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8005a6e:	2402      	movs	r4, #2
 8005a70:	4623      	mov	r3, r4
 8005a72:	e7e8      	b.n	8005a46 <USBD_GetString+0x1e>

08005a74 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8005a74:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005a78:	d00c      	beq.n	8005a94 <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8005a7a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8005a7e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8005a82:	3028      	adds	r0, #40	; 0x28
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005a84:	b162      	cbz	r2, 8005aa0 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8005a86:	0c19      	lsrs	r1, r3, #16
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8005a88:	2201      	movs	r2, #1
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8005a8a:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8005a8c:	8101      	strh	r1, [r0, #8]
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8005a8e:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
  }
  
  return HAL_OK; 
}
 8005a90:	2000      	movs	r0, #0
 8005a92:	4770      	bx	lr
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a94:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8005a98:	f500 7002 	add.w	r0, r0, #520	; 0x208
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005a9c:	2a00      	cmp	r2, #0
 8005a9e:	d1f2      	bne.n	8005a86 <HAL_PCDEx_PMAConfig+0x12>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8005aa0:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8005aa2:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
  }
  
  return HAL_OK; 
}
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	4770      	bx	lr

08005aa8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
  /* USER CODE END 4 */ 
}
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	4770      	bx	lr

08005aac <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005aac:	2000      	movs	r0, #0
 8005aae:	4770      	bx	lr

08005ab0 <CDC_Init_FS>:
  *         Initializes the CDC media low layer over the FS USB IP
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005ab0:	b510      	push	{r4, lr}
  hUsbDevice_0 = &hUsbDeviceFS;
 8005ab2:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <CDC_Init_FS+0x20>)
 8005ab4:	4c07      	ldr	r4, [pc, #28]	; (8005ad4 <CDC_Init_FS+0x24>)
  /* USER CODE BEGIN 3 */ 
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(hUsbDevice_0, UserTxBufferFS, 0);
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	2200      	movs	r2, #0
 8005aba:	4907      	ldr	r1, [pc, #28]	; (8005ad8 <CDC_Init_FS+0x28>)
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
  hUsbDevice_0 = &hUsbDeviceFS;
 8005abc:	6023      	str	r3, [r4, #0]
  /* USER CODE BEGIN 3 */ 
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(hUsbDevice_0, UserTxBufferFS, 0);
 8005abe:	f7ff f86b 	bl	8004b98 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(hUsbDevice_0, UserRxBufferFS);
 8005ac2:	6820      	ldr	r0, [r4, #0]
 8005ac4:	4905      	ldr	r1, [pc, #20]	; (8005adc <CDC_Init_FS+0x2c>)
 8005ac6:	f7ff f86f 	bl	8004ba8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
  /* USER CODE END 3 */ 
}
 8005aca:	2000      	movs	r0, #0
 8005acc:	bd10      	pop	{r4, pc}
 8005ace:	bf00      	nop
 8005ad0:	200025e0 	.word	0x200025e0
 8005ad4:	200024dc 	.word	0x200024dc
 8005ad8:	20002560 	.word	0x20002560
 8005adc:	200024e0 	.word	0x200024e0

08005ae0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 8005ae0:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN 6 */
  for (int i = 0; i < *Len; i++)
 8005ae2:	680b      	ldr	r3, [r1, #0]
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 8005ae4:	4605      	mov	r5, r0
  /* USER CODE BEGIN 6 */
  for (int i = 0; i < *Len; i++)
 8005ae6:	b1e3      	cbz	r3, 8005b22 <CDC_Receive_FS+0x42>
 8005ae8:	4c0f      	ldr	r4, [pc, #60]	; (8005b28 <CDC_Receive_FS+0x48>)
 8005aea:	4810      	ldr	r0, [pc, #64]	; (8005b2c <CDC_Receive_FS+0x4c>)
 8005aec:	2300      	movs	r3, #0
  UserTxBufferFS[i] = UserRxBufferFS[i];
 8005aee:	f814 2f01 	ldrb.w	r2, [r4, #1]!
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
  /* USER CODE BEGIN 6 */
  for (int i = 0; i < *Len; i++)
 8005af2:	3301      	adds	r3, #1
  UserTxBufferFS[i] = UserRxBufferFS[i];
 8005af4:	f800 2f01 	strb.w	r2, [r0, #1]!
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
  /* USER CODE BEGIN 6 */
  for (int i = 0; i < *Len; i++)
 8005af8:	680a      	ldr	r2, [r1, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d8f7      	bhi.n	8005aee <CDC_Receive_FS+0xe>
 8005afe:	b292      	uxth	r2, r2
  UserTxBufferFS[i] = UserRxBufferFS[i];
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &UserTxBufferFS[0], *Len);
 8005b00:	490b      	ldr	r1, [pc, #44]	; (8005b30 <CDC_Receive_FS+0x50>)
  USBD_CDC_TransmitPacket(&hUsbDeviceFS);

  USBD_CDC_SetRxBuffer(hUsbDevice_0, &Buf[0]);
 8005b02:	4c0c      	ldr	r4, [pc, #48]	; (8005b34 <CDC_Receive_FS+0x54>)
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
  /* USER CODE BEGIN 6 */
  for (int i = 0; i < *Len; i++)
  UserTxBufferFS[i] = UserRxBufferFS[i];
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &UserTxBufferFS[0], *Len);
 8005b04:	480c      	ldr	r0, [pc, #48]	; (8005b38 <CDC_Receive_FS+0x58>)
 8005b06:	f7ff f847 	bl	8004b98 <USBD_CDC_SetTxBuffer>
  USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005b0a:	480b      	ldr	r0, [pc, #44]	; (8005b38 <CDC_Receive_FS+0x58>)
 8005b0c:	f7ff f852 	bl	8004bb4 <USBD_CDC_TransmitPacket>

  USBD_CDC_SetRxBuffer(hUsbDevice_0, &Buf[0]);
 8005b10:	4629      	mov	r1, r5
 8005b12:	6820      	ldr	r0, [r4, #0]
 8005b14:	f7ff f848 	bl	8004ba8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(hUsbDevice_0);
 8005b18:	6820      	ldr	r0, [r4, #0]
 8005b1a:	f7ff f863 	bl	8004be4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */ 
}
 8005b1e:	2000      	movs	r0, #0
 8005b20:	bd38      	pop	{r3, r4, r5, pc}
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
  /* USER CODE BEGIN 6 */
  for (int i = 0; i < *Len; i++)
 8005b22:	461a      	mov	r2, r3
 8005b24:	e7ec      	b.n	8005b00 <CDC_Receive_FS+0x20>
 8005b26:	bf00      	nop
 8005b28:	200024df 	.word	0x200024df
 8005b2c:	2000255f 	.word	0x2000255f
 8005b30:	20002560 	.word	0x20002560
 8005b34:	200024dc 	.word	0x200024dc
 8005b38:	200025e0 	.word	0x200025e0

08005b3c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b3c:	b510      	push	{r4, lr}
 8005b3e:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8005b40:	0743      	lsls	r3, r0, #29
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b42:	bf1c      	itt	ne
 8005b44:	f020 0407 	bicne.w	r4, r0, #7
 8005b48:	3408      	addne	r4, #8
		}
	#endif

	vTaskSuspendAll();
 8005b4a:	f7fd fa35 	bl	8002fb8 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8005b4e:	4a10      	ldr	r2, [pc, #64]	; (8005b90 <pvPortMalloc+0x54>)
 8005b50:	6813      	ldr	r3, [r2, #0]
 8005b52:	b1b3      	cbz	r3, 8005b82 <pvPortMalloc+0x46>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8005b54:	f640 70f7 	movw	r0, #4087	; 0xff7
 8005b58:	490e      	ldr	r1, [pc, #56]	; (8005b94 <pvPortMalloc+0x58>)
 8005b5a:	f851 3cf4 	ldr.w	r3, [r1, #-244]
 8005b5e:	441c      	add	r4, r3
 8005b60:	4284      	cmp	r4, r0
 8005b62:	d809      	bhi.n	8005b78 <pvPortMalloc+0x3c>
 8005b64:	42a3      	cmp	r3, r4
 8005b66:	d207      	bcs.n	8005b78 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8005b68:	6812      	ldr	r2, [r2, #0]
			xNextFreeByte += xWantedSize;
 8005b6a:	f841 4cf4 	str.w	r4, [r1, #-244]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8005b6e:	18d4      	adds	r4, r2, r3
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b70:	f7fd fac4 	bl	80030fc <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 8005b74:	4620      	mov	r0, r4
 8005b76:	bd10      	pop	{r4, pc}

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
 8005b78:	2400      	movs	r4, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b7a:	f7fd fabf 	bl	80030fc <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 8005b7e:	4620      	mov	r0, r4
 8005b80:	bd10      	pop	{r4, pc}
	vTaskSuspendAll();
	{
		if( pucAlignedHeap == NULL )
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8005b82:	f102 030c 	add.w	r3, r2, #12
 8005b86:	f023 0307 	bic.w	r3, r3, #7
 8005b8a:	6013      	str	r3, [r2, #0]
 8005b8c:	e7e2      	b.n	8005b54 <pvPortMalloc+0x18>
 8005b8e:	bf00      	nop
 8005b90:	20000cf4 	.word	0x20000cf4
 8005b94:	20001dec 	.word	0x20001dec

08005b98 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8005b98:	b118      	cbz	r0, 8005ba2 <vPortFree+0xa>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b9a:	b508      	push	{r3, lr}
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8005b9c:	f7fe fe10 	bl	80047c0 <ulPortSetInterruptMask>
 8005ba0:	e7fe      	b.n	8005ba0 <vPortFree+0x8>
 8005ba2:	4770      	bx	lr

08005ba4 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8005ba8:	2502      	movs	r5, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8005baa:	460a      	mov	r2, r1
                               uint8_t *pbuf,
                               uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
  pdev->ep_in[0].total_length = len;
 8005bac:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 8005bae:	61c3      	str	r3, [r0, #28]
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8005bb0:	f8c0 51f4 	str.w	r5, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	f7fe f943 	bl	8003e40 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8005bba:	2000      	movs	r0, #0
 8005bbc:	bd38      	pop	{r3, r4, r5, pc}
 8005bbe:	bf00      	nop

08005bc0 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8005bc0:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	460a      	mov	r2, r1
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	f7fe f93a 	bl	8003e40 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8005bcc:	2000      	movs	r0, #0
 8005bce:	bd08      	pop	{r3, pc}

08005bd0 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8005bd0:	b538      	push	{r3, r4, r5, lr}
 8005bd2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8005bd4:	2503      	movs	r5, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8005bd6:	460a      	mov	r2, r1
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
  pdev->ep_out[0].total_length = len;
 8005bd8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8005bdc:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8005be0:	f8c0 51f4 	str.w	r5, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8005be4:	2100      	movs	r1, #0
 8005be6:	f7fe f933 	bl	8003e50 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8005bea:	2000      	movs	r0, #0
 8005bec:	bd38      	pop	{r3, r4, r5, pc}
 8005bee:	bf00      	nop

08005bf0 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8005bf0:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	460a      	mov	r2, r1
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	f7fe f92a 	bl	8003e50 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	bd08      	pop	{r3, pc}

08005c00 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8005c00:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005c02:	2204      	movs	r2, #4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8005c04:	2300      	movs	r3, #0
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005c06:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f7fe f917 	bl	8003e40 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8005c12:	2000      	movs	r0, #0
 8005c14:	bd08      	pop	{r3, pc}
 8005c16:	bf00      	nop

08005c18 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8005c18:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8005c1a:	2205      	movs	r2, #5
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8005c1c:	2300      	movs	r3, #0
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8005c1e:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8005c22:	4619      	mov	r1, r3
 8005c24:	461a      	mov	r2, r3
 8005c26:	f7fe f913 	bl	8003e50 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	bd08      	pop	{r3, pc}
 8005c2e:	bf00      	nop

08005c30 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 8005c30:	b510      	push	{r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8005c32:	4c09      	ldr	r4, [pc, #36]	; (8005c58 <MX_USB_DEVICE_Init+0x28>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	4620      	mov	r0, r4
 8005c38:	4908      	ldr	r1, [pc, #32]	; (8005c5c <MX_USB_DEVICE_Init+0x2c>)
 8005c3a:	f7fb ff3d 	bl	8001ab8 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8005c3e:	4620      	mov	r0, r4
 8005c40:	4907      	ldr	r1, [pc, #28]	; (8005c60 <MX_USB_DEVICE_Init+0x30>)
 8005c42:	f7fb ff4f 	bl	8001ae4 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8005c46:	4620      	mov	r0, r4
 8005c48:	4906      	ldr	r1, [pc, #24]	; (8005c64 <MX_USB_DEVICE_Init+0x34>)
 8005c4a:	f7fe ff9d 	bl	8004b88 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8005c4e:	4620      	mov	r0, r4

}
 8005c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);

  USBD_Start(&hUsbDeviceFS);
 8005c54:	f7fb bf4e 	b.w	8001af4 <USBD_Start>
 8005c58:	200025e0 	.word	0x200025e0
 8005c5c:	20000454 	.word	0x20000454
 8005c60:	2000054c 	.word	0x2000054c
 8005c64:	20000584 	.word	0x20000584

08005c68 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8005c68:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d01e      	beq.n	8005cae <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8005c70:	4602      	mov	r2, r0

  htim->State = HAL_TIM_STATE_BUSY;
 8005c72:	2002      	movs	r0, #2

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005c74:	6813      	ldr	r3, [r2, #0]
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8005c76:	b430      	push	{r4, r5}
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);

  htim->State = HAL_TIM_STATE_BUSY;
 8005c78:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005c7c:	685c      	ldr	r4, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8005c7e:	6808      	ldr	r0, [r1, #0]
  __HAL_LOCK(htim);

  htim->State = HAL_TIM_STATE_BUSY;

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005c80:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8005c84:	605c      	str	r4, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8005c86:	685c      	ldr	r4, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8005c88:	6849      	ldr	r1, [r1, #4]
  htim->State = HAL_TIM_STATE_BUSY;

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8005c8a:	4320      	orrs	r0, r4
 8005c8c:	6058      	str	r0, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8005c8e:	6898      	ldr	r0, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005c90:	2400      	movs	r4, #0
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8005c92:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8005c96:	6098      	str	r0, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8005c98:	6898      	ldr	r0, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8005c9a:	2501      	movs	r5, #1
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8005c9c:	4301      	orrs	r1, r0
 8005c9e:	6099      	str	r1, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
 8005ca0:	4620      	mov	r0, r4
  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;

  htim->State = HAL_TIM_STATE_READY;
 8005ca2:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005ca6:	f882 4038 	strb.w	r4, [r2, #56]	; 0x38

  return HAL_OK;
}
 8005caa:	bc30      	pop	{r4, r5}
 8005cac:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8005cae:	2002      	movs	r0, #2
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop

08005cb4 <HAL_TIMEx_CommutationCallback>:
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop

08005cb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop

08005cbc <free>:
 8005cbc:	4b02      	ldr	r3, [pc, #8]	; (8005cc8 <free+0xc>)
 8005cbe:	4601      	mov	r1, r0
 8005cc0:	6818      	ldr	r0, [r3, #0]
 8005cc2:	f000 b92b 	b.w	8005f1c <_free_r>
 8005cc6:	bf00      	nop
 8005cc8:	20000008 	.word	0x20000008

08005ccc <memcpy>:
 8005ccc:	4684      	mov	ip, r0
 8005cce:	ea41 0300 	orr.w	r3, r1, r0
 8005cd2:	f013 0303 	ands.w	r3, r3, #3
 8005cd6:	d149      	bne.n	8005d6c <memcpy+0xa0>
 8005cd8:	3a40      	subs	r2, #64	; 0x40
 8005cda:	d323      	bcc.n	8005d24 <memcpy+0x58>
 8005cdc:	680b      	ldr	r3, [r1, #0]
 8005cde:	6003      	str	r3, [r0, #0]
 8005ce0:	684b      	ldr	r3, [r1, #4]
 8005ce2:	6043      	str	r3, [r0, #4]
 8005ce4:	688b      	ldr	r3, [r1, #8]
 8005ce6:	6083      	str	r3, [r0, #8]
 8005ce8:	68cb      	ldr	r3, [r1, #12]
 8005cea:	60c3      	str	r3, [r0, #12]
 8005cec:	690b      	ldr	r3, [r1, #16]
 8005cee:	6103      	str	r3, [r0, #16]
 8005cf0:	694b      	ldr	r3, [r1, #20]
 8005cf2:	6143      	str	r3, [r0, #20]
 8005cf4:	698b      	ldr	r3, [r1, #24]
 8005cf6:	6183      	str	r3, [r0, #24]
 8005cf8:	69cb      	ldr	r3, [r1, #28]
 8005cfa:	61c3      	str	r3, [r0, #28]
 8005cfc:	6a0b      	ldr	r3, [r1, #32]
 8005cfe:	6203      	str	r3, [r0, #32]
 8005d00:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8005d02:	6243      	str	r3, [r0, #36]	; 0x24
 8005d04:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005d06:	6283      	str	r3, [r0, #40]	; 0x28
 8005d08:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005d0a:	62c3      	str	r3, [r0, #44]	; 0x2c
 8005d0c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8005d0e:	6303      	str	r3, [r0, #48]	; 0x30
 8005d10:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005d12:	6343      	str	r3, [r0, #52]	; 0x34
 8005d14:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8005d16:	6383      	str	r3, [r0, #56]	; 0x38
 8005d18:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8005d1a:	63c3      	str	r3, [r0, #60]	; 0x3c
 8005d1c:	3040      	adds	r0, #64	; 0x40
 8005d1e:	3140      	adds	r1, #64	; 0x40
 8005d20:	3a40      	subs	r2, #64	; 0x40
 8005d22:	d2db      	bcs.n	8005cdc <memcpy+0x10>
 8005d24:	3230      	adds	r2, #48	; 0x30
 8005d26:	d30b      	bcc.n	8005d40 <memcpy+0x74>
 8005d28:	680b      	ldr	r3, [r1, #0]
 8005d2a:	6003      	str	r3, [r0, #0]
 8005d2c:	684b      	ldr	r3, [r1, #4]
 8005d2e:	6043      	str	r3, [r0, #4]
 8005d30:	688b      	ldr	r3, [r1, #8]
 8005d32:	6083      	str	r3, [r0, #8]
 8005d34:	68cb      	ldr	r3, [r1, #12]
 8005d36:	60c3      	str	r3, [r0, #12]
 8005d38:	3010      	adds	r0, #16
 8005d3a:	3110      	adds	r1, #16
 8005d3c:	3a10      	subs	r2, #16
 8005d3e:	d2f3      	bcs.n	8005d28 <memcpy+0x5c>
 8005d40:	320c      	adds	r2, #12
 8005d42:	d305      	bcc.n	8005d50 <memcpy+0x84>
 8005d44:	f851 3b04 	ldr.w	r3, [r1], #4
 8005d48:	f840 3b04 	str.w	r3, [r0], #4
 8005d4c:	3a04      	subs	r2, #4
 8005d4e:	d2f9      	bcs.n	8005d44 <memcpy+0x78>
 8005d50:	3204      	adds	r2, #4
 8005d52:	d008      	beq.n	8005d66 <memcpy+0x9a>
 8005d54:	07d2      	lsls	r2, r2, #31
 8005d56:	bf1c      	itt	ne
 8005d58:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8005d5c:	f800 3b01 	strbne.w	r3, [r0], #1
 8005d60:	d301      	bcc.n	8005d66 <memcpy+0x9a>
 8005d62:	880b      	ldrh	r3, [r1, #0]
 8005d64:	8003      	strh	r3, [r0, #0]
 8005d66:	4660      	mov	r0, ip
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	2a08      	cmp	r2, #8
 8005d6e:	d313      	bcc.n	8005d98 <memcpy+0xcc>
 8005d70:	078b      	lsls	r3, r1, #30
 8005d72:	d0b1      	beq.n	8005cd8 <memcpy+0xc>
 8005d74:	f010 0303 	ands.w	r3, r0, #3
 8005d78:	d0ae      	beq.n	8005cd8 <memcpy+0xc>
 8005d7a:	f1c3 0304 	rsb	r3, r3, #4
 8005d7e:	1ad2      	subs	r2, r2, r3
 8005d80:	07db      	lsls	r3, r3, #31
 8005d82:	bf1c      	itt	ne
 8005d84:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8005d88:	f800 3b01 	strbne.w	r3, [r0], #1
 8005d8c:	d3a4      	bcc.n	8005cd8 <memcpy+0xc>
 8005d8e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005d92:	f820 3b02 	strh.w	r3, [r0], #2
 8005d96:	e79f      	b.n	8005cd8 <memcpy+0xc>
 8005d98:	3a04      	subs	r2, #4
 8005d9a:	d3d9      	bcc.n	8005d50 <memcpy+0x84>
 8005d9c:	3a01      	subs	r2, #1
 8005d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005da2:	f800 3b01 	strb.w	r3, [r0], #1
 8005da6:	d2f9      	bcs.n	8005d9c <memcpy+0xd0>
 8005da8:	780b      	ldrb	r3, [r1, #0]
 8005daa:	7003      	strb	r3, [r0, #0]
 8005dac:	784b      	ldrb	r3, [r1, #1]
 8005dae:	7043      	strb	r3, [r0, #1]
 8005db0:	788b      	ldrb	r3, [r1, #2]
 8005db2:	7083      	strb	r3, [r0, #2]
 8005db4:	4660      	mov	r0, ip
 8005db6:	4770      	bx	lr

08005db8 <memset>:
 8005db8:	b470      	push	{r4, r5, r6}
 8005dba:	0784      	lsls	r4, r0, #30
 8005dbc:	d046      	beq.n	8005e4c <memset+0x94>
 8005dbe:	1e54      	subs	r4, r2, #1
 8005dc0:	2a00      	cmp	r2, #0
 8005dc2:	d041      	beq.n	8005e48 <memset+0x90>
 8005dc4:	b2cd      	uxtb	r5, r1
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	e002      	b.n	8005dd0 <memset+0x18>
 8005dca:	1e62      	subs	r2, r4, #1
 8005dcc:	b3e4      	cbz	r4, 8005e48 <memset+0x90>
 8005dce:	4614      	mov	r4, r2
 8005dd0:	f803 5b01 	strb.w	r5, [r3], #1
 8005dd4:	079a      	lsls	r2, r3, #30
 8005dd6:	d1f8      	bne.n	8005dca <memset+0x12>
 8005dd8:	2c03      	cmp	r4, #3
 8005dda:	d92e      	bls.n	8005e3a <memset+0x82>
 8005ddc:	b2cd      	uxtb	r5, r1
 8005dde:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005de2:	2c0f      	cmp	r4, #15
 8005de4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005de8:	d919      	bls.n	8005e1e <memset+0x66>
 8005dea:	4626      	mov	r6, r4
 8005dec:	f103 0210 	add.w	r2, r3, #16
 8005df0:	3e10      	subs	r6, #16
 8005df2:	2e0f      	cmp	r6, #15
 8005df4:	f842 5c10 	str.w	r5, [r2, #-16]
 8005df8:	f842 5c0c 	str.w	r5, [r2, #-12]
 8005dfc:	f842 5c08 	str.w	r5, [r2, #-8]
 8005e00:	f842 5c04 	str.w	r5, [r2, #-4]
 8005e04:	f102 0210 	add.w	r2, r2, #16
 8005e08:	d8f2      	bhi.n	8005df0 <memset+0x38>
 8005e0a:	f1a4 0210 	sub.w	r2, r4, #16
 8005e0e:	f022 020f 	bic.w	r2, r2, #15
 8005e12:	f004 040f 	and.w	r4, r4, #15
 8005e16:	3210      	adds	r2, #16
 8005e18:	2c03      	cmp	r4, #3
 8005e1a:	4413      	add	r3, r2
 8005e1c:	d90d      	bls.n	8005e3a <memset+0x82>
 8005e1e:	461e      	mov	r6, r3
 8005e20:	4622      	mov	r2, r4
 8005e22:	3a04      	subs	r2, #4
 8005e24:	2a03      	cmp	r2, #3
 8005e26:	f846 5b04 	str.w	r5, [r6], #4
 8005e2a:	d8fa      	bhi.n	8005e22 <memset+0x6a>
 8005e2c:	1f22      	subs	r2, r4, #4
 8005e2e:	f022 0203 	bic.w	r2, r2, #3
 8005e32:	3204      	adds	r2, #4
 8005e34:	4413      	add	r3, r2
 8005e36:	f004 0403 	and.w	r4, r4, #3
 8005e3a:	b12c      	cbz	r4, 8005e48 <memset+0x90>
 8005e3c:	b2c9      	uxtb	r1, r1
 8005e3e:	441c      	add	r4, r3
 8005e40:	f803 1b01 	strb.w	r1, [r3], #1
 8005e44:	42a3      	cmp	r3, r4
 8005e46:	d1fb      	bne.n	8005e40 <memset+0x88>
 8005e48:	bc70      	pop	{r4, r5, r6}
 8005e4a:	4770      	bx	lr
 8005e4c:	4614      	mov	r4, r2
 8005e4e:	4603      	mov	r3, r0
 8005e50:	e7c2      	b.n	8005dd8 <memset+0x20>
 8005e52:	bf00      	nop

08005e54 <__malloc_lock>:
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop

08005e58 <__malloc_unlock>:
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop

08005e5c <_sbrk_r>:
 8005e5c:	b538      	push	{r3, r4, r5, lr}
 8005e5e:	4c07      	ldr	r4, [pc, #28]	; (8005e7c <_sbrk_r+0x20>)
 8005e60:	2300      	movs	r3, #0
 8005e62:	4605      	mov	r5, r0
 8005e64:	4608      	mov	r0, r1
 8005e66:	6023      	str	r3, [r4, #0]
 8005e68:	f7fe f854 	bl	8003f14 <_sbrk>
 8005e6c:	1c43      	adds	r3, r0, #1
 8005e6e:	d000      	beq.n	8005e72 <_sbrk_r+0x16>
 8005e70:	bd38      	pop	{r3, r4, r5, pc}
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0fb      	beq.n	8005e70 <_sbrk_r+0x14>
 8005e78:	602b      	str	r3, [r5, #0]
 8005e7a:	bd38      	pop	{r3, r4, r5, pc}
 8005e7c:	20002804 	.word	0x20002804

08005e80 <_malloc_trim_r>:
 8005e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e82:	460c      	mov	r4, r1
 8005e84:	4f22      	ldr	r7, [pc, #136]	; (8005f10 <_malloc_trim_r+0x90>)
 8005e86:	4606      	mov	r6, r0
 8005e88:	f7ff ffe4 	bl	8005e54 <__malloc_lock>
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	685d      	ldr	r5, [r3, #4]
 8005e90:	f025 0503 	bic.w	r5, r5, #3
 8005e94:	1b29      	subs	r1, r5, r4
 8005e96:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8005e9a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8005e9e:	f021 010f 	bic.w	r1, r1, #15
 8005ea2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8005ea6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8005eaa:	db07      	blt.n	8005ebc <_malloc_trim_r+0x3c>
 8005eac:	2100      	movs	r1, #0
 8005eae:	4630      	mov	r0, r6
 8005eb0:	f7ff ffd4 	bl	8005e5c <_sbrk_r>
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	442b      	add	r3, r5
 8005eb8:	4298      	cmp	r0, r3
 8005eba:	d004      	beq.n	8005ec6 <_malloc_trim_r+0x46>
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	f7ff ffcb 	bl	8005e58 <__malloc_unlock>
 8005ec2:	2000      	movs	r0, #0
 8005ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ec6:	4261      	negs	r1, r4
 8005ec8:	4630      	mov	r0, r6
 8005eca:	f7ff ffc7 	bl	8005e5c <_sbrk_r>
 8005ece:	3001      	adds	r0, #1
 8005ed0:	d00d      	beq.n	8005eee <_malloc_trim_r+0x6e>
 8005ed2:	4b10      	ldr	r3, [pc, #64]	; (8005f14 <_malloc_trim_r+0x94>)
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	6819      	ldr	r1, [r3, #0]
 8005ed8:	1b2d      	subs	r5, r5, r4
 8005eda:	f045 0501 	orr.w	r5, r5, #1
 8005ede:	4630      	mov	r0, r6
 8005ee0:	1b09      	subs	r1, r1, r4
 8005ee2:	6055      	str	r5, [r2, #4]
 8005ee4:	6019      	str	r1, [r3, #0]
 8005ee6:	f7ff ffb7 	bl	8005e58 <__malloc_unlock>
 8005eea:	2001      	movs	r0, #1
 8005eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eee:	2100      	movs	r1, #0
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	f7ff ffb3 	bl	8005e5c <_sbrk_r>
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	1a83      	subs	r3, r0, r2
 8005efa:	2b0f      	cmp	r3, #15
 8005efc:	ddde      	ble.n	8005ebc <_malloc_trim_r+0x3c>
 8005efe:	4c06      	ldr	r4, [pc, #24]	; (8005f18 <_malloc_trim_r+0x98>)
 8005f00:	4904      	ldr	r1, [pc, #16]	; (8005f14 <_malloc_trim_r+0x94>)
 8005f02:	6824      	ldr	r4, [r4, #0]
 8005f04:	f043 0301 	orr.w	r3, r3, #1
 8005f08:	1b00      	subs	r0, r0, r4
 8005f0a:	6053      	str	r3, [r2, #4]
 8005f0c:	6008      	str	r0, [r1, #0]
 8005f0e:	e7d5      	b.n	8005ebc <_malloc_trim_r+0x3c>
 8005f10:	20000594 	.word	0x20000594
 8005f14:	20001d00 	.word	0x20001d00
 8005f18:	200009a0 	.word	0x200009a0

08005f1c <_free_r>:
 8005f1c:	2900      	cmp	r1, #0
 8005f1e:	d045      	beq.n	8005fac <_free_r+0x90>
 8005f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f24:	460d      	mov	r5, r1
 8005f26:	4680      	mov	r8, r0
 8005f28:	f7ff ff94 	bl	8005e54 <__malloc_lock>
 8005f2c:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8005f30:	496a      	ldr	r1, [pc, #424]	; (80060dc <_free_r+0x1c0>)
 8005f32:	f1a5 0408 	sub.w	r4, r5, #8
 8005f36:	f027 0301 	bic.w	r3, r7, #1
 8005f3a:	18e2      	adds	r2, r4, r3
 8005f3c:	688e      	ldr	r6, [r1, #8]
 8005f3e:	6850      	ldr	r0, [r2, #4]
 8005f40:	42b2      	cmp	r2, r6
 8005f42:	f020 0003 	bic.w	r0, r0, #3
 8005f46:	d062      	beq.n	800600e <_free_r+0xf2>
 8005f48:	07fe      	lsls	r6, r7, #31
 8005f4a:	6050      	str	r0, [r2, #4]
 8005f4c:	d40b      	bmi.n	8005f66 <_free_r+0x4a>
 8005f4e:	f855 7c08 	ldr.w	r7, [r5, #-8]
 8005f52:	f101 0e08 	add.w	lr, r1, #8
 8005f56:	1be4      	subs	r4, r4, r7
 8005f58:	68a5      	ldr	r5, [r4, #8]
 8005f5a:	443b      	add	r3, r7
 8005f5c:	4575      	cmp	r5, lr
 8005f5e:	d06f      	beq.n	8006040 <_free_r+0x124>
 8005f60:	68e7      	ldr	r7, [r4, #12]
 8005f62:	60ef      	str	r7, [r5, #12]
 8005f64:	60bd      	str	r5, [r7, #8]
 8005f66:	1815      	adds	r5, r2, r0
 8005f68:	686d      	ldr	r5, [r5, #4]
 8005f6a:	07ed      	lsls	r5, r5, #31
 8005f6c:	d542      	bpl.n	8005ff4 <_free_r+0xd8>
 8005f6e:	f043 0201 	orr.w	r2, r3, #1
 8005f72:	6062      	str	r2, [r4, #4]
 8005f74:	50e3      	str	r3, [r4, r3]
 8005f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f7a:	d218      	bcs.n	8005fae <_free_r+0x92>
 8005f7c:	08db      	lsrs	r3, r3, #3
 8005f7e:	6848      	ldr	r0, [r1, #4]
 8005f80:	109d      	asrs	r5, r3, #2
 8005f82:	2201      	movs	r2, #1
 8005f84:	3301      	adds	r3, #1
 8005f86:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 8005f8a:	fa02 f505 	lsl.w	r5, r2, r5
 8005f8e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8005f92:	4328      	orrs	r0, r5
 8005f94:	3a08      	subs	r2, #8
 8005f96:	60e2      	str	r2, [r4, #12]
 8005f98:	60a7      	str	r7, [r4, #8]
 8005f9a:	6048      	str	r0, [r1, #4]
 8005f9c:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
 8005fa0:	60fc      	str	r4, [r7, #12]
 8005fa2:	4640      	mov	r0, r8
 8005fa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa8:	f7ff bf56 	b.w	8005e58 <__malloc_unlock>
 8005fac:	4770      	bx	lr
 8005fae:	0a5a      	lsrs	r2, r3, #9
 8005fb0:	2a04      	cmp	r2, #4
 8005fb2:	d853      	bhi.n	800605c <_free_r+0x140>
 8005fb4:	099a      	lsrs	r2, r3, #6
 8005fb6:	f102 0739 	add.w	r7, r2, #57	; 0x39
 8005fba:	007f      	lsls	r7, r7, #1
 8005fbc:	f102 0538 	add.w	r5, r2, #56	; 0x38
 8005fc0:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 8005fc4:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 8005fc8:	3808      	subs	r0, #8
 8005fca:	4290      	cmp	r0, r2
 8005fcc:	4943      	ldr	r1, [pc, #268]	; (80060dc <_free_r+0x1c0>)
 8005fce:	d04d      	beq.n	800606c <_free_r+0x150>
 8005fd0:	6851      	ldr	r1, [r2, #4]
 8005fd2:	f021 0103 	bic.w	r1, r1, #3
 8005fd6:	428b      	cmp	r3, r1
 8005fd8:	d202      	bcs.n	8005fe0 <_free_r+0xc4>
 8005fda:	6892      	ldr	r2, [r2, #8]
 8005fdc:	4290      	cmp	r0, r2
 8005fde:	d1f7      	bne.n	8005fd0 <_free_r+0xb4>
 8005fe0:	68d0      	ldr	r0, [r2, #12]
 8005fe2:	60e0      	str	r0, [r4, #12]
 8005fe4:	60a2      	str	r2, [r4, #8]
 8005fe6:	6084      	str	r4, [r0, #8]
 8005fe8:	60d4      	str	r4, [r2, #12]
 8005fea:	4640      	mov	r0, r8
 8005fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff0:	f7ff bf32 	b.w	8005e58 <__malloc_unlock>
 8005ff4:	6895      	ldr	r5, [r2, #8]
 8005ff6:	4f3a      	ldr	r7, [pc, #232]	; (80060e0 <_free_r+0x1c4>)
 8005ff8:	4403      	add	r3, r0
 8005ffa:	42bd      	cmp	r5, r7
 8005ffc:	d03f      	beq.n	800607e <_free_r+0x162>
 8005ffe:	68d0      	ldr	r0, [r2, #12]
 8006000:	f043 0201 	orr.w	r2, r3, #1
 8006004:	60e8      	str	r0, [r5, #12]
 8006006:	6085      	str	r5, [r0, #8]
 8006008:	6062      	str	r2, [r4, #4]
 800600a:	50e3      	str	r3, [r4, r3]
 800600c:	e7b3      	b.n	8005f76 <_free_r+0x5a>
 800600e:	07ff      	lsls	r7, r7, #31
 8006010:	4403      	add	r3, r0
 8006012:	d407      	bmi.n	8006024 <_free_r+0x108>
 8006014:	f855 5c08 	ldr.w	r5, [r5, #-8]
 8006018:	1b64      	subs	r4, r4, r5
 800601a:	68e2      	ldr	r2, [r4, #12]
 800601c:	68a0      	ldr	r0, [r4, #8]
 800601e:	442b      	add	r3, r5
 8006020:	60c2      	str	r2, [r0, #12]
 8006022:	6090      	str	r0, [r2, #8]
 8006024:	4a2f      	ldr	r2, [pc, #188]	; (80060e4 <_free_r+0x1c8>)
 8006026:	f043 0001 	orr.w	r0, r3, #1
 800602a:	6812      	ldr	r2, [r2, #0]
 800602c:	6060      	str	r0, [r4, #4]
 800602e:	4293      	cmp	r3, r2
 8006030:	608c      	str	r4, [r1, #8]
 8006032:	d3b6      	bcc.n	8005fa2 <_free_r+0x86>
 8006034:	4b2c      	ldr	r3, [pc, #176]	; (80060e8 <_free_r+0x1cc>)
 8006036:	4640      	mov	r0, r8
 8006038:	6819      	ldr	r1, [r3, #0]
 800603a:	f7ff ff21 	bl	8005e80 <_malloc_trim_r>
 800603e:	e7b0      	b.n	8005fa2 <_free_r+0x86>
 8006040:	1811      	adds	r1, r2, r0
 8006042:	6849      	ldr	r1, [r1, #4]
 8006044:	07c9      	lsls	r1, r1, #31
 8006046:	d444      	bmi.n	80060d2 <_free_r+0x1b6>
 8006048:	6891      	ldr	r1, [r2, #8]
 800604a:	4403      	add	r3, r0
 800604c:	68d2      	ldr	r2, [r2, #12]
 800604e:	f043 0001 	orr.w	r0, r3, #1
 8006052:	60ca      	str	r2, [r1, #12]
 8006054:	6091      	str	r1, [r2, #8]
 8006056:	6060      	str	r0, [r4, #4]
 8006058:	50e3      	str	r3, [r4, r3]
 800605a:	e7a2      	b.n	8005fa2 <_free_r+0x86>
 800605c:	2a14      	cmp	r2, #20
 800605e:	d817      	bhi.n	8006090 <_free_r+0x174>
 8006060:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 8006064:	007f      	lsls	r7, r7, #1
 8006066:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 800606a:	e7a9      	b.n	8005fc0 <_free_r+0xa4>
 800606c:	10aa      	asrs	r2, r5, #2
 800606e:	684b      	ldr	r3, [r1, #4]
 8006070:	2501      	movs	r5, #1
 8006072:	fa05 f202 	lsl.w	r2, r5, r2
 8006076:	4313      	orrs	r3, r2
 8006078:	604b      	str	r3, [r1, #4]
 800607a:	4602      	mov	r2, r0
 800607c:	e7b1      	b.n	8005fe2 <_free_r+0xc6>
 800607e:	f043 0201 	orr.w	r2, r3, #1
 8006082:	614c      	str	r4, [r1, #20]
 8006084:	610c      	str	r4, [r1, #16]
 8006086:	60e5      	str	r5, [r4, #12]
 8006088:	60a5      	str	r5, [r4, #8]
 800608a:	6062      	str	r2, [r4, #4]
 800608c:	50e3      	str	r3, [r4, r3]
 800608e:	e788      	b.n	8005fa2 <_free_r+0x86>
 8006090:	2a54      	cmp	r2, #84	; 0x54
 8006092:	d806      	bhi.n	80060a2 <_free_r+0x186>
 8006094:	0b1a      	lsrs	r2, r3, #12
 8006096:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 800609a:	007f      	lsls	r7, r7, #1
 800609c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 80060a0:	e78e      	b.n	8005fc0 <_free_r+0xa4>
 80060a2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80060a6:	d806      	bhi.n	80060b6 <_free_r+0x19a>
 80060a8:	0bda      	lsrs	r2, r3, #15
 80060aa:	f102 0778 	add.w	r7, r2, #120	; 0x78
 80060ae:	007f      	lsls	r7, r7, #1
 80060b0:	f102 0577 	add.w	r5, r2, #119	; 0x77
 80060b4:	e784      	b.n	8005fc0 <_free_r+0xa4>
 80060b6:	f240 5054 	movw	r0, #1364	; 0x554
 80060ba:	4282      	cmp	r2, r0
 80060bc:	d806      	bhi.n	80060cc <_free_r+0x1b0>
 80060be:	0c9a      	lsrs	r2, r3, #18
 80060c0:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 80060c4:	007f      	lsls	r7, r7, #1
 80060c6:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 80060ca:	e779      	b.n	8005fc0 <_free_r+0xa4>
 80060cc:	27fe      	movs	r7, #254	; 0xfe
 80060ce:	257e      	movs	r5, #126	; 0x7e
 80060d0:	e776      	b.n	8005fc0 <_free_r+0xa4>
 80060d2:	f043 0201 	orr.w	r2, r3, #1
 80060d6:	6062      	str	r2, [r4, #4]
 80060d8:	50e3      	str	r3, [r4, r3]
 80060da:	e762      	b.n	8005fa2 <_free_r+0x86>
 80060dc:	20000594 	.word	0x20000594
 80060e0:	2000059c 	.word	0x2000059c
 80060e4:	2000099c 	.word	0x2000099c
 80060e8:	20001cfc 	.word	0x20001cfc
 80060ec:	05040302 	.word	0x05040302
 80060f0:	09080706 	.word	0x09080706
 80060f4:	0d0c0b0a 	.word	0x0d0c0b0a
 80060f8:	10100f0e 	.word	0x10100f0e
 80060fc:	00000201 	.word	0x00000201
 8006100:	05040302 	.word	0x05040302
 8006104:	09080706 	.word	0x09080706
 8006108:	0d0c0b0a 	.word	0x0d0c0b0a
 800610c:	10100f0e 	.word	0x10100f0e
 8006110:	00000201 	.word	0x00000201

08006114 <aAPBAHBPrescTable>:
 8006114:	00000000 04030201 04030201 09080706     ................
 8006124:	08006164 08001d1d 00000000 00000000     da..............
 8006134:	00000080 08006154 08001d2d 00000000     ....Ta..-.......
 8006144:	00000000 00000040 00000080 00000001     ....@...........
 8006154:	6b736154 4664654c 6873616c 00000000     TaskLedFlash....
 8006164:	61666564 54746c75 006b7361 51726d54     defaultTask.TmrQ
 8006174:	00000000 20726d54 00637653 454c4449     ....Tmr Svc.IDLE
 8006184:	00000000 694d5453 656f7263 7463656c     ....STMicroelect
 8006194:	696e6f72 00007363 334d5453 69562032     ronics..STM32 Vi
 80061a4:	61757472 6f43206c 726f506d 00000074     rtual ComPort...
 80061b4:	30303030 30303030 41313030 00000000     00000000001A....
 80061c4:	20434443 666e6f43 00006769 20434443     CDC Config..CDC 
 80061d4:	65746e49 63616672 00000065              Interface...
